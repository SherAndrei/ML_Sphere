guildi.ru/referaty_po_informatike/diplomnaya_rabota_osnovy.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1251" />
<title>Дипломная работа: Основы программирования</title>
<meta name="description" content="Дипломная работа: Основы программирования 1 . Cохранение информации в памяти компьютера Цель работы: Изучать как сохранять и обработать документ в памяти компьютера с помощью Microsoft Word Теоре...">
<meta name="keywords" content="рефераты, скачать рефераты, рефераты бесплатно, курсовые работы, реферат, дипломные работы, Дипломная работа: Основы программирования">
<link rel="stylesheet" type="text/css" href="/a.css">
</head>

<body title="рефераты">
<table width="1225" align="center" title="рефераты">
  <IDXSKIP><tr title="рефераты">
    <td colspan="3" title="рефераты"><a href="/index.html"><img src="/a.jpg" alt="рефераты" /></a></td>
  </tr></IDXSKIP>
 
  <tr title="рефераты">
    <td width="197" valign="top" title="рефераты" class="uuuuuu"><IDXSKIP><a href="/index.html">Главная</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_reklame.html">Рефераты по рекламе</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_fizike.html">Рефераты по физике</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_filosofii.html">Рефераты по философии</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_finansam.html">Рефераты по финансам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_ximii.html">Рефераты по химии</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_xozyajstvennomu_pravu.html">Рефераты по хозяйственному праву</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_cifrovym_ustrojstvam.html">Рефераты по цифровым устройствам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_ekologicheskomu_pravu.html">Рефераты по экологическому праву</a></IDXSKIP><br><br>
<a href="/referaty_po_ekonomiko-matematicheskomu.html"><IDXSKIP>Рефераты по экономико-математическому моделированию</IDXSKIP></a><br><br>
<a href="/referaty_po_ekonomicheskoj_geografii.html"><IDXSKIP>Рефераты по экономической географии</IDXSKIP></a><br><br>
<IDXSKIP><a href="/referaty_po_ekonomicheskoj_teorii.html">Рефераты по экономической теории</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_etike.html">Рефераты по этике</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_yurisprudencii.html">Рефераты по юриспруденции</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_yazykovedeniyu.html">Рефераты по языковедению</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_yuridicheskim_naukam.html">Рефераты по юридическим наукам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_istorii.html">Рефераты по истории</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_kompyuternym_naukam.html">Рефераты по компьютерным наукам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_medicinskim_naukam.html">Рефераты по медицинским наукам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_finansovym_naukam.html">Рефераты по финансовым наукам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_upravlencheskim_naukam.html">Рефераты по управленческим наукам</a></IDXSKIP><br><br>
<IDXSKIP><a href="/psixologiya_i_pedagogika.html">Психология и педагогика</a></IDXSKIP><br><br>
<IDXSKIP><a href="/promyshlennost_proizvodstvo.html">Промышленность производство</a></IDXSKIP><br><br>
<IDXSKIP><a href="/biologiya_i_ximiya.html">Биология и химия</a></IDXSKIP><br><br>
<IDXSKIP><a href="/yazykoznanie_filologiya.html">Языкознание филология</a></IDXSKIP><br><br>
<IDXSKIP><a href="/izdatelskoe_delo_i_poligrafiya.html">Издательское дело и полиграфия</a></IDXSKIP><br><br>
<a href="/referaty_po_kraevedeniyu_i_etnografii.html"><IDXSKIP>Рефераты по краеведению и этнографии</IDXSKIP></a><br><br>
<IDXSKIP><a href="/referaty_po_religii_i_mifologii.html">Рефераты по религии и мифологии</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_medicine.html">Рефераты по медицине</a></IDXSKIP><br><br>
<IDXSKIP><a href="/referaty_po_seksologii.html">Рефераты по сексологии</a></IDXSKIP><br><br>
<a href="/referaty_po_informatike.html"><IDXSKIP>Рефераты по информатике программированию</IDXSKIP></a><br><br>
<IDXSKIP><a href="/kratkoe_soderzhanie_proizvedenij.html">Краткое содержание произведений</a></IDXSKIP><br><br></td>
    <td valign="top" title="рефераты" class="llll">	
	<h1 title="рефераты">Дипломная работа: Основы программирования</h1>
	
	<h1>Дипломная работа: Основы программирования</h1>
<h2><a name="OLE_LINK12"></a><a name="OLE_LINK11"></a><a name="_Toc535805112">1</a>. Cохранение информации в памяти компьютера</h2>
<p><a name="OLE_LINK19"></a><a name="OLE_LINK18">&nbsp;</a></p>
<p>Цель работы: Изучать как
сохранять и обработать документ в памяти компьютера с помощью Microsoft Word</p>
<p>Теоретическая часть: Механизм сортировки Word позволяет сортировать текст,
ориентируясь на символы конца абзаца, табуляции и др. Чтобы отсортировать весь
документ или только выделенный текст по алфавиту или какому-либо иному
признаку, следует воспользоваться меню Таблица|Сортировка (Table|Sort). Окно
Сортировка текста (Sort Text) позволяет выбрать, нужно ли сортировать целиком
абзацы (Абзацы [Paragraphs]), или только текст, набранный до символа табуляции
(Поле 1 [Field 1]); сортировать по возрастанию или убыванию, по алфавиту,
числам или дате, а также считать ли первую строку текста заголовком (рис. 1).</p>
<p><img width="329" height="234" src="/image/88398_1.jpeg" alt=""></p>
<p>Рис. 1</p>
<p>Обратите внимание: хотя
команда Сортировка находится в меню Таблица, она позволяет сортировать любой, а
не только табличный текст.</p>
<p>Таблицы Word 97 обладает широкими
возможностями оформления таблиц. Для создания простых табличных документов
часто используют табуляцию - после набора каждой &quot;ячейки&quot; таблицы
нажимают клавишу Tab. Для того чтобы быстро &quot;привести в порядок&quot;
таблицу, набранную таким образом, можно использовать простой механизм
оформления табулированного текста - выделить табулированное содержимое и левой
кнопкой мыши поставить позиции табуляции на линейке в верхней части окна Word
97, как показано на рис. 2. Чтобы изменить ширину колонок, маркеры табуляции
можно перетаскивать мышью.</p>
<p><img width="324" height="532" src="/image/88398_2_1.jpeg" alt=""></p>
<p>Рис. 2</p>
<p>Для того чтобы новые
позиции табуляции задавали другой тип выравнивания, щелкните на значке
выравнивания, который находится с левого края линейки.</p>
<br>
<p><img width="306" height="251" src="/image/88398_1.png" alt=""></p>
<p>Рис. 3</p>
<p>Для того чтобы изменить
все возможные параметры табулированного текста, вызовите окно Табуляция (Tabs)
командой меню Word 97 Формат|Табуляция (Format|Tabs). Оно позволяет изменить не
только позиции табуляции и выравнивание табулированного текста, но и тип
заполнителя между колонками (рис. 3).</p>
<p>Табулированный текст
легко преобразовать в таблицу. Для этого его нужно выделить, а затем выбрать
команду Таблица|Преобразо вать в таблицу (Table|Convert Text to Table). В
диалоговом окне Преобразовать в таблицу (Convert Text to Table) будет
автоматически выбрано число столбцов и разделитель, по которому будет
определена граница столбца (рис. 4). Если все выделенные строки будут содержать
равное количество символов табуляции, Word 97 должен правильно опознать эти
параметры.</p>
<p><img width="276" height="164" src="/image/88398_2_1.png" alt=""></p>
<p>Рис. 4</p>
<br>
<p>Для обратного
преобразования - из таблицы в текст - нужно выделить всю таблицу, например,
командой Таблица|Выделить таблицу (Table|Select Table), а затем выбрать команду
Таблица|Преобразовать в текст (Table|Convert Table to Text). Возникнет
диалоговое окно (рис. 5), где следует выбрать символ, который появится вместо
вертикальных разделителей (по умолчанию - символ табуляции).</p>
<p><img width="211" height="136" src="/image/88398_3_1.jpeg" alt=""></p>
<p>Рис. 5</p>
<p>Чтобы создать новую
таблицу, следует воспользоваться командой меню Таблица|Добавить таблицу
(Table|Insert Table), указав в появившемся окне Вставка таблицы (Insert Table)
число столбцов и строк, или щелкнуть на кнопке Добавить таблицу (Insert Table)
панели инструментов Word 97 (рис. 6). Самый простой способ создания таблицы -
нажать кнопку Таблицы и границы (Tables and Borders) инструментальной панели
окна Word 97 и просто нарисовать таблицу с нужным числом строк и столбцов. Для
последова тельного перемещения между ячейками таблицы используйте клавишу Tab,
для обратного перемещения - Shift+Tab.</p>
<p><img width="418" height="157" src="/image/88398_4_1.jpeg" alt=""></p>
<p>Рис. 6</p>
<br>
<p>Чтобы добавить к таблице
новый столбец, нужно выделить столбец, рядом с которым должен появиться новый,
командой Таблица|Выделить столбец (Table|Select Column) или, поместив указатель
мыши на верхнюю границу столбца, щелкнуть ее. После того как столбец выделен,
нужно дать команду Таблица|Добавить столбцы (Table|Insert Columns). Появится
новый столбец, а выделенный будет смещен вправо.</p>
<p>Чтобы добавить столбец с
правого края таблицы, поместите курсор правее крайнего справа столбца, дайте
команду Таблица|Выде лить столбец (Table|Select Column), а затем -
Таблица|Добавить столбцы (Table|Insert Columns). Новую строку внизу таблицы
можно добавить, поместив курсор в последнюю ячейку таблицы и нажав клавишу Tab.
Есть и другой способ - выделить строку, выше которой должна появиться новая,
командой Таблица|Выделить строку (Table|Select Row) и дать команду
Таблица|Добавить строки (Table|Insert Rows). Выделенная строка сместится вниз. Добавив
к таблице несколько колонок, вы обнаружите, что таблица получилась значительно
шире, чем стандартный лист бумаги. Ширину столбцов проще всего регулировать
мышью. Кроме того, можно использовать окно изменения ширины столбцов и высоты строк
(рис. 7), которое появляется по команде Таблица|Высота и ширина ячейки
(Table|Cell Height and Width).</p>
<p><img width="284" height="236" src="/image/88398_3_1.png" alt=""></p>
<p>Рис. 7</p>
<br>
<p>Наиболее легкий способ
быстро привести таблицу в соответствие с шириной листа и объемом текста в
каждой ячейке заключается в следующем: нужно выделить всю таблицу командой
Таблица|Выделить таблицу, затем командой Таблица|Высота и ширина ячейки
(Table|Cell Height and Width) вывести на экран окно Высота и ширина ячеек
(Table|Cell Height and Width) и на вкладке Столбец (Column) нажать кнопку
Автоподбор (AutoFit). Чтобы слить ячейки по горизонтали или вертикали, как на
рис. 8, нужно выделить их и выбрать команду Таблица|Объединить ячейки
(Table|Merge Cells).</p>
<p><img width="388" height="158" src="/image/88398_5_1.jpeg" alt=""></p>
<p>Рис. 8</p>
<p>Горизонтальное
выравнивание текста в ячейках выполняется так же, как и обычное форматирование
абзаца. Вертикальное выравнивание (верхнее, по центру, нижнее) достигается
командой контекстного меню Выравнивание (Alignment), как показано на рис. 9.</p>
<p><img width="387" height="224" src="/image/88398_6_1.jpeg" alt=""></p>
<p>Рис. 9</p>
<br>
<p>Чтобы удалить строки или
столбцы, нужно выделить их. Далее используйте команды Таблица|Удалить строки
(Table|Delete Rows) или Таблица|Удалить столбцы (Table|Delete Columns).</p>
<p><img width="445" height="259" src="/image/88398_4_1.png" alt=""></p>
<h2><a name="OLE_LINK31"></a><a name="OLE_LINK30">Задание:</a></h2>
<h2>1.Сортировка текстов</h2>
<p>2. Создать
таблицу</p>
<p>3. <a
name="OLE_LINK27"></a><a name="OLE_LINK26">Форматир</a>ование текстов</p>
<p>4. Табуляция
текста</p>
<p>5. Гиперссылка в <a name="OLE_LINK23"></a><a name="OLE_LINK22">Ms</a> Word</p>
<h2>Контрольные вопросы:</h2>
<h2>1. Для чего служит Ms Word</h2>
<h2>2. <a name="OLE_LINK25"></a><a
name="OLE_LINK24">Как сортируются тексты в </a><a name="OLE_LINK29"></a><a
name="OLE_LINK28">Ms</a> Word</h2>
<p>3. Как форматируются
тексты в Ms Word</p>
<h2>2. <a name="OLE_LINK21"></a><a name="OLE_LINK20">Выполнение
операции над строками</a></h2>
<p>Цель работы: Изучать выполнений операции над строками с помощью Microsoft Excel</p>
<p>Теоретическая часть:Для запуска EXCEL из операционной среды WINDOWS необходимо:</p>
<p>·&nbsp;
Выполнить щелчок
по кнопке Пуск в главном меню</p>
<p>·&nbsp;
Установить
указатель мыши на пункт Программы</p>
<p>·&nbsp;
В открывшемся
меню выбрать команду Microsoft EXCEL</p>
<p>Существует и более
быстрый способ запуска EXCEL,
для применения которого необходимо наличие панели инструментов Microsoft Office. Если панель Microsoft Office установлена на вашем компьютере, для запуска программы
достаточно выполнить щелчок по кнопке программы.</p>
<h2><a name="_Toc535805114">Окно книги.</a></h2>
<p>Как уже отмечалось
раньше, окно книги составляет основную часть рабочей области. В нижней части
окна книги размещаются кнопки прокрутки ярлычков листов, а в верхней части –
строка заголовка. Кроме того, окно содержит листы и полосы прокрутки. Новая
книга первоначально содержит 3 отдельных листа. Книга является хорошим
организационным средством. Например, вы можете в одной книге собрать вместе все
документы, относящиеся к определённому проекту, или все документы, ведущиеся
одним человеком. Книги позволяют навести порядок на жёстком диске, а также
уменьшить число необходимых шагов при каждодневной подготовке вашей рабочей
области.</p>
<p><img width="433" height="309" src="/image/88398_7_1.jpeg" alt=""></p>
<br>
<p>В нижней части окна книги
находятся несколько кнопок, с помощью которых вы можете переходить от одного
листа к другому. Эти кнопки приведены на рисунке.</p>
<p>Чтобы просмотреть содержание книги,
можно использовать четыре кнопки, расположенные в нижнем левом углу окна. Две
средние кнопки служат для прокрутки на один ярлычок влево или вправо. Две
крайние кнопки выполняют прокрутку к первому или последнему ярлычку книги. Вы
можете изменить количество видимых на экране ярлычков, перетащив вешку
разделения ярлычков. Чтобы восстановить исходное положение вешки разделения
ярлычков, достаточно дважды щёлкнуть по ней. Перечисленные кнопки прокрутки и
вешка разделения ярлычков не активизируют листы книги. Чтобы сделать лист
активным, вы должны после прокрутки ярлычков щёлкнуть по ярлычку нужного листа.</p>
<h2><a name="_Toc535805116">Строка формул.</a></h2>
<p><img width="564" height="321" src="/image/88398_5_1.png" alt=""></p>
<p>Под панелями инструментов
находится строка формул, которая предназначена для обработки содержимого ячеек.
Она разделена на три части. В левой части этой строки находится поле имени, в
котором указывается адрес выбранной ячейки, имя ячейки или функции, а в правой
части показывается содержимое выбранной ячейки. Редактирование данных
осуществляется или в ячейке, или в строке формул. Для перехода в режим
редактирования данных в строке формул следует нажать клавишу F2 или выполнить щелчок в правой части
строки формул. Чтобы установить режим редактирования данных в ячейке,
необходимо выполнить на ней двойной щелчок, вследствие чего ячейка станет
активной и в ней появится курсор ввода.</p>
<h2><a name="_Toc535805120">Ввод данных в
ячейки таблицы.</a></h2>
<p>Ячейки электронной
таблицы могут содержать самую разнообразную информацию: константы и формулы.
При вводе данных Excel
автоматически распознаёт их тип. Ввод данных выполняется в активной ячейке или
в строке формул.</p>
<p>Константы разделяются на
три основные категории: числовые значения, текстовые значения и значения дат и
времени.</p>
<p>Ввод числовых и текстовых
значений.</p>
<p>Для того чтобы ввести
числовое значение, выделите ячейку и введите с клавиатуры число. По мере ввода
цифр, они выводятся в строке формул и в активной ячейке. Числовые значения
могут содержать только цифры от 0 до 9 и специальные символы: + - Е ( ) % $ . ,
/. Если число вводится со знаком + или -, Excel опускает + и сохраняет -. Символ Е используется в
экспоненциальном представлении, например. 1Е6 означает число 1000000. числовые
значения, заключённые в () Excel
интерпретирует как отрицательные числа, например, (100) = -1000. при вводе
можно использовать символы, как десятичные знаки. Кроме того, позволяется
вставлять пробел как разделитель групп разрядов, например, 1 936 838. если
начать ввод числа со знака $, Excel
применяет к ячейке денежный формат, например, при вводе $123456 Excel выведет в ячейке $123456, а в строке
формул 123456. если ввод числа заканчивается символом %, Excel применяет к ячейке процентный
формат. Если при вводе значения используется символ /, то Excel интерпретирует введённое значение
как дробь, например, если ввести 11 5/8, то Excel выведет 11.625 в строке формул и 11 5/8 в ячейке.</p>
<p>Ввод текста аналогичен
вводу числовых значений. Если вводится текст, который не может поместиться в
одной ячейке, Excel выводит текст, перекрывая соседние
ячейки, но текст при этом будет храниться в одной ячейке. Когда вводится текст
в ячейку рядом с другой, которая уже заполнена текстом, то перекрывающийся
текст обрезается на экране, но целиком остаётся во введённой ячейке и увидеть
этот текст целиком можно в строке формул. Длинный текст в ячейке можно ввести с
переносом на следующие строки без наложения текста на другие ячейки необходимо
выполнить следующие действия:</p>
<p>·&nbsp;
В меню Формат
выбрать команду Ячейки</p>
<p>·&nbsp;
В появившемся
окне на вкладке Выравнивание установить флажок Переносить по словам и нажать
клавишу ОК.</p>
<p>Числовой текст может
состоять из текста и чисел, или только из чисел. Если вводимое значение состоит
из текста и чисел, то интерпретируется как текст и вводится как обычно. Но,
если текст состоит целиком из чисел, то перед его набором необходимо набрать
символ апостроф.</p>
<h2><a name="_Toc535805121">Ввод формул.</a></h2>
<p>Если бы не формулы,
электронные таблицы можно было бы создавать с помощью текстового редактора.
Формула – это арифметическое выражение, в котором могут быть числа, адреса
ячеек, функции и знаки арифметических операций: + - * /. Все функции в Excel начинаются со знака = . выделите
пустую ячейку и введите в неё =10+5, нажмите Enter. В ячейке появится значение 15, а в строке формул –
сама формула. В формулах наряду с числами можно использовать адреса ячеек,
которые называются ссылками. Создавая формулу, содержащую ссылки на ячейки, вы
связываете формулу с ячейками книги. Значение формулы зависит от содержимого
ячеек, на которые указывает ссылка, и оно изменяется при изменении содержимого
этих ячеек.</p>
<h2><a name="_Toc535805124">Вычисления.</a></h2>
<p>Здесь мы рассмотрим
возможности применения формул, предоставляемые Excel, на примере таблицы, которая производит расчёт
заработной платы по упрощенной схеме, так как на самом деле расчёт заработной
платы представляет собой более сложную схему.</p>
<p>Итак, представим себе,
что на предприятии работают 10 человек, каждый имеет свою должность и
соответствующий оклад. Вначале необходимо составить так называемую &quot;шапку&quot;
или заголовок таблицы, состоящий из следующих разделов:</p>
<p>·&nbsp; Фамилия</p>
<p>·&nbsp; Имя</p>
<p>·&nbsp; Отчество</p>
<p>·&nbsp; Должность</p>
<p>·&nbsp; Величина заработной платы</p>
<p>·&nbsp; Подоходный налог</p>
<p>·&nbsp; Отчисление в соц. Фонд</p>
<p>·&nbsp; Профсоюзные взносы</p>
<p>·&nbsp; К выдаче</p>
<p>Создав заголовок,
приступают к вводу информации в ячейки таблицы, используя приёмы, рассмотренные
выше. Не заполняются только поля подоходный налог, соц. Фонд, профсоюзные
взносы и к выдаче.</p>
<p>После выполнения этих
действий таблица будет выглядеть так:</p>
<br>
<p><img width="562" height="386" src="/image/88398_6_1.png" alt=""></p>
<p>Следует обратить внимание, что в тех
ячейках, в которых текст оказывается длиннее размера ячейки, необходимо
выполнить операцию переноса текста по словам.</p>
<p>Теперь осталось заполнить
остальные столбцы таблицы. Это – не простые ячейки – это вычисляемые ячейки.
Иными словами, в эти ячейки необходимо ввести расчётные формулы. Для нашего
простейшего варианта принимаются следующие установки:</p>
<p>·&nbsp;
Подоходный налог
взимать из расчёта 5% от заработной платы</p>
<p>·&nbsp;
В соц. фонд
отчислять 10% от заработной платы</p>
<p>·&nbsp;
Профсоюзные
взносы взимать из расчёта 2% от заработной платы</p>
<p>Не трудно догадаться, что
расчётные формулы основываются на арифметической пропорции. Поэтому в ячейку
расчёта Подоходного налога необходимо ввести формулу:</p>
<br>
<p><img width="562" height="210" src="/image/88398_7_1.png" alt=""></p>
<p>Те же действия необходимо проделать
для остальных работников, находящихся в списке, изменяя каждый раз ссылку на
ячейку заработной платы. В результате, после ввода необходимых формул таблица
примет следующий вид:</p>
<p><img width="505" height="350" src="/image/88398_8_1.png" alt=""></p>
<p>Вы, наверное, обратили
внимание, что расчётные формулы для каждого конкретного работника очень похожи.
В частности, разница заключается только в том, что в ссылке на ячейку
заработной платы изменяется только координата столбца. Нетрудно сообразить, что
в случае, когда таблица содержала бы большее количество работников, процесс
ввода расчётных формул растянулся бы на долгое время. Поэтому программа Excel предоставляет удобную возможность по
оптимизации этого процесса. Дело в том, что формулу можно копировать, и
делается это следующим образом. В первую ячейку столбца вводится расчётная
формула обычным образом. Затем необходимо сделать эту ячейку активной, то есть,
выделить её. В правом нижнем углу рамки выделения находится едва заметный
узелок. Необходимо поставить указатель мыши в эту точку (если это сделано
правильно указатель принимает форму +), нажать клавишу мыши и не отпуская её
провести по остальным ячейкам таблицы, в которые осуществляется копирование
формулы. После того, как вы проделаете эту операцию во все ячейки копирования
будет вставлена соответствующая формула. Итак, давайте в первые ячейки таблицы
столбцов &quot;Соц. Фонд&quot;, &quot;Проф. Взносы&quot;, &quot;К выдаче&quot;
занесём соответствующие расчётные формулы. Они будут отличаться только расчётом
процента от заработной платы, а в ячейке столбца &quot;К выдаче&quot; должна
быть введена формула разности между заработной платой и всеми вычетами. Таблица
принимает следующий вид:</p>
<p><img width="559" height="386" src="/image/88398_9_1.png" alt=""></p>
<br>
<h2>Задание:</h2>
<h2>1.Ввод данных</h2>
<p>2. Работа с листами</p>
<p>3.
Форматирование ячеек</p>
<p>4. Ввод формул</p>
<p>5. Гиперссылка в Ms <a name="OLE_LINK33"></a><a name="OLE_LINK32">Excel</a></p>
<h2>Контрольные вопросы:</h2>
<p>1. Для чего служит Ms Excel</p>
<p>2. Как используются
формулы в Ms <a
name="OLE_LINK35"></a><a name="OLE_LINK34">Excel</a></p>
<h2>3. Как форматируются тексты в Ms Excel</h2>
<h2>3. Список в оперативной
памяти</h2>
<p>Блоки памяти и модули</p>
<p>Основные понятия</p>
<p>Оперативная память — это рабочая область для процессора
компьютера. В ней во время работы хранятся программы и данные. Оперативная
память часто рассматривается как временное хранилище, потому что данные и
программы в ней сохраняются только при включенном компьютере или до нажатия
кнопки сброса (reset). Перед выключением или нажатием кнопки сброса все данные,
подвергнутые изменениям во время работы, необходимо сохранить на запоминающем
устройстве, которое может хранить информацию постоянно (обычно это жесткий
диск). При новом включении питания сохраненная информация вновь может быть
загружена в память.</p>
<p>Устройства оперативной
памяти иногда называют запоминающими устройствами с произвольным доступом. Это
означает, что обращение к данным, хранящимся в оперативной памяти, не зависит
от порядка их расположения в ней. Когда говорят о памяти компьютера, обычно
подразумевают оперативную память, прежде всего микросхемы памяти или модули, в
которых хранятся активные программы и данные, используемые процессором. Однако
иногда термин память относится также к внешним запоминающим устройствам, таким
как диски и накопители на магнитной ленте.</p>
<p>Термин оперативная память
часто обозначает не только микросхемы, которые составляют устройства памяти в
системе, но включает и такие понятия, как логическое отображение и размещение.
Логическое отображение — это способ представления адресов памяти на фактически
установленных микросхемах. Размещение — это расположение информации (данных и
команд) определенного типа по конкретным адресам памяти системы.</p>
<p>В современных компьютерах
используются запоминающие устройства трех основных типов.</p>
<p>·&nbsp;
ROM (Read Only Memory). Постоянное
запоминающее устройство — ПЗУ, не способное выполнять операцию записи данных.</p>
<p>·&nbsp;
DRAM (Dynamic Random Access
Memory). Динамическое
запоминающее устройство с произвольным порядком выборки.</p>
<p>·&nbsp;
SRAM (Static RAM). Статическая оперативная
память.</p>
<p>Память типа ROM</p>
<p>В памяти типа ROM (Read
Only Memory), или ПЗУ (постоянное запоминающее устройство), данные можно только
хранить, изменять их нельзя. Именно поэтому такая память используется только
для чтения данных. ROM также часто называется энергонезависимой памятью, потому
что любые данные, записанные в нее, сохраняются при выключении питания. Поэтому
в ROM помещаются команды запуска персонального компьютера, т.е. программное
обеспечение, которое загружает систему. Заметьте, что ROM и оперативная память
— не противоположные понятия. На самом деле ROM представляет собой часть
оперативной памяти системы. Другими словами, часть адресного пространства
оперативной памяти отводится для ROM. Это необходимо для хранения программного
обеспечения, которое позволяет загрузить операционную систему. Основной код
BIOS содержится в микросхеме ROM на системной плате, но на платах адаптеров
также имеются аналогичные микросхемы. Они содержат вспомогательные подпрограммы
базовой системы ввода-вывода и драйверы, необходимые для конкретной платы,
особенно для тех плат, которые должны быть активизированы на раннем этапе
начальной загрузки, например видеоадаптер. Платы, не нуждающиеся в драйверах на
раннем этапе начальной загрузки, обычно не имеют ROM, потому что их драйверы
могут быть загружены с жесткого диска позже — в процессе начальной загрузки.</p>
<p>Память DRAM</p>
<p>Динамическая оперативная
память (Dynamic RAM — DRAM) используется в большинстве систем оперативной
памяти современных персональных компьютеров. Основное преимущество памяти этого
типа состоит в том, что ее ячейки упакованы очень плотно, т.е. в небольшую
микросхему можно упаковать много битов, а значит, на их основе можно построить
память большой емкости. Ячейки памяти в микросхеме DRAM— это крошечные
конденсаторы, которые удерживают заряды. Именно так (наличием или отсутствием
зарядов) и кодируются биты. Проблемы, связанные с памятью этого типа, вызваны
тем, что она динамическая, т.е. должна постоянно регенерироваться, так как в
противном случае электрические заряды в конденсаторах памяти будут &quot;стекать&quot;
и данные будут потеряны. Регенерация происходит, когда контроллер памяти
системы берет крошечный перерыв и обращается ко всем строкам данных в
микросхемах памяти. Большинство систем имеет контроллер памяти (обычно
встраиваемый в набор микросхем системной платы), который настроен на
соответствующую промышленным стандартам частоту регенерации, равную 15 мкс. Ко
всем строкам данных обращение осуществляется по прохождении 128 специальных
циклов регенерации. Это означает, что каждые 1,92 мс (128Ч15 мкс) прочитываются
все строки в памяти для обеспечения регенерации данных. Регенерация памяти, к
сожалению, отнимает время у процессора: каждый цикл регенерации по длительности
занимает несколько циклов центрального процессора. В старых компьютерах циклы
регенерации могли занимать до 10% (или больше) процессорного времени, но в
современных системах, работающих на частотах, равных сотням мегагерц, расходы
на регенерацию составляют 1% (или меньше) процессорного времени. Некоторые
системы позволяют изменить параметры регенерации с помощью программы установки
параметров CMOS, но увеличение времени между циклами регенерации может привести
к тому, что в некоторых ячейках памяти заряд &quot;стечет&quot;, а это вызовет
сбои памяти. В большинстве случаев надежнее придерживаться рекомендуемой или
заданной по умолчанию частоты регенерации. Поскольку затраты на регенерацию в
современных компьютерах составляют менее 1%, изменение частоты регенерации
оказывает незначительное влияние на характеристики компьютера. В устройствах
DRAM для хранения одного бита используется только один транзистор и пара
конденсаторов, поэтому они более вместительны, чем микросхемы других типов
памяти. В настоящее время имеются микросхемы динамической оперативной памяти
емкостью до 256 Мбит и больше. Это означает, что подобные микросхемы содержат
256 млн (и даже больше) транзисторов! А ведь Pentium II имеет только 7,5 млн
транзисторов. Откуда такая разница? Дело в том, что в микросхеме памяти все
транзисторы и конденсаторы размещаются последовательно, обычно в узлах
квадратной решетки, в виде очень простых, периодически повторяющихся структур,
в отличие от процессора, представляющего собой более сложную схему различных
структур, не имеющую четкой организации.</p>
<p>Транзистор для каждого
одноразрядного регистра DRAM используется для чтения состояния смежного
конденсатора. Если конденсатор заряжен, в ячейке записана 1; если заряда нет —
записан 0. Заряды в крошечных конденсаторах все время стекают, вот почему
память должна постоянно регенерироваться. Даже мгновенное прерывание подачи
питания или какой-нибудь сбой в циклах регенерации приведет к потере заряда в
ячейке DRAM, а следовательно, и к потере данных. Динамическая оперативная
память используется в персональных компьютерах; поскольку она недорогая, то
микросхемы могут быть плотно упакованы, а это означает, что запоминающее
устройство большой емкости может занимать небольшое пространство. К сожалению,
память этого типа не отличается высоким быстродействием, обычно она намного &quot;медленнее&quot;
процессора. Поэтому существует множество различных типов организации</p>
<p>DRAM, позволяющих
улучшить эту характеристику.</p>
<p>Кэш память SRAM</p>
<p>Существует тип памяти,
совершенно отличный от других, — статическая оперативная память (Static RAM —
SRAM). Она названа так потому, что, в отличие от динамической оперативной
памяти (DRAM), для сохранения ее содержимого не требуется периодической
регенерации. Но это не единственное ее преимущество. SRAM имеет более высокое
быстродействие, чем динамическая оперативная память, и может работать на той же
частоте, что и современные процессоры.</p>
<p>Время доступа SRAM не
более 2 нс; это означает, что такая память может работать синхронно с
процессорами на частоте 500 МГц или выше. Однако для хранения каждого бита в
конструкции SRAM используется кластер из шести транзисторов. Использование
транзисторов без каких-либо конденсаторов означает, что нет необходимости в
регенерации. (Ведь если нет никаких конденсаторов, то и заряды не теряются.)
Пока подается питание, SRAM будет помнить то, что сохранено. Почему же тогда
микросхемы SRAM не используются для всей системной памяти? По сравнению с
динамической оперативной памятью быстродействие SRAM намного выше, но плотность
ее намного ниже, а цена довольно высокая. Более низкая плотность означает, что
микросхемы SRAM имеют большие габариты, хотя их информационная емкость намного
меньше. Большое число транзисторов и кластеризованное их размещение не только
увеличивает габариты микросхем SRAM, но и значительно повышает стоимость технологического
процесса по сравнению с аналогичными параметрами для микросхем DRAM. Например,
емкость модуля DRAM может равняться 128 Мбайт или больше, в то время как
емкость модуля SRAM приблизительно того же размера составляет только 2 Мбайт,
причем их стоимость будет одинаковой. Таким образом, габариты SRAM в среднем в
30 раз превышают размер динамической оперативной памяти, то же самое можно
сказать и о стоимости. Все это не позволяет использовать память типа SRAM в
качестве оперативной памяти в персональных компьютерах.</p>
<p>Несмотря на это,
разработчики все-таки применяют память типа SRAM для повышения эффективности
PC. Но во избежание значительного увеличения стоимости устанавливается только
небольшой объем высокоскоростной памяти SRAM, которая используется в качестве
кэш памяти. Кэш-память работает на тактовых частотах, близких или даже равных
тактовым частотам процессора, причем обычно именно эта память непосредственно
используется процессором при чтении и записи. Во время операций чтения данные в высокоскоростную кэш-память
предварительно записываются из оперативной памяти с низким быстродействием,
т.е. из DRAM. Еще недавно время доступа динамической оперативной памяти было не
менее 60 нс (что соответствует тактовой частоте 16 МГц). Когда процессор
персонального компьютера работал на тактовой частоте 16 МГц и ниже, DRAM могла
быть синхронизирована с системной платой и процессором, поэтому кэш был не
нужен. Однако, как только тактовая частота процессора поднялась выше 16 МГц,
синхронизировать DRAM с процессором стало невозможно, и именно тогда
разработчики начали использовать SRAM в персональных компьютерах. Это произошло
в 1986 и 1987 годах, когда появились PC с процессором 386, работающим на
частотах 16 и 20 МГц. Именно в этих персональных компьютерах впервые нашла
применение так называемая кэш-память, т.е. высокоскоростной буфер, построенный
на микросхемах SRAM, который непосредственно обменивается данными с
процессором. Поскольку быстродействие кэша может быть сравнимо с
быстродействием процессора, контроллер кэша может предугадывать потребности
процессора в данных и предварительно загружать необходимые данные в
высокоскоростную кэш-память. Тогда при выдаче процессором адреса памяти данные
могут быть переданы из высокоскоростного кэша, а не из оперативной памяти,
быстродействие которой намного ниже.</p>
<p>Кэш-память позволяет
сократить количество &quot;простоев&quot; и увеличить быстродействие компьютера
в целом. Чтобы минимизировать время ожидания при считывании процессором данных
из медленной оперативной памяти, в современных персональных компьютерах обычно
предусмотрены два типа кэш-памяти: кэш-память первого уровня (L1) и кэш-память
второго уровня (L2). Кэш память первого уровня также называется встроенным, или
внутренним кэшем; он непосредственно встроен в процессор и фактически является
частью микросхемы процессора. Во всех процессорах 486 и выше кэш-память первого
уровня интегрирована в микросхему процессора. Кэш-память второго уровня
называется вторичным, или внешним кэшем; он устанавливается вне микросхемы
процессора. Первоначально она устанавливалась на системной плате. (Так было во
всех компьютерах на основе процессоров 386, 486 и Pentium.) Если кэш-память
второго уровня установлена на системной плате, то она работает на ее частоте. В
этом случае кэш-память второго уровня обычно находится рядом с разъемом
процессора.</p>
<p>Для повышения
эффективности в более поздних компьютерах на основе процессоров Pentium Pro,
Pentium II/III и Athlon кэш-память второго уровня является частью процессора.
Конечно же, он внешний по отношению к кристаллу центрального процессора, просто
эта отдельная микросхема устанавливается внутри корпуса (картриджа) процессора.
Поэтому на системных платах для процессоров Pentium Pro или Pentium II нет
никакого кэша. В последних моделях процессоров Pentium III и Athlon кэш-память
второго уровня является частью микросхемы процессора (подобно кэш-памяти
первого уровня) и работает на более высоких частотах (на частоте процессора,
половинной или трети).</p>
<p>4. Простые файловые структуры данных.
Сетевые технологии</p>
<h4>Глобальные сети, городские сети, локальные сети</h4>
<p>Сети
с коммутацией пакетов, которые разрослись до больших географических
размеров(например, континентальной части США), сильно отличаются от сетей,
имеющих небольшие размеры(например, одну комнату). Чтобы помочь
охарактеризовать различия в пропускной способности и способах использования,
технологии коммутации пакетов часто делят на три большие категории: глобальные
сети(WAN), городские сети(MAN) и локальные сети(LAN). Технологии WAN, иногда
называемые long haul networks(буквально - сети дальних перевозок), позволяют
взаимодействующим местам быть достаточно далеко друг от друга и предназначены
для использования на больших расстояниях. Обычно WAN работают на более низких
скоростях, чем другие технологии, и имеют гораздо большие паузы при соединении.
Обычно скорости WAN лежат в диапазоне от 9.6 Кбит/с до 45 Мбит/с.</p>
<p>Самый
новый вид сетевого оборудования, технологии MAN позволяют взаимодействовать в
географических областях средних размеров и работают на скоростях от средних до
высоких. Они получили такое имя из-за способности одной MAN занимать область
размером с большой город. MAN работают с меньшими паузами, чем WAN, но не могут
обеспечить взаимодействие на таких же больших расстояниях. Типичные MAN
работают со скоростями от 56 Кбит/с до 100 Мбит/с.</p>
<p>Технологии
LAN обеспечивают наивысшие скорости соединений между компьютерами, но не
позволяют им занимать большие области. Например, типичная LAN занимает
пространство, такое же как одно здание или небольшой университетский городок, и
работает со скоростями от 4 Мбит/с до 2 Гбит/с.</p>
<p>Мы
уже говорили о компромиссе между скоростью и расстоянием: технологии,
обеспечивающие более высокие скорости взаимодействия, работают на более
коротких расстояниях. Существуют и другие различия среди технологий в указанных
выше трех категориях. В технологиях LAN каждый компьютер обычно содержит
сетевое интерфейсное устройство, которое соединяет машину напрямую с сетевой
средой передачи данных(например, медным проводом или коаксиальным кабелем). Часто
сеть является пассивной, полагая, что электронные устройства в присоединенных
компьютерах сами будут генерировать и получать необходимые электрические
сигналы. В технологиях MAN сеть содержит активные коммутирующие элементы,
которые приводят к появлению коротких задержек при направлении данных к их
назначению. В технологиях WAN сеть обычно состоит из групп сложных
маршрутизаторов пакетов, соединенных линиями связи. Сеть может быть расширена
добавлением нового маршрутизатора и еще одной линии связи. Присоединить
компьютер к WAN значит соединить его с одним из маршрутизаторов пакетов. Эти
маршрутизаторы вводят значительные паузы при маршрутизации траффика. Поэтому,
чем больше становится WAN, тем больше времени ей надо для маршрутизации
траффика.</p>
<p>Целью
разработки сетевых протоколов является скрыть технологические различия между
сетями, сделав соединение независимым от используемого оборудования. Следующие
секции содержат шесть примеров сетевых технологий, используемых в Интернете,
показывая при этом различия между ними. Следующие главы показывают, как
программное обеспечение TCP/IP скрывает такие различия и делает
коммуникационную систему независимой от базовой аппаратной технологии.</p>
<h4>Технология Ethernet</h4>
<p>Ethernet
- это имя, данное популярной технологии локальной сети с коммутацией пакетов,
разработанной в Xerox PARC в начале 1970 года. Версия, описанная здесь, была стандартизована Xerox
Corporation, Intel Corporation и Digital Equipment Corporation в 1978 году. Как показано на
рисунке 2.1, Ethernet состоит из коаксиального кабеля приблизительно полдюйма в
диаметре и до 500 метров длиной. Между центральным проводом и защитной
оболочкой на каждом конце добавляется резистор для предотвращения отражения
электрических сигналов. Называемый ether(для удобства будем называть его просто
Е-кабель), этот кабель является полностью пассивным; все активные электронные
компоненты, выполняющие сетевую функцию, связаны с компьютерами,
присоединенными к сети.</p>
<p><img width="415" height="131" src="/image/88398_8_1.jpeg" alt=""></p>
<p>Рисунок
2.1 Коаксиальный кабель, иcпользуемый в Ethernet</p>
<p>Ethernet'ы
могут быть дополнены устройствами, называемыми повторителями, которые передают
электрические сигналы от одного кабеля к другому. Рисунок <a
href="../../../../500%20Русских%20учебников/Протоколы%20TCP-IP/gl2.htm#2_2#2_2">2.2</a>
показывает типичное использование повторителей в здании фирмы. Один
вертикальный магистральный кабель проложен через все этажи здания, и
повторитель соединяет дополнительные кабели на каждом этаже с магистральным
кабелем. Компьютеры присоединяются к кабелям, проложенным на каждом этаже.
Только два повторителя могут быть помещены между любыми двумя машинами, поэтому
общая длина простого Ethernetа довольно маленькая(до 1500 метров). Расширение
Ethernetа, используя повторители, имеет свои преимущества и недостатки.
Повторители менее избыточны, чем другие типы соединяющего оборудования, что
делает их самым дешевым способом расширения Ethernetа. Тем не менее,
повторители имеют два недостатка. Во-первых, так как повторители повторяют и
усиливают все электрические сигналы, то они копируют шумы, возникающие в одном
проводе, в другой провод. Во-вторых, так как они содержат активные электронные
компоненты, требующие энергии, они могут выйти из строя. В здании авария может
произойти в неудобном месте(например, между перекрытиями или в розетке), делая
трудным ее нахождение и устранение.</p>
<p><img border="0" width="266" height="163" src="/image/88398_9_1.jpeg" alt=""></p>
<p>Рисунок
2.2 Повторители, используемые для соединения кабелей Ethernetа в здании. Самое
большее два повторителя могут быть помещены между парой взаимодействующих
машин.</p>
<p>Соединения
с E-кабелем делаются с помощью ответвлений, как показывает рисунок 2.3. При
каждом ответвлении маленькая дырка во внешних слоях кабеля позволяет маленьким
контактам касаться центрального провода и защитной металлической
оболочки(некоторые производители требуют, чтобы кабель был разрезан и вставлен
Т-образный соединитель). Каждое соединение с Ethernetом имеет две основные
электрические компоненты. Трансивер присоединяется к центральному проводу и
металлической оплетке на Е-кабеле, принимая и передавая сигналы. Интерфейс с
ЭВМ соединяется с трансивером и взаимодействует с компьютером(обычно через шину
компьютера).
Трансивер
- это небольшая часть оборудования, физически смежная с Е-кабелем. Помимо
аналогового оборудования, которое принимает сигналы от Е-кабеля и управляет им,
трансивер содержит цифровые схемы, которые позволяют ему взаимодействовать с
цифровым компьютером. Трансивер может определить, когда Е-кабель используется,
и может транслировать аналоговые электрические сигналы, идущие по Е-кабелю, в
цифровую форму или из нее в аналоговую. По кабелю трансивера, находящемуся
между трансивером и интерфейсом ЭВМ, передается питание трансивера, а также
сигналы, управляющие его работой. Рисунок <a
href="../../../../500%20Русских%20учебников/Протоколы%20TCP-IP/gl2.htm#2_4#2_4">2.4</a>
показывает соединение между компьютером и трансивером. Каждый интерфейс ЭВМ управляет
работой одного трансивера согласно командам, которые он получает от
программного обеспечения компьютера. Для операционной системы интерфейс
представляется в виде устройства ввода-вывода, которое воспринимает основные
команды передачи данных от компьютера, управляет трансивером при их выполнении,
прерывается, когда задача завершается, и сообщает информацию о состоянии. В то
время как трансивер - это простое аппаратное устройство, интерфейс с ЭВМ может
быть сложным(например, он может содержать микропроцессор, используемый для
управления передачей данных между памятью компьютера и Е-кабелем).</p>
<p><img border="0" width="379" height="259" src="/image/88398_10_1.jpeg" alt=""></p>
<p>Рисунок
2.3 (а) Наглядное представление кабеля, показывающее детали двух электрических
соединений между трансивером и кабелем при ответвлении, и (b) схематическая
диаграмма Ethernetа с группой ответвлений.</p>
<br>
<h4>Свойства Ethernet'а</h4>
<p>Ethernet
- это технология общей шины со скоростью 10 Мбит/с , с механизмом
негарантированной(best effort) доставки и распределенным управлением доступом.
Она называется технологией общей шины из-за того, что все станции разделяют
один общий канал взаимодействия; она - широковещательная, так как все
трансиверы принимают информацию, передаваемую всеми станциями. Метод, используемый
для передачи пакетов от одной станции к другой или к группе станций, будет
рассмотрен позднее. На данный момент достаточно уяснить, что трансиверы не
фильтруют информацию - они передают все пакеты на интерфейс ЭВМ, который
выбирает из них нужные этой ЭВМ и отбрасывает другие пакеты. Ethernet
называется механизмом негарантированной доставки, так как он не информирует
отправителя о том, был ли доведен пакет до получателя. Например, если случилось
так, что машина получателя выключена, пакет будет потерян, но отправитель
ничего не будет знать об этом. мы увидим позднее, как протоколы TCP/IP
согласованы с оборудованием с негарантированным доведением.</p>
<p><img border="0" width="524" height="119" src="/image/88398_11_1.jpeg" alt=""></p>
<p>Рисунок
2.4 Соединение между кабелем Ethernet и компьютером</p>
<p>память
компьютер интернет сеть</p>
<p>Управление
доступом в Ethernetе распределенное, так как, в отличие от некоторого другого
сетевого оборудования, здесь нет централизованной схемы предоставления доступа.
Схема доступа Ethernetа называется множественным доступом с контролем несущей и
обнаружением коллизий(CSMA/CD). Она является CSMA, так как несколько машин
могут получить доступ к Ethernetу одновременно, и каждая машина определяет,
занят ли Е-кабель, по наличию несущей в нем. Когда интерфейс компьютера имеет
пакет, который нужно передать, он слушает Е-кабель, чтобы узнать, передается ли
уже чье-то сообщение(т.е. определяет наличие несущей). Когда передачи не
обнаружено, интерфейс компьютера начинает передачу. Каждая передача ограничена
в своей продолжительности(так как существует максимальный размер пакета). Более
того, оборудование должно делать небольшие паузы между передачами пакетов,
чтобы не получилось так, что сеть используется одной парой машин, и чтобы
другие машины тоже имели возможность доступа к сети.</p>
<h4>Обнаружение коллизий и восстановление</h4>
<p>Когда
трансивер начинает передачу, сигнал не достигает всех частей сети одновременно.
На самом деле он передается по кабелю со скоростью, составляющей примерно 80%
от скорости света. Поэтому возможна ситуация, когда два трансивера могут
определить, что сеть незанята, и одновременно начать передачу. Когда два
электрических сигнала передаются одновременно, они перемешиваются, в результате
чего оба становятся искаженными. Такие события называются коллизиями.</p>
<p>Ethernet
обрабатывает коллизии оригинальным способом. Каждый трансивер следит за
состоянием кабеля, когда он передает , чтобы узнать, когда другой сигнал
помешал его передаче. На техническом языке такое слежение называется
обнаружением коллизий и делает Ethernet сетью CSMA/CD. Когда коллизия
обнаружена, интерфейс ЭВМ аварийно завершает передачу, ждет конца работы других
станций и снова пытается повторить передачу. При этом нужно соблюдать
осторожность, иначе сеть может оказаться перегруженной трансиверами, впустую
пытающимися передавать, причем каждая передача будет приводить к коллизии.
Чтобы избежать таких ситуаций, Ethernet использует стратегию двоичной
экспоненциальной задержки, при которой отправитель ждет случайное время после
первой коллизии, в два раза дольше, если вторая попытка передать, также привела
к коллизии, в четыре раза дольше, если третья попытка привела к коллизии, и так
далее. Идея, лежащая в основе экспоненциальной задержки, заключается в том, что
при коллизии возможно, что большое число станций будет пытаться передавать
одновременно и может возникнуть большие помехи для траффика. При таких помехах
существует большая вероятность того, что две станции выберут похожие времена
задержки. Поэтому вероятность того, что возникнет новая коллизия, велика. С
помощью удвоения случайного времени задержки стратегия экспоненциальной
задержки быстро распределяет попытки повторной передачи станций на достаточно
большой промежуток времени, что делает вероятность дальнейших коллизий крайне
маленькой.</p>
<h4>Пропускная способность Ethernet'а</h4>
<p>Стандартный
Ethernet работает со скоростью 10 Мбит/с, что означает, что данные могут
передаваться по кабелю со скоростью 10 миллионов бит в секунду. Хотя многие
современные компьютеры могут генерировать данные со скоростью Ethernetа,
реальную скорость сети не следует представлять как скорость, с которой два
компьютера обмениваются данными. На самом деле скорость сети является мерой
пропускной способности общего траффика сети. Представьте сеть в виде
высокоскоростной магистрали(highway), соединяющей группу городов. Высокие
скорости при движении по магистрали означают, что она может выдержать большую
загрузку траффиком, а низкие скорости - что эта магистраль не может выдержать
большой объем траффика. Ethernet со скоростью 10 Мбит/с, например, может
выдержать несколько компьютеров, генерирующих высокоскоростной траффик или
большое число компьютеров, генерирующих медленный траффик.</p>
<h4>Вариации Ethernet'а</h4>
<p>Последние
достижения в технологии сделали возможным создание Ethernetа, который нуждается
в электрической изоляции коаксиального кабеля. Называемая Ethernet - витая
пара, эта технология позволяет обычному Ethernetу со скоростью 10 Мбит/c
передаваться по паре медных проводов, во многом похожих на те, которые
используются для соединения телефонов. Преимущество использования витой пары
состоит в том, что она дешевле и позволяет многим группам использовать
существующие кабеля вместо установки новых.</p>
<p>Когда
высокая пропускная способность не нужна, сеть может использовать
Ethernet-подобную технологию, но работать на несколько меньших скоростях.
Преимущество здесь в основном экономическое. Меньшие скорости означают более
простое оборудование и меньшую цену. Одной из причин того, что более низкие
скорости сети приводят к уменьшению ее цены, является то, интерфейсы требуют
меньше буферной памяти и могут быть созданы на основе простых(и дешевых)
интегральных микросхем.</p>
<p>Уменьшения
цены можно также добиться, если высокоскоростные цифровые микросхемы соединить
напрямую с кабелем, не используя трансивер. В этом случае Ethernet может быть
создан с помощью стандартного коаксиального кабеля, такого, который
используется для кабельного телевидения. Называемый Ethernet - тонкая пара, этот
тонкий кабель является недорогим, но поддерживает меньшее число соединений и
может работать только на более коротких расстояниях, чем стандартный
Ethernet-овский кабель.</p>
<p>Производители
рабочих станций обнаружили, что Ethernet-тонкий кабель особенно привлекателен
из-за того, что они могут интегрировать Ethernet-овское оборудование в
одноплатные компьютеры и смонтировать BNC-разъемы прямо в задней стенке машины.
Не требуя специальных средств, BNC-разъемы делают возможным для пользователей
присоединение их рабочих станций к Ethernet-у. Конечно, предоставление
пользователям возможности добавлять их машины к сетям имеет свои недостатки.
Это означает, что сеть будет чувствительной к разъединениям, неправильным
соединениям кабелей, и другим ошибкам. Но в большинстве случаев преимущества
перевешивают недостатки.</p>
<p>При
другом методе уменьшения цены используется один физический кабель для передачи
нескольких Ethernet-ов. Известная как широкополосная, эта технология работает
аналогично широковещательному радио. Передатчик объединяет несколько
Ethernet-ов в одном кабеле, назначая каждому Ethernet-у уникальную частоту.
Приемники должны быть настроены на правильную частоту , чтобы они принимали
только нужный сигнал и игнорировали остальные. Хотя оборудование, требуемое для
присоединения к широковещательному кабелю, более дорогое, чем оборудование для
соединения с обычным кабелем, при широковещании не нужно платить за прокладку
нескольких кабелей.</p>
<p>5. Проектирование LAN. Топология локальных сетей</p>
<p><a name=keyword-context.4></a>Под топологией (компоновкой, конфигурацией, структурой) компьютерной сети
обычно понимается физическое расположение компьютеров сети друг относительно
друга и способ соединения их линиями связи. Важно отметить, что понятие
топологии относится, прежде всего, к локальным сетям, в которых структуру
связей можно легко проследить. В глобальных сетях структура связей обычно
скрыта от пользователей и не слишком важна, так как каждый сеанс связи может
производиться по собственному пути. Топология
определяет требования к оборудованию, тип используемого кабеля, допустимые и
наиболее удобные методы управления обменом, надежность работы, возможности
расширения сети. И хотя выбирать топологию пользователю сети приходится
нечасто, знать об особенностях основных топологий, их достоинствах и
недостатках надо.</p>
<p>Существует три базовые
топологии сети:</p>
<p>·&nbsp;
Шина (bus) — все компьютеры параллельно
подключаются к одной линии связи. Информация от каждого компьютера одновременно
передается всем остальным компьютерам (рис. 1.5).</p>
<br>
<p><a name=image.1.5></a><img border="0" width="369" height="84" src="/image/88398_12_1.jpeg" alt="Сетевая топология шина"></p>
<p>Рис. 1.5. Сетевая топология шина</p>
<p>·&nbsp;
Звезда (star) — к одному центральному
компьютеру присоединяются остальные периферийные компьютеры, причем каждый из
них использует отдельную линию связи (<a
href="http://www.intuit.ru/department/network/baslocnet/1/3.html#image.1.6#image.1.6">рис. 1.6</a>).
Информация от периферийного компьютера передается только центральному
компьютеру, от центрального — одному или нескольким периферийным.</p>
<p><a name=image.1.6></a><img border="0" width="357" height="141" src="/image/88398_13_1.jpeg" alt="Сетевая топология звезда"></p>
<p>Рис. 1.6. Сетевая топология звезда</p>
<p>·&nbsp;
Кольцо (ring) — компьютеры последовательно
объединены в кольцо. Передача информации в кольце всегда производится только в
одном направлении. Каждый из компьютеров передает информацию только одному
компьютеру, следующему в цепочке за ним, а получает информацию только от
предыдущего в цепочке компьютера (рис. 1.7).</p>
<p><a name=image.1.7></a><img border="0" width="300" height="144" src="/image/88398_14_1.jpeg" alt="Сетевая топология кольцо"></p>
<p>Рис. 1.7. Сетевая топология кольцо</p>
<br>
<p>На практике нередко
используют и другие топологии локальных сетей, однако большинство сетей
ориентировано именно на три базовые топологии.</p>
<p>Прежде чем перейти к
анализу особенностей базовых сетевых топологий, необходимо выделить некоторые
важнейшие факторы, влияющие на физическую работоспособность сети и
непосредственно связанные с понятием топология.</p>
<p>·&nbsp;
Исправность
компьютеров (абонентов), подключенных к сети. В некоторых случаях поломка
абонента может заблокировать работу всей сети. Иногда неисправность абонента не
влияет на работу сети в целом, не мешает остальным абонентам обмениваться
информацией.</p>
<p>·&nbsp;
Исправность
сетевого оборудования, то есть технических средств, непосредственно
подключенных к сети (адаптеры, трансиверы, разъемы и т.д.). Выход из строя
сетевого оборудования одного из абонентов может сказаться на всей сети, но
может нарушить обмен только с одним абонентом.</p>
<p>·&nbsp;
Целостность
кабеля сети. При обрыве кабеля сети (например, из-за механических воздействий)
может нарушиться обмен информацией во всей сети или в одной из ее частей. Для
электрических кабелей столь же критично короткое замыкание в кабеле.</p>
<p>·&nbsp;
Ограничение длины
кабеля, связанное с затуханием распространяющегося по нему сигнала. Как
известно, в любой среде при распространении сигнал ослабляется (затухает). И
чем большее расстояние проходит сигнал, тем больше он затухает (рис. 1.8).
Необходимо следить, чтобы длина кабеля сети не была больше предельной длины Lпр,
при превышении которой затухание становится уже неприемлемым (принимающий
абонент не распознает ослабевший сигнал).</p>
<br>
<p><a name=image.1.8></a><img border="0" width="501" height="104" src="/image/88398_15_1.jpeg" alt="Затухание сигнала при распространении по сети"></p>
<p>Рис. 1.8. Затухание сигнала при
распространении по сети</p>
<h4>Топология шина</h4>
<p>Топология шина (или, как ее еще называют, общая шина)
самой своей структурой предполагает идентичность сетевого оборудования
компьютеров, а также равноправие всех абонентов по
доступу к сети. Компьютеры в шине могут передавать только по очереди, так как линия связи в данном случае единственная. Если несколько
компьютеров будут передавать информацию одновременно, она исказится в
результате наложения (конфликта, коллизии). В шине всегда реализуется режим так
называемого полудуплексного (half duplex) обмена (в
обоих направлениях, но по очереди, а не одновременно).</p>
<p>В
топологии шина отсутствует явно выраженный
центральный абонент, через который передается вся
информация, это увеличивает ее надежность (ведь при отказе центра перестает
функционировать вся управляемая им система). Добавление новых абонентов в шину довольно просто и обычно возможно даже во
время работы сети. В большинстве случаев при использовании шины требуется
минимальное количество соединительного кабеля по сравнению с другими топологиями.</p>
<p>Поскольку
центральный абонент отсутствует, разрешение
возможных конфликтов в данном случае ложится на сетевое оборудование каждого
отдельного абонента. В связи с этим сетевая
аппаратура при топологии шина сложнее, чем при
других топологиях. Тем не менее из-за широкого
распространения сетей с топологией шина (прежде
всего наиболее популярной сети Ethernet) стоимость сетевого оборудования не
слишком высока.</p>
<br>
<p><a name=image.1.9></a><img border="0" width="423" height="84" src="/image/88398_10_1.png" alt="Обрыв кабеля в сети с топологией шина"></p>
<p>Рис. 1.9. Обрыв кабеля в сети с топологией
шина</p>
<p>Важное
преимущество шины состоит в том, что при отказе любого из компьютеров сети,
исправные машины смогут нормально продолжать обмен.</p>
<p>Казалось
бы, при обрыве кабеля получаются две вполне работоспособные шины (<a
href="http://www.intuit.ru/department/network/baslocnet/1/4.html#image.1.9#image.1.9">рис. 1.9</a>).
Однако надо учитывать, что из-за особенностей распространения электрических
сигналов по длинным линиям связи необходимо
предусматривать включение на концах шины специальных согласующих устройств, терминаторов,
показанных на рис. 1.5 и <a
href="http://www.intuit.ru/department/network/baslocnet/1/4.html#image.1.9#image.1.9">1.9</a>
в виде прямоугольников. Без включения терминаторов сигнал отражается от конца линии и искажается так, что связь по сети становится
невозможной. В случае разрыва или повреждения кабеля нарушается согласование линии связи, и прекращается обмен
даже между теми компьютерами, которые остались соединенными между собой.
Подробнее о согласовании будет изложено в специальном разделе книги. Короткое
замыкание в любой точке кабеля шины выводит из строя всю сеть.</p>
<p>Отказ
сетевого оборудования любого абонента в шине может
вывести из строя всю сеть. К тому же такой отказ довольно трудно локализовать,
поскольку все абоненты включены параллельно, и
понять, какой из них вышел из строя, невозможно.</p>
<p>При
прохождении по линии связи сети с топологией шина информационные сигналы ослабляются и никак
не восстанавливаются, что накладывает жесткие ограничения на суммарную длину линий связи. Причем каждый абонент
может получать из сети сигналы разного уровня в зависимости от расстояния до
передающего абонента. Это предъявляет дополнительные
требования к приемным узлам сетевого оборудования.</p>
<p>Если
принять, что сигнал в кабеле сети ослабляется до предельно допустимого уровня
на длине Lпр, то полная длина шины не может превышать величины Lпр.
В этом смысле шина обеспечивает наименьшую длину по сравнению с другими
базовыми топологиями.</p>
<p>Для
увеличения длины сети с топологией шина часто
используют несколько сегментов (частей сети, каждый из которых представляет
собой шину), соединенных между собой с помощью специальных усилителей и
восстановителей сигналов — репитеров или повторителей (на рис. 1.10 показано
соединение двух сегментов, предельная длина сети в этом случае возрастает до 2
Lпр, так как каждый из сегментов может быть длиной Lпр).
Однако такое наращивание длины сети не может продолжаться бесконечно.
Ограничения на длину связаны с конечной скоростью распространения сигналов по линиям связи.</p>
<p><a name=image.1.10></a><img border="0" width="490" height="158" src="/image/88398_16_1.jpeg" alt="Соединение сегментов сети типа шина с помощью репитера"></p>
<p>Рис. 1.10. Соединение сегментов сети типа шина
с помощью репитера</p>
<h4>Топология звезда</h4>
<p>Звезда
— это единственная топология сети с явно выделенным
центром, к которому подключаются все остальные абоненты.
Обмен информацией идет исключительно через
центральный компьютер, на который ложится большая нагрузка, поэтому ничем
другим, кроме сети, он, как правило, заниматься не может. Понятно, что сетевое
оборудование центрального абонента должно быть
существенно более сложным, чем оборудование периферийных абонентов.
О равноправии всех абонентов (как в шине) в данном
случае говорить не приходится. Обычно центральный компьютер самый мощный,
именно на него возлагаются все функции по управлению обменом. Никакие конфликты
в сети с топологией звезда в принципе невозможны,
так как управление полностью централизовано.</p>
<p>Если
говорить об устойчивости звезды к отказам компьютеров,
то выход из строя периферийного компьютера или его сетевого оборудования никак
не отражается на функционировании оставшейся части сети, зато любой отказ
центрального компьютера делает сеть полностью неработоспособной. В связи с этим
должны приниматься специальные меры по повышению надежности центрального
компьютера и его сетевой аппаратуры.</p>
<p>Обрыв
кабеля или короткое замыкание в нем при топологии
звезда нарушает обмен только с одним компьютером, а
все остальные компьютеры могут нормально продолжать работу.</p>
<p>В
отличие от шины, в звезде на каждой линии связи
находятся только два абонента: центральный и один из
периферийных. Чаще всего для их соединения используется две линии связи, каждая из которых передает информацию в одном
направлении, то есть на каждой линии связи имеется
только один приемник и один передатчик. Это так называемая передача точка-точка.
Все это существенно упрощает сетевое оборудование по сравнению с шиной и
избавляет от необходимости применения дополнительных, внешних терминаторов.</p>
<p>Проблема
затухания сигналов в линии связи также решается в
звезде проще, чем в случае шины, ведь каждый приемник всегда получает сигнал
одного уровня. Предельная длина сети с топологией
звезда может быть вдвое больше, чем в шине (то есть 2 Lпр), так как
каждый из кабелей, соединяющий центр с периферийным абонентом,
может иметь длину Lпр.</p>
<p>Серьезный
недостаток топологии звезда состоит в жестком
ограничении количества абонентов. Обычно центральный
абонент может обслуживать не более 8—16 периферийных
абонентов. В этих пределах подключение новых абонентов довольно просто, но за ними оно просто
невозможно. В звезде допустимо подключение вместо периферийного еще одного
центрального абонента (в результате получается топология из нескольких соединенных между собой звезд).</p>
<p>Звезда,
показанная на <a
href="http://www.intuit.ru/department/network/baslocnet/1/3.html#image.1.6">рис. 1.6</a>, носит название активной или
истинной звезды. Существует также топология,
называемая пассивной звездой, которая только внешне похожа на звезду (рис. 1.11).
В настоящее время она распространена гораздо более широко, чем активная звезда.
Достаточно сказать, что она используется в наиболее популярной сегодня сети
Ethernet.</p>
<p>В
центре сети с данной топологией помещается не
компьютер, а специальное устройство — концентратор или, как его еще называют,
хаб (hub), которое выполняет ту же функцию, что и репитер, то есть
восстанавливает приходящие сигналы и пересылает их во все другие линии связи.</p>
<p><a name=image.1.11></a><img border="0" width="513" height="202" src="/image/88398_17_1.jpeg" alt="Топология пассивная звезда и ее эквивалентная схема"></p>
<p>Рис. 1.11. Топология пассивная звезда и ее
эквивалентная схема</p>
<p>Получается,
что хотя схема прокладки кабелей подобна истинной или активной звезде,
фактически речь идет о шинной топологии, так как
информация от каждого компьютера одновременно передается ко всем остальным
компьютерам, а никакого центрального абонента не
существует. Безусловно, пассивная звезда дороже обычной шины, так как в этом
случае требуется еще и концентратор. Однако она предоставляет целый ряд
дополнительных возможностей, связанных с преимуществами звезды, в частности,
упрощает обслуживание и ремонт сети. Именно поэтому в последнее время пассивная
звезда все больше вытесняет истинную шину, которая считается малоперспективной топологией.</p>
<p>Можно
выделить также промежуточный тип топологии между
активной и пассивной звездой. В этом случае концентратор не только
ретранслирует поступающие на него сигналы, но и производит управление обменом, однако сам в обмене не
участвует (так сделано в сети 100VG-AnyLAN).</p>
<p>Большое
достоинство звезды (как активной, так и пассивной) состоит в том, что все точки
подключения собраны в одном месте. Это позволяет легко контролировать работу
сети, локализовать неисправности путем простого отключения от центра тех или
иных абонентов (что невозможно, например, в случае
шинной топологии), а также ограничивать доступ
посторонних лиц к жизненно важным для сети точкам подключения. К периферийному абоненту в случае звезды может подходить как один кабель
(по которому идет передача в обоих направлениях), так и два (каждый кабель
передает в одном из двух встречных направлений), причем последнее встречается
гораздо чаще.</p>
<p>Общим
недостатком для всех топологий типа звезда (как
активной, так и пассивной) является значительно больший, чем при других топологиях, расход кабеля. Например, если компьютеры
расположены в одну линию (как на <a
href="http://www.intuit.ru/department/network/baslocnet/1/3.html#image.1.5">рис. 1.5</a>),
то при выборе топологии звезда понадобится в
несколько раз больше кабеля, чем при топологии шина.
Это существенно влияет на стоимость сети в целом и заметно усложняет прокладку
кабеля.</p>
<h4>Топология кольцо</h4>
<p>Кольцо
— это топология, в которой каждый компьютер соединен
линиями связи с двумя другими: от одного он получает
информацию, а другому передает. На каждой линии связи,
как и в случае звезды, работает только один передатчик и один приемник (связь
типа точка-точка). Это позволяет отказаться от применения внешних терминаторов.</p>
<p>Важная
особенность кольца состоит в том, что каждый компьютер ретранслирует
(восстанавливает, усиливает) приходящий к нему сигнал, то есть выступает в роли
репитера. Затухание сигнала во всем кольце не имеет никакого значения, важно
только затухание между соседними компьютерами кольца. Если предельная длина
кабеля, ограниченная затуханием, составляет Lпр, то суммарная длина
кольца может достигать NLпр, где N — количество компьютеров в
кольце. Полный размер сети в пределе будет NLпр/2, так как кольцо
придется сложить вдвое. На практике размеры кольцевых сетей достигают десятков
километров (например, в сети FDDI). Кольцо в этом отношении существенно
превосходит любые другие топологии.</p>
<p>Четко
выделенного центра при кольцевой топологии нет, все
компьютеры могут быть одинаковыми и равноправными. Однако довольно часто в
кольце выделяется специальный абонент, который
управляет обменом или контролирует его. Понятно, что
наличие такого единственного управляющего абонента
снижает надежность сети, так как выход его из строя сразу же парализует весь обмен.</p>
<p>Строго
говоря, компьютеры в кольце не являются полностью равноправными (в отличие,
например, от шинной топологии). Ведь один из них
обязательно получает информацию от компьютера, ведущего передачу в данный
момент, раньше, а другие — позже. Именно на этой особенности топологии и строятся методы управления обменом по сети, специально рассчитанные на кольцо. В
таких методах право на следующую передачу (или, как еще говорят, на захват
сети) переходит последовательно к следующему по кругу компьютеру. Подключение
новых абонентов в кольцо выполняется достаточно
просто, хотя и требует обязательной остановки работы всей сети на время
подключения. Как и в случае шины, максимальное количество абонентов
в кольце может быть довольно велико (до тысячи и больше). Кольцевая топология обычно обладает высокой устойчивостью к
перегрузкам, обеспечивает уверенную работу с большими потоками передаваемой по
сети информации, так как в ней, как правило, нет конфликтов (в отличие от
шины), а также отсутствует центральный абонент (в
отличие от звезды), который может быть перегружен большими потоками информации.</p>
<p><a name=image.1.12></a><img border="0" width="423" height="202" src="/image/88398_11_1.png" alt="Сеть с двумя кольцами"></p>
<p>Рис. 1.12. Сеть с двумя кольцами</p>
<p>Сигнал
в кольце проходит последовательно через все компьютеры сети, поэтому выход из
строя хотя бы одного из них (или же его сетевого оборудования) нарушает работу
сети в целом. Это существенный недостаток кольца.</p>
<p>Точно
так же обрыв или короткое замыкание в любом из кабелей кольца делает работу
всей сети невозможной. Из трех рассмотренных топологий
кольцо наиболее уязвимо к повреждениям кабеля, поэтому в случае топологии кольца обычно предусматривают прокладку двух
(или более) параллельных линий связи, одна из
которых находится в резерве.</p>
<p>Иногда
сеть с топологией кольцо выполняется на основе двух
параллельных кольцевых линий связи, передающих
информацию в противоположных направлениях (рис. 1.12). Цель подобного решения —
увеличение (в идеале — вдвое) скорости передачи информации по сети. К тому же
при повреждении одного из кабелей сеть может работать с другим кабелем (правда,
предельная скорость уменьшится).</p>
<h4>Другие топологии</h4>
<p>Кроме
трех рассмотренных базовых топологий нередко
применяется также сетевая топология дерево (tree),
которую можно рассматривать как комбинацию нескольких звезд. Причем, как и в
случае звезды, дерево может быть активным или истинным (<a
href="http://www.intuit.ru/department/network/baslocnet/1/6.html#image.1.13#image.1.13">рис. 1.13</a>)
и пассивным (рис. 1.14). При активном дереве в центрах объединения нескольких линий связи находятся центральные компьютеры, а при
пассивном — концентраторы (хабы).</p>
<p><a name=image.1.13></a><img border="0" width="423" height="170" src="/image/88398_12_1.png" alt="Топология активное дерево"></p>
<p>Рис. 1.13. Топология активное дерево</p>
<p><a name=image.1.14></a><img border="0" width="423" height="170" src="/image/88398_13_1.png" alt="Топология пассивное дерево. К — концентраторы"></p>
<p>Рис. 1.14. Топология пассивное дерево. К —
концентраторы</p>
<p>Довольно
часто применяются комбинированные топологии, среди
которых наиболее распространены звездно-шинная (<a
href="http://www.intuit.ru/department/network/baslocnet/1/6.html#image.1.15#image.1.15">рис. 1.15</a>) и звездно-кольцевая (рис.
1.16).</p>
<br>
<p><a name=image.1.15></a><img border="0" width="351" height="141" src="/image/88398_18_1.jpeg" alt="Пример звездно-шинной топологии"></p>
<p>Рис. 1.15. Пример звездно-шинной топологии</p>
<p><a name=image.1.16></a><img border="0" width="317" height="156" src="/image/88398_19_1.jpeg" alt="Пример звездно-кольцевой топологии"></p>
<p>Рис. 1.16. Пример звездно-кольцевой топологии</p>
<p>В
звездно-шинной (star-bus) топологии используется
комбинация шины и пассивной звезды. К концентратору подключаются как отдельные
компьютеры, так и целые шинные сегменты. На самом деле реализуется физическая топология шина, включающая все компьютеры сети. В данной топологии может использоваться и несколько концентраторов,
соединенных между собой и образующих так называемую магистральную, опорную
шину. К каждому из концентраторов при этом подключаются отдельные компьютеры
или шинные сегменты. В результате получается звездно-шинное дерево. Таким
образом, пользователь может гибко комбинировать преимущества шинной и звездной топологий, а также легко изменять количество компьютеров,
подключенных к сети. С точки зрения распространения информации данная топология равноценна классической шине.</p>
<p>В
случае звездно-кольцевой (star-ring) топологии в
кольцо объединяются не сами компьютеры, а специальные концентраторы
(изображенные на <a
href="http://www.intuit.ru/department/network/baslocnet/1/6.html#image.1.16#image.1.16">рис. 1.16</a> в виде прямоугольников), к
которым в свою очередь подключаются компьютеры с помощью звездообразных двойных
линий связи. В действительности все компьютеры сети
включаются в замкнутое кольцо, так как внутри концентраторов линии связи образуют замкнутый контур (как показано на рис.
1.16). Данная топология дает возможность
комбинировать преимущества звездной и кольцевой топологий.
Например, концентраторы позволяют собрать в одно место все точки подключения
кабелей сети. Если говорить о распространении информации, данная топология равноценна классическому кольцу.</p>
<p>В
заключение надо также сказать о сеточной топологии
(mesh), при которой компьютеры связываются между собой не одной, а многими линиями связи, образующими сетку (<a
href="http://www.intuit.ru/department/network/baslocnet/1/6.html#image.1.17#image.1.17">рис. 1.17</a>).</p>
<p><a name=image.1.17></a><img border="0" width="348" height="112" src="/image/88398_20_1.jpeg" alt="Сеточная топология: полная (а) и частичная (б)"></p>
<p>Рис. 1.17. Сеточная топология: полная (а) и
частичная (б)</p>
<p>В
полной сеточной топологии каждый компьютер напрямую
связан со всеми остальными компьютерами. В этом случае при увеличении числа
компьютеров резко возрастает количество линий связи.
Кроме того, любое изменение в конфигурации сети требует внесения изменений в
сетевую аппаратуру всех компьютеров, поэтому полная сеточная топология не получила широкого распространения.</p>
<p>Частичная
сеточная топология предполагает прямые связи только
для самых активных компьютеров, передающих максимальные объемы информации.
Остальные компьютеры соединяются через промежуточные узлы. Сеточная топология позволяет выбирать маршрут для доставки
информации от абонента к абоненту,
обходя неисправные участки. С одной стороны, это увеличивает надежность сети, с
другой же – требует существенного усложнения сетевой аппаратуры, которая должна
выбирать маршрут.</p>
<p>6. Интернет технологии.
Язык HTML. Расположение текстов в Web страницах</p>
<p>Internet - всемирная
компьютерная сеть, совокупность технических средств и программного обеспечения,
стандартов и договоренностей, позволяющих поддерживать связь между различными
компьютерными сетями в мире. Internet — это все сети, которые, взаимодействуя с
помощью протокола IP, образуют единое информационное пространство для своих
пользователей. Виды доступа к сети</p>
<p>Имеются несколько видов
доступа к услугам сети Internet:</p>
<p>-&nbsp;
Непосредственный
доступ - выделенная линия</p>
<p>-&nbsp;
Dial-Up - диалап;</p>
<p>-&nbsp;
Доступ UUCP</p>
<p>Выделенная линия дает
полный доступ ко всем услугам сети Internet. Вы арендуете выделенную телефонную
линию с выбранной вами пропускной способностью. Сервер также размещается у вас.
Недостатки такого подключения - дорого. Зато, таким образом, удобно подключать
целую сеть компьютеров.</p>
<p>Диалап позволяет получить
доступ к Internet при предъявлении логического имени (логина - LOGIcal Name). Доступ
UUCP касается компьютеров с операционной системой UNIX, которые поддерживают
сервис, называемый UUCP и позволяющий пересылать данные по стандартным
телефонным линиям.</p>
<p>Сервисы Internet</p>
<p>Под сервисами или службами
Internet обычно понимаются те виды услуг, которые оказываются пользователям,
входящим в сеть. Наиболее распространенными являются следующие виды сервисов:</p>
<p>www - сервис поиска и
просмотра гипертекстовых документов, включающих в себя графику, звук и видео.</p>
<p>Тelnet - сервис
удаленного доступа к компьютерам. Дает возможность абоненту работать на любой
ЭВМ сети Internet как на своей собственной, т.е. запускать программы, читать
файлы и т.д.</p>
<p>FTP (File
Transfer Protocol) - протокол передачи файлов. Дает возможность абоненту
обмениваться двоичными и текстовыми файлами с любым компьютером сети. Установив
связь с удаленным компьютером, пользователь может скопировать файл с удаленного
компьютера на свой или скопировать файл со своего компьютера на удаленный.
Файлы, доступные для FTP, объединены в FTP-архивы - коллекции файлов,
структурированные по каталогам и тематикам. Крупные и хорошо структурированные
FTP-архивы обеспечивают пользователей индексом - списком всех файлов, имеющихся
в этом архиве, с описаниями и названиями каталогов, где эти файлы расположены.
Такой индекс хранится в файле с названием index в корневом каталоге ftp -
архива.</p>
<p>Е-mail - сервис передачи
электронной почты - обмен почтовыми сообщениями с любым абонентом сети
Internet. Существует возможность отправки как текстовых, так и двоичных файлов.</p>
<p>NFS (Network File System)
- распределенная файловая система. Дает возможность абоненту пользоваться
файловой системой удаленного компьютера, как своей собственной.</p>
<p>Кроме вышеперечисленных
основных услуг, сеть Internet предоставляет также следующие специфические услуги:</p>
<p>Whois - адресная книга
сети Internet. По запросу абонент может получить информацию о принадлежности
удаленного компьютера, о пользователях.</p>
<p>Finger - получение
информации о пользователях удаленного компьютера.</p>
<p>Webster - сетевая версия
толкового словаря английского языка.</p>
<p>Факс-сервис - дает
возможность пользователю отправлять сообщения по факсимильной связи, пользуясь
факс - сервером сети.</p>
<p>Электронный переводчик -
производит перевод присланного на него текста с одного языка на другой.
Обращение к электронным переводчикам происходит посредством электронной почты.</p>
<p>Шлюзы - дают возможность
абоненту отправлять сообщения в сети, не работающие с протоколами TCP/IP -
Fido, Goldnet, АТ50.</p>
<p>Средство
просмотра - это программа для просмотра страниц Web.</p>
<p>Начальная страница -
самая первая страница, которая появляется на экране компьютера, когда он
подключается к определенному серверу WWW.</p>
<p>URL (Universal Resource
Locator) - это адрес в Internet, который указывет на конкретную Web-страницу
или какой-либо другой ресурс. Примером URL может служить -
http://www.altavista.com/</p>
<p>Гиперссылка - это
некоторый фрагмент (объект) страницы WWW который является указателем на другой
ресурс Internet, выбрав который можно перейти к этому ресурсу Internet. Если в
некотором месте Web-страницы указатель мыши принимает форму указывающего
пальца, значит в этом месте находится гиперссылка.</p>
<p>HTTP (Hypertext Transfer
Protocol) - Протокол передачи данных, при помощи которого по сети Internet пересылаются
документы HTML.</p>
<p>Создание
документов в стандарте HTML</p>
<p>HTML –
введение</p>
<p>HyperText Markup Language
(HTML) является стандартным языком, предназначенным для создания гипертекстовых
документов в среде WEB. HTML-документы могут просматриваться различными типами
WEB-браузеров. Когда документ создан с использованием HTML, WEB-браузер может
интерпретировать HTML для выделения различных элементов документа и первичной
их обработки. Использование HTML позволяет форматировать документы для их
представления с использованием шрифтов, линий и других графических элементов на
любой системе, их просматривающей.</p>
<p>Большинство документов
имеют стандартные элементы, такие, как заголовок, параграфы или списки.
Используя, тэги HTML вы можете, обозначать данные элементы, обеспечивая
WEB-браузеры минимальной информацией для отображения данных элементов, сохраняя
в целом общую структуру и информационную полноту документов. Все что
необходимо, чтобы прочитать HTML-документ - это WEB-браузер, который
интерпретирует тэги HTML и воспроизводит на экране документ в виде, который ему
придает автор.</p>
<p>В большинстве случаев
автор документа строго определяет внешний вид документа. В случае HTML читатель
(основываясь, на возможностях WEB-браузера может, в определенной степени,
управлять внешним видом документа (но не его содержимым)). HTML позволяет
отметить, где в документе должен быть заголовок или абзац при помощи тэга HTML,
а затем предоставляет WEB-браузеру интерпретировать эти тэги. Например, один
WEB-браузер может распознавать тэг начала абзаца и представлять документ в
нужном виде, а другой не имеет такой возможности и представляет документ в одну
строку. Пользователи некоторых WEB-браузеров имеют, также, возможность
настраивать размер и вид шрифта, цвет и другие параметры, влияющие на
отображение документа.</p>
<p>HTML-тэги могут быть
условно разделены на две категории:</p>
<p>·&nbsp;
тэги,
определяющие, как будет отображаться WEB-браузером тело документа в целом</p>
<p>·&nbsp;
тэги, описывающие
общие свойства документа, такие как заголовок или автор документа</p>
<p>Запомните, что основное
преимущество HTML заключается в том, что ваш документ может быть просмотрен на
WEB-браузерах различных типов и на различных платформах.</p>
<h2>Основные положения</h2>
<p>Все
тэги HTML начинаются с &quot;&lt;&quot; (левой угловой скобки) и заканчиваются
символом &quot;&gt;&quot; (правой угловой скобки). Как правило, существует
стартовый тэг и завершающий тэг. Для примера приведем тэги заголовка,
определяющие текст, находящийся внутри стартового и завершающего тэга и
описывающий заголовок документа:</p>
<p>&nbsp;<p>&lt;TITLE&gt; Заголовок документа &lt;/TITLE&gt;
<p>Завершающий
тэг выглядит также, как стартовый, и отличается от него прямым слэшем перед
текстом внутри угловых скобок. В данном примере тэг &lt;TITLE&gt; говорит
WEB-браузеру об использовании формата заголовка, а тэг &lt;/TITLE&gt; - о
завершении текста заголовка.</p>
<p>Некоторые
тэги, такие, как &lt;P&gt; (тэг, определяющий абзац), не требуют завершающего
тэга, но его использование придает исходному тексту документа улучшенную
читаемость и структурируемость.</p>
<p>HTML
не реагирует на регистр символов, описывающих тэг, и приведенный ранее пример
может выглядеть следующим образом:</p>
<p>&nbsp;<p>&lt;title&gt; Заголовок документа &lt;/title&gt;
<p>Внимание! Дополнительные
пробелы, символы табуляции и возврата каретки, добавленные в исходный текст
HTML-документа для его лучшей читаемости, будут проигнорированы WEB-браузером
при интерпретации документа. HTML-документ может включать вышеописанные
элементы только если они помещены внутрь тэгов &lt;PRE&gt; и &lt;/PRE&gt;.
Более подробно о тэгах &lt;PRE&gt; будет написано ниже.</p>
<p>Структура документа</p>
<p>Когда WEB-браузер
получает документ, он определяет, как документ должен быть интерпретирован.
Самый первый тэг, который встречается в документе, должен быть тэгом
&lt;HTML&gt;. Данный тэг сообщает WEB-браузеру, что ваш документ написан с
использованием HTML. Минимальный HTML-документ будет выглядеть так:</p>
<p>&lt;HTML&gt; ...тело
документа... &lt;/HTML&gt;</p>
<p>Заголовочная часть
документа &lt;HEAD&gt;</p>
<p>Тэг заголовочной части
документа должен быть использован сразу после тэга &lt;HTML&gt; и более нигде в
теле документа. Данный тэг представляет собой общее описание документа. Избегайте
размещать какой-либо текст внутри тэга &lt;HEAD&gt;. Стартовый тэг &lt;HEAD&gt;
помещается непосредственно перед тэгом &lt;TITLE&gt; и другими тэгами,
описывающими документ, а завершающий тэг &lt;/HEAD&gt; размещается сразу после
окончания описания документа. Например:</p>
<p>&lt;HTML&gt;</p>
<p>&lt;HEAD&gt;</p>
<p>&lt;TITLE&gt; Список
сотрудников &lt;/TITLE&gt;</p>
<p>&lt;/HEAD&gt;</p>
<p>Внимание! Технически, стартовые и завершающие
тэги типа &lt;HTML&gt;, &lt;HEAD&gt; и &lt;BODY&gt; необязательны. Но
настоятельно рекомендуется их использовать, поскольку использование данных
тэгов позволяет WEB-браузеру уверенно разделить заголовочную часть документа и
непосредственно смысловую часть.</p>
<p>Заголовок документа
&lt;TITLE&gt;</p>
<p>Большинство WEB-браузеров
отображают содержимое тэга &lt;TITLE&gt; в заголовке окна, содержащего документ
и в файле закладок, если он поддерживается WEB-браузером. Заголовок,
ограниченный тэгами &lt;TITLE&gt; и &lt;/TITLE&gt;, размещается внутри
&lt;HEAD&gt;-тэгов, как показано выше на примере. Заголовок документа не
появляется при отображении самого документа в окне.</p>
<p>Комментарии</p>
<p>Как любой язык, HTML
позволяет вставлять в тело документа комментарии, которые сохраняются при
передаче документа по сети, но не отображаются браузером. Синтаксис
комментария:</p>
<p>&lt;!-- Это комментарий
--&gt;</p>
<p>Комментарии могут
встречаться в документе где угодно и в любом количестве.</p>
<h2>Тэги тела документа</h2>
<p>Тэги
тела документа идентифицируют отображаемые в окне компоненты HTML-документа.
Тело документа может содержать ссылки на другие документы, текст и другую
форматированную информацию.</p>
<p>Тело
документа &lt;BODY&gt;</p>
<p>Тело
документа должно находиться между тэгами &lt;BODY&gt; и &lt;/BODY&gt;. Это та
часть документа, которая отображается как текстовая и графическая (смысловая)
информация вашего документа.</p>
<p>Уровни
заголовков &lt;Hx&gt;</p>
<p>Когда
пишется HTML-документ, текст структурно делится на просто текст, заголовки
частей текста, заголовки более высокого уровня и т.д. Первый уровень заголовков
(самый большой) обозначается цифрой 1, следующий - 2, и т.д. Большинство
браузеров поддерживает интерпретацию шести уровней заголовков, определяя
каждому из них собственный стиль. Заголовки выше шестого уровня не являются
стандартом и могут не поддерживаться браузером. Заголовок самого верхнего
уровня имеет признак &quot;1&quot;. Синтакс заголовка уровня 1 следующий:</p>
<br>
<p>&lt;H1&gt; Заголовок первого уровня &lt;/H1&gt;
<p>Заголовки
другого уровня могут быть представлены в общем случае так:</p>
<p>&nbsp;<p>&lt;Hx&gt; Заголовок x-го уровня &lt;/Hx&gt;
<p>где
x - цифра от 1 до 6, определяющая уровень заголовка.</p>
<p>Тэг
абзаца &lt;P&gt;</p>
<p>В
отличии от большинства текстовых процессоров, в HTML-документе обычно
игнорируются символы возврата каретки. Физический разрыв абзаца может
находиться в любом месте исходного текста документа (для удобства его
читаемости). Однако браузер разделяет абзацы только при наличии тэга &lt;P&gt;.
Если вы не разделите абзацы тэгом &lt;P&gt;, ваш документ будет выглядеть как
один большой абзац.</p>
<p>Дополнительные
параметры тэга &lt;P&gt;:</p>
<p>&nbsp;</p>
<p>&lt;P ALIGN=left|center|right&gt;</p>
<p>позволяют
выравнивать абзац по левому краю, центру и правому краю соответственно.</p>
<p>Центрирование
элементов документа</p>
<p>Вы
можете центрировать все элементы документа в окне браузера. Для этого можно
использовать тэг &lt;CENTER&gt;.</p>
<p>Все
элементы между тэгами &lt;CENTER&gt;
и &lt;/CENTER&gt; будут находиться в центре окна</p>
<p><a name=PreTag></a>Тэг преформатирования &lt;PRE&gt;</p>
<p>Тэг
преформатирования, &lt;PRE&gt;, позволяет представлять текст со специфическим
форматированием на экране. Предварительно сформатированный текст заканчивается
завершающим тэгом &lt;/PRE&gt;. Внутри предварительно сформатированного текста
разрешается использовать:</p>
<p>·&nbsp;
перевод строки</p>
<p>·&nbsp;
символы табуляции
(сдвиг на 8 символов вправо)</p>
<p>·&nbsp;
непропорциональный
шрифт, устанавливаемый браузером</p>
<p>Использование
тэгов, определяющих формат абзаца, таких как &lt;Hx&gt; или &lt;ADDRESS&gt;,
будет игнорироваться браузером при помещении их между тэгами &lt;PRE&gt; и
&lt;/PRE&gt;.</p>
<p>Далее
идет несколько более подробный пример, собранный из предыдущих:</p>
<p>&nbsp;<p>&lt;HTML&gt;<p>&lt;HEAD&gt;<p>&lt;TITLE&gt; Список сотрудников &lt;/TITLE&gt;<p>&lt;/HEAD&gt;<p>&lt;BODY&gt;<p>&lt;H2&gt; Список сотрудников нашей фирмы &lt;/H2&gt;<p>&lt;H3&gt; Составлено: 30 июля 1996 года &lt;/H3&gt;<p>&nbsp;<p>Данный список содержит фамилии, имена и отчества<p>всех сотрудников нашей компании. &lt;P&gt;<p>Список может быть использован только в служебных целях.<p>&nbsp;<p>&lt;P&gt;<p>&lt;/BODY&gt;<p>&lt;/HTML&gt;
<p>Вот,
что вы увидите на экране браузера:</p>
<br>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
<h2>Список сотрудников фирмы</h2>
<h3>Составлено: 30 июля 2004 года</h3>
<p>Данный список
содержит фамилии, имена и отчества всех сотрудников нашей компании.</p>
<p>Список может быть
использован только в служебных целях. </p>
</td>
</tr>
</table>
<p>Внимание! Заголовок
&quot;Список сотрудников&quot; не отображен браузером как часть документа. Он
появится в заголовке окна браузера.</p>
<p>Разрыв
строки &lt;BR&gt;</p>
<p>Тэг
&lt;BR&gt; извещает браузер о разрыве строки. Наилучший пример использования
данного тэга - форматированный адрес или любая другая последовательность строк,
где браузер должен отображать их одну под другой. Например:</p>
<p>Алексей Ярцев
&lt;BR&gt;</p>
<p>Дмитровское шоссе,
&lt;BR&gt;</p>
<p>д.9Б, офис 326
&lt;BR&gt;</p>
<p>Дополнительный
параметр позволяет расширить возможности тэга &lt;BR&gt;.</p>
<p>&nbsp;</p>
<p>&lt;BR CLEAR=left|right|all
&gt;</p>
<p>Данный
параметр позволяет выполнить не просто перевод строки, а разместить следующую
строку, начиная с чистой левой (left), правой (right) или обоих (all) границ
окна браузера. Например, если рядом с текстом слева встречается рисунок, то
можно использовать тэг &lt;BR&gt; для смещения текста ниже рисунка:</p>
<p>&lt;p&gt; Как вы можете
видеть, данная схема демонстрирует связь&lt;BR CLEAR=left&gt;</p>
<p>&lt;img
src=&quot;http://www.softexpress.com/images/schema1.gif&quot;
align=baseline&gt;</p>
<p>Мастер/Деталь
&lt;/p&gt;</p>
<p>Неразрывная
строка &lt;NOBR&gt;</p>
<p>Если
вы не хотите, чтобы браузер автоматически переносил строку, то вы можете
обозначить ее тэгами &lt;NOBR&gt; и &lt;/NOBR&gt;. В этом случае браузер не
будет переносить строку даже если она выходит за нраницы экрана; вместо этого
браузер позволит горизонтально прокручивать окно. Например:</p>
<p>&lt;NOBR&gt; Данная
строка является самой длинной строкой документа, которая не допускает
какого-либо разбиения где бы то ни было &lt;/NOBR&gt;</p>
<p>Если
же вы хотите все же позволить разбиение данной строки на две, но в строго
запланированном месте, то вставьте тэг &lt;WBR&gt; в это место. Например:</p>
<p>&lt;NOBR&gt; Данная
строка является самой длинной строкой документа,&lt;WBR&gt; которая не
допускает какого-либо разбиения где бы то ни было &lt;/NOBR&gt;</p>
<p>Данная строка является самой длинной строкой документа, которая не допускает какого-либо разбиения, где бы то ни было.
<p>Список базовых тэгов HTML</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td  valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Стартовый</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Завершающий</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Описание</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;HTML&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/HTML&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Обозначение HTML-документа</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;HEAD&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/HEAD&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовочная часть документа</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;TITLE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/TITLE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок документа</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;BODY&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/BODY&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Тело документа</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H1&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H1&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца первого уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H2&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H2&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца второго уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H3&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H3&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца третьего уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H4&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H4&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца четвертого уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H5&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H5&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца пятого уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;H6&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/H6&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Заголовок абзаца шестого уровня</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;P&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/P&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Абзац</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;PRE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/PRE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Форматированный текст</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;BR&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'> </td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Перевод строки без конца абзаца</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&lt;BLOCKQUOTE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;/BLOCKQUOTE&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Цитата</td>
</tr>
</table>
<p>Описанные ранее тэги -
это все, что необходимо вам для того, чтобы начать работать с HTML.</p>
<p>С использованием
описанных тэгов вы можете создать простой HTML-документ. Однако, следующие
разделы позволят вам существенно улучшить внешний вид ваших документов и опишут
новые возможности HTML.</p>
<h2>Тэги списков</h2>
<p>Существует
три основных вида списков в HTML-документе:</p>
<p>·&nbsp;
пронуменрованный</p>
<p>·&nbsp;
непронуменрованный</p>
<p>·&nbsp;
список описаний</p>
<p>Вы
можете создавать вложенные списки, используя различные тэги списков или
повторяя одни внутри других. Для этого просто необходимо разместить одну пару
тэгов (стартовый и завершающий) внутри другой. Будут ли элементы вложенного
списка иметь те же маркеры, обозначающие элемент списка - зависит от браузера.
Более подробно смотри в разделе &quot;Вложенные списки&quot;.</p>
<p>Пронумерованные
списки</p>
<p>В
пронумерованном списке браузер автоматически вставляет номера элементов по
порядку. Это означает, что если вы удалите один или несколько элементов
пронумерованного списка, то остальные номера автоматически будут пересчитаны.</p>
<p>Пронумерованный
список начинается стартовым тэгом &lt;OL&gt; и завершается тэгом &lt;/OL&gt;.
Каждый элемент списка начинается с тэга &lt;LI&gt;. Например:</p>
<p>&lt;OL&gt;</p>
<p>&lt;LI&gt;
Программирование</p>
<p>&lt;LI&gt;
Алгоритмизация</p>
<p>&lt;LI&gt;
Проектирование</p>
<p>&lt;/OL&gt;</p>
<p>1.&nbsp;
Программирование</p>
<p>2.&nbsp;
Алгоритмизация</p>
<p>3.&nbsp;
Проектирование</p>
<p>Тэг
&lt;OL&gt; может иметь параметры:</p>
<p>&lt;OL TYPE=A|a|I|i|1
START=n&gt;</p>
<p>где:</p>
<p>TYPE</p>
<p>Вид
счетчика:</p>
<p>o&nbsp;
A - большие
латинские буквы (A,B,C...)</p>
<p>o&nbsp;
a - маленькие
латинские буквы (a,b,c...)</p>
<p>o&nbsp;
I - большие
римские цифры (I,II,III...)</p>
<p>o&nbsp;
i - маленькие
римские цифры (i,ii,iii...)</p>
<p>o&nbsp;
1 - обычные цифры
(1,2,3...)</p>
<p>START=n</p>
<p>Число,
с которого начинается отсчет</p>
<p>Например:</p>
<p>&lt;OL TYPE=I
START=15&gt;</p>
<p>&lt;LI&gt;
Программирование</p>
<p>&lt;LI&gt;
Алгоритмизация</p>
<p>&lt;LI&gt;
Проектирование</p>
<p>&lt;/OL&gt;</p>
<p>&nbsp; XV.&nbsp; Программирование</p>
<p>&nbsp; XVI.&nbsp; Алгоритмизация</p>
<p> XVII.&nbsp;
Проектирование</p>
<p>Непронумерованные
списки</p>
<p>Для
непронумерованных списков браузер обычно использует маркеры для пометки
элемента списка. Вид маркера, как правило, настраивает пользователь браузера.</p>
<p>Пронумерованный
список начинается стартовым тэгом &lt;UL&gt; и завершается тэгом &lt;/UL&gt;.
Каждый элемент списка начинается с тэга &lt;LI&gt;. Например:</p>
<p>&lt;UL&gt;</p>
<p>&lt;LI&gt;
Программирование</p>
<p>&lt;LI&gt;
Алгоритмизация</p>
<p>&lt;LI&gt;
Проектирование</p>
<p>&lt;/UL&gt;</p>
<p>·&nbsp;
Программирование</p>
<p>·&nbsp;
Алгоритмизация</p>
<p>·&nbsp;
Проектирование</p>
<p>Тэг
&lt;UL&gt; может иметь параметр:</p>
<p>&lt;UL TYPE=disc|circle|square&gt;</p>
<p>Тип
тэга &lt;UL&gt; определяет внешний вид маркера как вид по умолчанию (disc),
круглый (circle) или квадратный (square). Например:</p>
<p>&lt;UL TYPE=square&gt;</p>
<p>&lt;LI&gt;
Программирование</p>
<p>&lt;LI&gt;
Алгоритмизация</p>
<p>&lt;LI&gt;
Проектирование</p>
<p>&lt;/UL&gt;</p>
<p>- &nbsp;
Программирование</p>
<p>- &nbsp;
Алгоритмизация</p>
<p>- &nbsp;
Проектирование</p>
<p>Вложенные
списки.
Дадим
пример вложенных списков:</p>
<p>&lt;HTML&gt;</p>
<p>&lt;HEAD&gt;</p>
<p>&lt;TITLE&gt; Список сотрудников
&lt;/TITLE&gt;</p>
<p>&lt;/HEAD&gt;</p>
<p>&lt;BODY&gt;</p>
<p>&lt;H2&gt; Список
сотрудников нашей фирмы &lt;/H2&gt;</p>
<p>&lt;H3&gt; Составлено:
30 июля 2004 года &lt;/H3&gt;</p>
<p>&nbsp;</p>
<p>Данный список содержит
фамилии, имена и отчества всех сотрудников нашей компании.Список может быть
использован только в служебных целях.</p>
<p>&nbsp;</p>
<p>&lt;P&gt;</p>
<p>&lt;OL&gt;</p>
<p>&lt;LI&gt; Дирекция</p>
<p>&lt;UL&gt;</p>
<p>&lt;LI&gt; Иванов И.И.</p>
<p>&lt;LI&gt; Петров К.В.</p>
<p>&lt;/UL&gt;</p>
<p>&lt;LI&gt; Отдел
маркетинга</p>
<p>&lt;UL&gt;</p>
<p>&lt;LI&gt; Борисов Е.Л.</p>
<p>&lt;LI&gt; Самсонов
Д.М.</p>
<p>&lt;/UL&gt;</p>
<p>&lt;/OL&gt;</p>
<p>&lt;/BODY&gt;</p>
<p>&lt;/HTML&gt;</p>
<br>
<p>Вот,
что вы увидите на экране браузера:</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
<h2>Список сотрудников нашей фирмы</h2>
<h3>Составлено: 30 июля 2004 года</h3>
<p>Данный список
содержит фамилии, имена и отчества всех сотрудников нашей компании.</p>
<p>Список может быть
использован только в служебных целях.</p>
<p>1.&nbsp;
Дирекция</p>
<p>o&nbsp;
Иванов И.И.</p>
<p>o&nbsp;
Петров К.В.</p>
<p>2.&nbsp;
Отдел
маркетинга</p>
<p>o&nbsp;
Варшавская Е.Л.</p>
<p>o&nbsp;
Самсонов Д.М.</p>
</td>
</tr>
</table>
<h3>Элемент
списка &lt;LI&gt;</h3>
<p>Тэг
&lt;LI&gt; может иметь параметры:</p>
<p>&nbsp;</p>
<p>&lt;OL TYPE=disc|circle|squade&gt;
или &lt;OL TYPE=A|a|I|i|1 VALUE=n&gt;</p>
<p>в
зависимости от того, в списке какого вида находится данный элемент.</p>
<p>TYPE</p>
<p>Вид
маркера (см. &lt;UL&gt;) или счетчика (см.OL)</p>
<p>VALUE=n</p>
<p>Значение
для элемента пронумерованного списка (его номер). Все дальнейшие номера
элементов списка будут отсчитываться от этого номера.</p>
<p>Например:</p>
<p>&lt;OL TYPE=I
START=15&gt;</p>
<p>&lt;LI&gt;
Программирование</p>
<p>&lt;LI TYPE=i VALUE=25&gt;
Алгоритмизация</p>
<p>&lt;LI&gt;
Проектирование</p>
<p>&lt;/OL&gt;</p>
<br>
<p>&nbsp; XV. Программирование</p>
<p>&nbsp; XVI. Алгоритмизация</p>
<p> XVII.
Проектирование</p>
<p>Список
определений</p>
<p>Список
определений начинается с тэга &lt;DL&gt; и завершается тэгом &lt;/DL&gt;.
Данный список служит для создание списков типа
&quot;термин&quot;-&quot;описание&quot;. Каждый термин начинается тэгом
&lt;DT&gt; , а описание - тэгом &lt;DD&gt;. Например:</p>
<p>&nbsp;</p>
<p>&lt;DL&gt;</p>
<p>&lt;DT&gt; &lt;B&gt;
Отдел маркетинга &lt;/B&gt;</p>
<p>&lt;DD&gt; Данный отдел
занимается продвижением продуктов и услуг</p>
<p>&lt;DT&gt; &lt;B&gt;
Финансовый отдел &lt;/B&gt;</p>
<p>&lt;DD&gt; Данный отдел
занимается всеми финансовыми операциями</p>
<p>&lt;DT&gt; &lt;B&gt;
Отдел кадров &lt;/B&gt;</p>
<p>&lt;DD&gt; Данный отдел
занимается учетом и набором новых сотрудников фирмы, распределением отпусков,
отслеживанием больничных листов и т.д.</p>
<p>&lt;/DL&gt;</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td width=593 valign=top style='width:444.85pt;border:solid black 1.0pt;
padding:0cm 5.4pt 0cm 5.4pt'>
<p>Отдел маркетинга</p>
<p>Данный отдел занимается продвижением продуктов и услуг</p>
<p>Финансовый отдел</p>
<p>Данный отдел занимается всеми финансовыми операциями</p>
<p>Отдел кадров</p>
<p>Данный отдел занимается учетом и набором новых сотрудников
фирмы, распределением отпусков, отслеживанием больничных листов и т.д.</p>
</td>
</tr>
</table>
<p>Гипертекстовые ссылки</p>
<p>Гипертекстовые ссылки являются ключевым компонентом,
делающим WEB привлекательным для пользователей. Добавляя гипертекстовые ссылки
(далее - ссылки), вы делаете набор документов связанным и структурированным,
что позволяет пользователю получать необходимую ему информацию максимально
быстро и удобно.</p>
<p>Ссылки имеют стандартный
формат, что позволяет браузеру интерпретировать их и выполнять необходимые
функции (вызывать методы) в зависимости от типа ссылки. Ссылки могут указывать
на другой документ, специальное место данного документа или выполнять другие
функции, например запрашивать файл по FTP-протоколу для отображения его
браузером. URL может указывать на специальное место по абсолютному пути
доступа, или указывать на документ в текущем пути доступа, что часто
используется при организации больших структурированных WEB-сайтов.</p>
<p>Внимание! Вы можете использовать ссылки как для
перемещения по документу, так и для перемещения от одного документа к другому.
Однако, HTML не поддерживает возврат на предыдущую ссылку, если перемещение
происходило внутри документа. Если вы используете ссылки внутри документа, а
затем нажимаете на клавишу Back, то вы не перейдете на предыдущую ссылку, а
вернетесь на ту часть документа, которую вы просматривали до этого.</p>
<p>URL</p>
<p>HTML использует URL
(Uniform Resource Locator) для представления гипертекстовых ссылок и ссылок на
сетевые сервисы внутри HTML-документа. Первая часть URL (до двоеточия)
описывает метод доступа или сетевой сервис. Другая часть URL (после двоеточия)
интерпретируется в зависимости от метода доступа. Обычно, два прямых слэша
после двоеточия обозначают имя машины:</p>
<p>method://machine-name/path/foo.php</p>
<p>Следующий пример
представляет собой вызов HTML-документа index.php с сервера www.softexpress.com
с использованием HTTP протокола:</p>
<br>
<p>http://www.softexpress.com/index.php</p>
<p>Uniform
Resource Locator имеет следующий формат:</p>
<p>method://servername:port/pathname#anchor</p>
<p>Опишем каждый
из компонентов URL:</p>
<p>METHOD</p>
<p>Имя операции, которая
будет выполняться при интерпретации данного URL. Наиболее часто используемые
методы:</p>
<p>file: чтение файла с локального диска. Имя
файла интерпретируется для локальной машины пользователя. Данный метод
используется для отображения какого-либо файла, находящегося на машине
пользователя. Например:</p>
<p>file:/home/alex/index.php
- отобажает файл index.php из каталога /home/alex на пользовательской машине</p>
<p>http: доступ к WEB-странице в сети с
использованием HTTP-протокола. (Это наиболее часто используемый метод доступа к
какому-либо HTML-документу в сети). Например:</p>
<p>http://www.softexpress.com/
- доступ к Home-странице компании SoftExpress</p>
<p>ftp: запрос файла с анонимного
FTP-сервера. Например:</p>
<p>ftp://hostname/directory/filename</p>
<p>mailto: активизирует почтовую сессию с указанным пользователем и
хостом. Например:</p>
<p>mailto:info@softexpress.com
- активизирует сессию посылки сообщения пользователю info на машине
softexpress.com, если браузер поддерживает запуск электронной почты. Заметьте,
что метод mailto: не требует указание слэшей после двоеточия (как правило,
после двоеточия сразу идет электронный адрес абонента)</p>
<p>telnet: обращение к службе telnet</p>
<p>news: вызов службы новостей, если браузер
ее поддерживает. Например:</p>
<p>news:relcom.www.support</p>
<p>SERVERNAME</p>
<p>Необязательный параметр,
описывающий полное сетевое имя машины. Например:</p>
<p>www.softexpress.com -
полное сетевое имя сервера фирмы СофтСервис.</p>
<p>Если имя сервера не
указано, то ссылка считается локальной, и полный путь, указанный далее в URL
вычисляется на той машине, с которой взят HTML-документ, содержащий данную
ссылку. Вместо символьного имени машины может быть использован IP-адрес, однако
это не рекомендуется из-за возможного пересечения с фиксированными локальными
адресами внутренней сети.</p>
<p>PORT</p>
<p>Номер порта TCP на
котором функционирует WEB-сервер. Если порт не указан, то &quot;по
умолчанию&quot; используется порт 80. Данный параметр (port) не используется в
подавляющем большинстве URL.</p>
<p>PATHNAME</p>
<p>Частичный или полный путь
к документу, который должен вызваться в результате интерпретации URL. Различные
WEB-сервера сконфигурированы по разному для интерпретации пути доступа к
документу. Например, при использовании CGI скриптов (исполняемых программ), они
обычно собираются в одном или нескольких выделенных каталогах, путь к которым
записан в специальных параметрах WEB-сервера. Для данных каталогов WEB-сервером
выделяется специальный логический путь, который и используется в URL. Если
WEB-сервер видит данный путь, то запрашиваемый файл интерпретируется как
исполняемый модуль. В противном случае, запрашиваемый файл интерпретируется
просто как файл данных, даже если он является исполняемым модулем. Например:</p>
<p>http://www.softexpress.com/cgi-win/handle.exe</p>
<p>В данном примере
HTTP-сервер должен вызвать CGI-скрипт с именем handle.exe, который находится на
машине с сетевым именем www.softexpress.com. Путь к данному скрипту - /cgi-win/
- в действительности является виртуальным путем (выделенным сервером для
исполняемых модулей). Заметьте, что при описании пути используется
UNIX-подобный синтаксис, где, в отличии от DOS и Windows используются прямые
слэши вместо обратных. Если после сетевого имени машины сразу идет имя
документа, то он должен находиться в корневом каталоге на удаленной машине или
(что чаще) в каталоге, выделенном WEB-сервером в качестве корневого. Если же
URL закагчивается сетевым именем машины, то в качестве документа запрашивается
документ из корневого каталога удаленной машины с именем, установленным в
настройках WEB-сервера (как правило, это index.php).</p>
<p>#ANCHOR</p>
<p>Данный элемент является
ссылкой на строку (точку) внутри HTML-документа. Большинство браузеров,
встречая после имени документа данный элемент, размещают документ на экране
таким образом, что указанная строка документа помещается в верхнюю строку
рабочего окна браузера. Точки, на которые ссылается #anchor, указываются в
документе при помощи тэга NAME, как это будет описано далее.</p>
<p>7. Выбор структур Web – страниц</p>
<p>Структура ссылок в
HTML-документе</p>
<p>Пока что мы рассмотрели
только внешний вид URL. Для того, чтобы браузер отобразил ссылку на URL,
необходимо отчетить URL специальными тэгами в HTML-документе. Синтаксис HTML,
позволяющий жто сделать - следующий:</p>
<p>&lt;A HREF=&quot;URL&quot;&gt;
текст-который-будет-подсвечен-как-ссылка &lt;/A&gt;</p>
<p>Тэг &lt;A HREF=&quot;URL&quot;&gt;открывает
описание ссылки, а тэг &lt;/A&gt; - закрывает его. Любой текст, находящийся
между данными двумя тэгами подсвечивается специальным образом Web-браузером.
Обычно этот текст отображается подчеркнутым и выделенным синим (или другим
заданным пользователем) цветом. Текст, обозначающий URL, не отображается
браузером, а используется только для выполнения предписанных им действий при
активизации ссылки (обычно при щелчке мыши на подсвеченном или подчеркнутом
тексте).</p>
<p>Ссылки на точки внутри
документа</p>
<p>Вы можете делать ссылки
на различные участки или разделы одного и того же документа, используя
специальных скрытый маркер для этих разделов. Это позволяет быстро переходить
от раздела к разделу внутри документа, не используя скроллирование экрана. Как
только вы щелкнете на ссылке, браузер переместит вас на указанный раздел
документа, а строка, в которой стоит маркер данного раздела (обычно, первая
строка раздела или заголовок раздела) будет размещена на первой строке окна
браузера (если данная строка не присутствует уже на экране браузера).</p>
<p>Для создания такой ссылки
необходимо выполнить следующие шаги:</p>
<p>1. Создайте маркер раздела. Синтаксис
данного маркера следующий:</p>
<p>&lt;A
NAME=&quot;named_anchor&quot;&gt; Текст-который-отобразится-в-первой-строке-браузера
&lt;/A&gt;</p>
<p>2. Создайте ссылку на данный маркер:</p>
<p>&lt;A
HREF=&quot;#named_anchor&quot;&gt; Текст &lt;/A&gt;</p>
<p>Например:</p>
<p>&lt;p&gt;&lt;b&gt;Список разделов&lt;/b&gt;&lt;/p&gt;</p>
<p>&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#ex1&quot;&gt;Раздел 1&lt;/a&gt;&lt;/li&gt;</p>
<p>&lt;li&gt;&lt;a
href=&quot;#ex2&quot;&gt;Раздел 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</p>
<p>&lt;p&gt;&lt;a
name=&quot;ex1&quot;&gt;&lt;/a&gt;Раздел 1&lt;/p&gt;</p>
<p>&lt;ul&gt; &lt;p&gt;Текст раздела 1&lt;/p&gt; &lt;/ul&gt;</p>
<p>&lt;p&gt;&lt;a
name=&quot;ex2&quot;&gt;&lt;/a&gt;Раздел 2&lt;/p&gt;</p>
<p>&lt;ul&gt; &lt;p&gt;Текст раздела 2 &lt;br&gt;&lt;/p&gt;</p>
<p>Список разделов</p>
<p>·&nbsp;
Раздел 1</p>
<p>·&nbsp;
Раздел 2</p>
<p><a name=ex1></a>Раздел 1</p>
<p>Текст раздела 1</p>
<p><a name=ex2></a>Раздел 2</p>
<p>Текст раздела 2</p>
<p>Символы &quot;#ex1&quot;
сообщает вашему браузеру, что необходимо найти в данном HTML-документе маркер с
именем &quot;ex1&quot;.</p>
<p>Когда пользователь
щелкнет мышью на строке &quot;Раздел 1&quot;, браузер перейдет сразу к разделу
1. Внимание! Как ранее было показано в синтаксисе
URL, маркер раздела может быть поставлен как в том же документе, который
просматривается в текущий момент, так и в другом документе. Во втором случае
браузер осуществит подгруздку другого документа и перейдет к указанному для
него разделу.</p>
<p>Графика внутри
HTML-документа</p>
<p>Одна из наиболее
привлекательных черт Web - возможность включения ссылок на графические и иные
типы данных в HTML-документ. Делается это при помощи тэга &lt;IMG...ISMAP&gt;.
Использование данного тэга позволяет значительно улучшить внешний вид и
функциональность документов.</p>
<p>Существует два способа
использования графики в HTML-документах. Первый - это внедрение графических
образов в документ, что позволяет пользователю видеть изображения
непосредственно в контексте других элементов документа. Это наиболее
используемая техника при проектировании документов, называемая иногда
&quot;inline image&quot;. Синтаксис тэга:</p>
<br>
<p>&lt;IMG SRC=&quot;URL&quot;
ALT=&quot;text&quot; HEIGHT=n1 WIDTH=n2 ALIGN=top|middle|bottom|texttop ISMAP&gt;</p>
<p>Опишем элементы
синтаксиса тэга:</p>
<p>URL</p>
<p>Обязательный параметр,
имеющий такой же синтаксис, как и стандартный URL. Данный URL указывает
браузеру где находится рисунок. Рисунок должен храниться в графическом формате,
поддерживаемом браузером. На сегодняшний день форматы GIF и JPG поддерживаются
большинством браузеров.</p>
<p>ALT=&quot;text&quot;</p>
<p>Данный необязательный
элемент задает текст, который будет отображен браузером, не поддерживающим
отображение графики или с отключенной подкачкой изображений. Обычно, это
короткое описание изображения, которое пользователь мог бы или сможет увидеть
на экране. Если данный параметр отсутствует, то на месте рисунка большинство
браузеров выводит пиктограмму (иконку), активизировав которую, пользователь
может увидеть изображение. Тэг ALT рекомендуется, если ваши пользователи
используют браузер, не поддерживающий графический режим, например Lynx.</p>
<p>HEIGTH=n1</p>
<p>Данный необязательный
параметр используется для указания высоты рисунка в пикселах. Если данный
параметр не указан, то используется оригинальная высота рисунка. Это параметр
позволяет сжимать или растягивать изображения по вертикали, что позволяет более
четко определять внешний вид документа. Однако, некоторые браузеры не
поддерживают данный параметр. С другой стороны, экранное разрешение у вашего
клиента может отличаться от вашего, поэтому будьте внимательны при задании
абсолютной величины графического объекта.</p>
<p>WIDTH=n2</p>
<p>Параметр также
необязателен, как и предыдущий. Позволяет задать абсолютную ширину рисунка в
пикселах.</p>
<p>ALIGN</p>
<p>Данный параметр
используется, чтобы сообщить браузеру, куда поместить следующий блок текста.
Это позволяет более строго задать расположение элементов на экране. Если данный
параметр не используется, то большинство браузеров располагает изображение в
левой части экрана, а текст справа от него.</p>
<p>ISMAP</p>
<p>Этот параметр сообщает
браузеру, что данное изображение позволяет пользователю выполнять какие-либо
действия, щелкая мышью на определенном месте изображения. Данная возможность
является расширением HTML и будет обсуждена нами позже.</p>
<p>Приведем пример
использования данного тэга:</p>
<p>&lt;IMG
SRC=&quot;http://www.softexpress.com/images/nekton.jpg&quot; ALT=&quot;СофтСервис
лого&quot; ALIGN=&quot;top&quot; ISMAP&gt;</p>
<p>С версии HTML 2.0 у тэга
&lt;IMG&gt; появились дополнительные параметры:</p>
<p>&lt;IMG SRC=&quot;URL&quot; ALT=&quot;text&quot; HEIGHT=n1 WIDTH=n2 ALIGN=top|middle|bottom|texttop| absmiddle|baseline|absbottom BORDER=n3 VSPACE=n4 HSPACE=n5 ISMAP&gt;</p>
<p>Новые параметры:</p>
<p>BORDER</p>
<p>Данный параметр позволяет
автору определить ширину рамки вокруг рисунка.</p>
<p>VSPACE</p>
<p>Позволяет установить
размер в пикселах пустого пространства над и под рисунком, чтобы текст не
наезжал на рисунок. Особенно это важно для динамически формируемых изображений,
когда нельзя заранее увидеть документ.</p>
<p>HSPACE</p>
<p>То же самое, что и
VSPACE, но только по горизантали.</p>
<p>Фоновые рисунки</p>
<p>Большинство браузеров
позволяет включать в документ фоновый рисунок, который будет матрицироваться и
отображаться на фоне всего документа. Некоторые пользователи любят фоновую
графику, некоторые нет. Ненавязчивый полупрозрачный рисунок (обои) обычно
хорошо выглядит в качестве фона для большинства документов.</p>
<p>Описание фонового рисунка
включается в тэг BODY и выглядит следующим образом:</p>
<p>&lt;BODY
BACKGROUND=&quot;picture.gif&quot;&gt;</p>
<p>Задание стандартных
цветов</p>
<p>Многие HTML-авторы любят
использовать заранее предопределенные цвета фона документа, обычного текста и
ссылок. Чтобы задать эти цвета, необходимо включить в тэг &lt;BODY&gt;
дополнительные параметры:</p>
<p>&lt;BODY BGCOLOR=&quot;#XXXXXX&quot; TEXT=&quot;#XXXXXX&quot;
LINK=&quot;#XXXXXX&quot;&gt;</p>
<p>где каждый из параметров
определяет цвет того или иного элемента. Опишем эти параметры:</p>
<p>BGCOLOR</p>
<p>Цвет фона документа</p>
<p>TEXT</p>
<p>Цвет простого текста
документа</p>
<p>LINK</p>
<p>Цвет ссылки</p>
<p>Цвет задается шестизначным
числом в шестнадцатиричном формате по схеме RGB (Red, Green, Blue). Цвет
#000000 соответствует черному, а цвет #FFFFFF - белому. Например:</p>
<p>&lt;BODY BGCOLOR=&quot;#000000&quot; TEXT=&quot;#FFFFFF&quot;
LINK=&quot;#9690CC&quot;&gt;</p>
<p>Данная строка определяет
белый цвет фона документа, черный текст и серебристые ссылки.</p>
<p>Горизонтальная линия</p>
<p>Используя тэг &lt;HR&gt;
вы можете разделить текст горизонтальной чертой.</p>
<p>Формат тэга:</p>
<p>&lt;HR SIZE=number WIDTH=number|percent
ALIGN=left|right|center NOSHADE&gt;</p>
<p>Параметры тэга:</p>
<p>SIZE</p>
<p>Толщина линии в пикселях.</p>
<p>WIDTH</p>
<p>Ширина линии в пикселях
или процентах от ширина окна браузера.</p>
<p>ALIGN</p>
<p>Расположение на экране
(слева | по центру | справа).</p>
<p>NOSHADE</p>
<p>По умолчанию линия
представлена в 3D виде с тенью. NOSHADE позволяет представить линию просто
однотонной темной полоской.</p>
<p>Добавление стилей в HTML
документ</p>
<p>HTML позволяет
использовать различные стили шрифтов для выделения текстовой информации в ваших
документах. Вот короткий список стилей, поддерживаемых большинством браузеров:</p>
<p>·&nbsp;
bold (жирный)</p>
<p>·&nbsp;
italic
(наклонный)</p>
<p>·&nbsp;
mono spaced (type
writer - с использованием фиксированных шрифтов)</p>
<p>Вы можете комбинировать
различные виды стилей, например жирный и наклонный.</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td  valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Стиль</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Элемент или тэг</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Результат</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Bold</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;B&gt; Этот текст жирный &lt;/B&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст жирный</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Italic</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;I&gt; Этот текст наклонный &lt;/I&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст наклонный</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Mono spaced</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;TT&gt; Этот текст с непроп. шрифтом &lt;/TT&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст с непроп. шрифтом</td>
</tr>
</table>
<p>Комбинирование стилей
позволяет вам отображать в одной строке несколько элементов различными стилями,
например:</p>
<p>&lt;b&gt;Жизнь&lt;/b&gt;
- &lt;i&gt;это &lt;b&gt;песня!&lt;/b&gt;&lt;/i&gt;</p>
<p>Жизнь - это песня!</p>
<p>Внимание! Добавление большого количества стилей
и их комбинаций приводит к затруднению чтения текста!</p>
<p>Дополнительные стили:</p>
<p>·&nbsp;
big (юольшой)</p>
<p>·&nbsp;
small (маленький)</p>
<p>·&nbsp;
sub (подстрочник)</p>
<p>·&nbsp;
sup (надстрочник)</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td  valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Стиль</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Элемент или тэг</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>Результат</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Big</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст &lt;BIG&gt; большой &lt;/BIG&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст большой</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Small</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст &lt;SMALL&gt; маленький &lt;/SMALL&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст маленький</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Sub</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст &lt;SUB&gt; подстрочник &lt;/SUB&gt;</td>
<td valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
<p>Этот текст подстрочник </p>
</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>Sup</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>Этот текст &lt;SUP&gt; надстрочник &lt;/SUP&gt;</td>
<td valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>
<p>Этот текст надстрочник </p>
</td>
</tr>
</table>
<br>
<p>Размер шрифта &lt;FONT SIZE&gt;</p>
<p>Вы можете изменять размер
шрифта при помощи тэга:</p>
<p>&lt;FONT SIZE=+|- n&gt;</p>
<p>Шрифт может иметь размер
от 1 до 7. Вы можете прямо указать размер шрифта цифрой, или указать смещение
относительно базового значения (по умолчанию - 3) в положительную или
отрицательную сторону. Базовое значение можно изменить при помощи тэга:</p>
<p>&lt;BASEFONT SIZE=n&gt;</p>
<p>Например:</p>
<p>&lt;p&gt;и</p>
<p>&lt;font
SIZE=+1&gt;з&lt;/font&gt;&lt;font
SIZE=+2&gt;м&lt;/font&gt;</p>
<p>&lt;font
SIZE=+3&gt;е&lt;/font&gt;&lt;font
SIZE=+4&gt;н&lt;/font&gt;</p>
<p>&lt;font
SIZE=+3&gt;е&lt;/font&gt;&lt;font
SIZE=+2&gt;н&lt;/font&gt;</p>
<p>&lt;font
SIZE=+1&gt;и&lt;/font&gt;</p>
<p>е&lt;/p&gt;</p>
<p>изменение</p>
<p>Цвет шрифта &lt;FONT SIZE&gt;</p>
<p>Вы можете изменить цвет
шрифта при помощи тэга:</p>
<p>&lt;FONT
COLOR=&quot;#xxxxxx&gt;</p>
<p>Цвет указывается в
RGB-формате (Red-Green-Blue) посредством указания размерности каждой компоненты
цвета в шестнадцатиричном формате. Например, белый цвет обозначается
&quot;000000&quot;, черный - &quot;FFFFFF&quot;, синий - &quot;0000FF&quot; и
т.п.</p>
<br>
<p>&lt;FONT
COLOR=&quot;#FF0000&quot;&gt;</p>
<p>Красный &lt;/FONT&gt;</p>
<p>&lt;FONT
COLOR=&quot;#00FF00&quot;&gt;</p>
<p>Зеленый &lt;/FONT&gt;</p>
<p>&lt;FONT
COLOR=&quot;#0000FF&quot;&gt;</p>
<p>Синий &lt;/FONT&gt;</p>
<p>Красный Зеленый Синий</p>
<p>Специальные тэги HTML</p>
<p>Следующие тэги позволят
вам сделать ваш HTML-документ более функциональным.</p>
<p>Тэг &lt;ADDRESS&gt;
используется для выделения автора документа и его дреса (например, e-mail).
Синтаксис:</p>
<p>&lt;ADDRESS&gt;
Адрес-автора &lt;/ADDRESS&gt;</p>
<p>Escape-последовательности</p>
<p>Некоторые символы
являются управляющими символами в HTML и немогут напрямую использоваться в
документе:</p>
<p>·&nbsp;
левая угловая
скобка &quot;&lt;&quot;</p>
<p>·&nbsp;
правая угловая
скобка &quot;&gt;&quot;</p>
<p>·&nbsp;
амперсанд
&quot;&amp;&quot;</p>
<p>·&nbsp;
двойные кавычки
&quot;&quot;&quot;</p>
<p>Чтобы использовать данные
символы в документе, необходимо заменить их escape-последовательностями:</p>
<table class=MsoTableGrid border=1 cellspacing=0 cellpadding=0
style='border-collapse:collapse;border:none'>
<tr>
<td  valign=top style='border:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&lt;</td>
<td  valign=top style='border:solid black 1.0pt;border-left:none;padding:0cm 5.4pt 0cm 5.4pt'>&amp;lt;</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&gt;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&amp;gt;</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&amp;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&amp;amp;</td>
</tr>
<tr>
<td  valign=top style='border:solid black 1.0pt;border-top:none;padding:0cm 5.4pt 0cm 5.4pt'>&quot;</td>
<td  valign=top style='border-top:none;border-left:none;border-bottom:solid black 1.0pt;
border-right:solid black 1.0pt;padding:0cm 5.4pt 0cm 5.4pt'>&amp;quot;</td>
</tr>
</table>
<br>
<p>Существует большое
количество escape-последовательностей для обозначения специальных символов,
например &quot;&amp;copy;&quot; для обозначения знака © и &amp;reg; для значка
®, появившихся в HTML 2.0. Одной из особенностей является замена символов во
2-ой части символьной таблицы (после 127-ого символа) на
escape-последовательности для передачи текстовых файлов с национальными языками
по 7-битным каналам.</p>
<p>Внимание! Escape-последовательности чувствительны
к регистру: НЕЛЬЗЯ использовать &amp;LT; вместо &amp;lt;.</p>
<p>HTML формы</p>
<p>Некоторые WWW browser
позволяют пользователю, заполнив специальную форму, возвращающую полученное
значение, выполнять некоторые действия на вашем WWW-сервере. Когда форма
интерпретируется WEB-браузером, создается специальные экранные элементы GUI,
такие, как поля ввода, checkboxes, radiobuttons, выпадающие меню, скроллируемые
списки, кнопки и т.д. Когда пользователь заполняет форму и нажимает кнопку
&quot;Подтверждение&quot; (SUBMIT - специальный тип кнопки, который задается
при описании документа), информация, введенна пользователем в форму, посылается
HTTP-серверу для обработки и передаче другим программам, работающим под
сервером, в соответствии с CGI (Common Gateway Interface) интерфейсом.</p>
<p>Когда вы описываете
форму, каждый элемент ввода данных имеет тэг &lt;INPUT&gt;. Когда пользователь
помещает данные в элемент формы, инфоромация размещается в разделе VALUE
данного элемента.</p>
<p>Синтаксис форм</p>
<p>Все формы начинаются
тэгом &lt;FORM&gt; и завершаются тэгом &lt;/FORM&gt;.</p>
<br>
<p>&lt;FORM METHOD=&quot;get|post&quot; ACTION=&quot;URL&quot;&gt;
Элементы_формы_и_другие_элементы_HTML&lt;/FORM&gt;</p>
<p>METHOD</p>
<p>Метод посылки сообщения с
данными из формы. В зависимости от используемого метода вы можете посылать
результаты ввода данных в форму двумя путями:</p>
<p>·&nbsp;
GET: Информация из формы добавляется в
конец URL, который был указан в описании заголовка формы. Ваша CGI-программа
(CGI-скрипт) получает данные из формы в виде параметра переменной среды
QUERY_STRING. Использование метода GET не рекомендуется.</p>
<p>·&nbsp;
POST: Данный метод передает всю
информацию о форме немедленно после обращения к указанному URL. Ваша
CGI-программа получает данные из формы в стандартный поток ввода. Сервер не
будет пересылать вам сообщение об окончании пересылки данных в стандартный поток
ввода; вместо этого используется переменная среды CONTENT_LENGTH для
определения, какое количество данных вам необходимо считать из стандартного
потока ввода. Данный метод рекомендуется к использованию.</p>
<p>ACTION</p>
<p>ACTION описывает URL,
который будет вызываться для обработки формы. Данный URL почти всегда указывает
на CGI-программу, обрабатывающую данную форму.</p>
<p>Тэги формы</p>
<p>TEXTAREA</p>
<p>Тэг &lt;TEXTAREA&gt;
используется для того, чтобы позволить пользователю вводить более одной строки
информации (свободный текст). Вот пример использовани тэга &lt;TEXTAREA&gt;:</p>
<br>
<p>&lt;TEXTAREA
NAME=&quot;address&quot; ROWS=10 COLS=50&gt;</p>
<p>Москва,</p>
<p>Дмитровкое шоссе,</p>
<p>д.9Б, офис 448</p>
<p>&lt;/TEXTAREA&gt;</p>
<p>Атрибуты, используемые
внутри тэга &lt;TEXTAREA&gt; описывают внешний вид и имя вводимого значения.
Тэг &lt;/TEXTAREA&gt; необходим даже тогда, когда поле ввода изначально пустое.
Описание атрибутов:</p>
<p>·&nbsp;
NAME - имя поля ввода</p>
<p>·&nbsp;
ROWS - высота поля ввода в символах</p>
<p>·&nbsp;
COLS - ширина поля ввода в символах</p>
<p>Если вы хотите, чтобы в
поле ввода по умолчанию выдавался какой-либо текст, то необходимо вставить его
внутри тэгов &lt;TEXTAREA&gt; и &lt;/TEXTAREA&gt;.</p>
<p>INPUT</p>
<p>Тэг &lt;INPUT&gt;
используется для ввода одной строки текста или одного слова. Атрибуты тэга:</p>
<p>·&nbsp;
CHECKED - означает, что CHECKBOX или
RADIOBUTTON будет выбран.</p>
<p>·&nbsp;
MAXLENGTH - определяет количество символов, которое
пользователи могут ввести в поле ввода. При превышении количества допустимых
символов браузер реагирует на попытку ввода нового символа звуковым сигналом и
не дает его ввести. Не путать с атрибутом SIZE. Если MAXLENGTH больше чем SIZE,
то в поле осуществляется скроллинг. По умолчанию значение MAXLENGTH равно
бесконечности.</p>
<p>·&nbsp;
NAME - имя поля ввода. Данное имя
используется как уникальный идентификатор поля, по которому, впоследствии, вы
сможете получить данные, помещенные пользователем в это поле.</p>
<p>·&nbsp;
SIZE - определяет визуальный размер поля
ввода на экране в символах.</p>
<p>·&nbsp;
SRC – URL, указывающий на картинку
(используется совместно с атрибутом IMAGE).</p>
<p>·&nbsp;
TYPE - определяет тип поля ввода. По
умолчанию это простое поле ввода для одной строки текста. Остальные типы должны
быть явно указаны:</p>
<p>CHECKBOX</p>
<p>Используется для простых
логических (BOOLEAN) значений. Значение, ассоциированное с именем данного поля,
которое будет передаваться в вызываемую CGI-программу, может принимать значение
ON или OFF.</p>
<p>HIDDEN</p>
<p>Поля данного типа не
отображаются браузером и не дают пользователю изменять присвоенные данному полю
по умолчанию значение. Это поле используетс для передачи в CGI-программу
статической информации, как то ID прользователя, пароля или другой информации.</p>
<p>IMAGE</p>
<p>Данный тип поля ввода
позволяет вам связывать графический рисунок с именем поля. При нажатии мышью на
какую-либо часть рисунка будет немедленно вызвана ассоциированная форме
CGI-программа. Значения, присвоенные переменной NAME будут выглядеть так -
создается две новых переменных: первая имеет имя, обозначенное в поле NAME с
добавлением .x в конце имени. В эту переменную будет помещена X-координата
точки в пикселах ( считая началом координат левый верхний угол рисунка), на
которую указывал курсор мыши в момент нажатия, а переменная с именем,
содержащимся в NAME и добавленным .y, будет содержать Y-координату. Все
значения атрибута VALUE игнорируются. Само описание картинки осуществляется
через атрибут SRC и по синтаксису совпадает с тэгом &lt;IMG&gt;.</p>
<p>PASSWORD</p>
<p>То же самое, что и
атрибут TEXT, но вводимое пользователем значение не отображается браузером на
экране.</p>
<p>RADIO</p>
<p>Данный атрибут позволяет
вводить одно значение из нескольких альтернатив. Для создания набора
альтернатив вам необходимо создать несколько полей ввода с атрибутом
TYPE=&quot;RADIO&quot; с разными значениями атрибута VALUE, но с одинаковыми
значениями атрибута NAME. В CGI-программу будет передано значение типа
NAME=VALUE, причем VALUE примет значение атрибута VALUE того поля ввода,
которое в данный момент будет выбрано (будет активным). При выборе одного из
полей ввода типа RADIO все остальные поля данного типа с тем же именем (атрибут
NAME) автоматически станут невыбранными на экране.</p>
<p>RESET</p>
<p>Данный тип обозначает
кнопку, при нажатии которой все поля формы примут значения, описанные для них
по умолчанию.</p>
<p>SUBMIT</p>
<p>Данный тип обозначает
кнопку, при нажатии которой будет вызвана CGI-программа (или URL), описанная в
заголовке формы. Атрибут VALUE может содержать строку, которая будет высвечена
на кнопке.</p>
<p>TEXT</p>
<p>Данный тип поля ввода описывает
однострочное поле ввода. Используйте атрибуты MAXLENGTH и SIZE для определения
максимальной длинны вводимого значения в символах и размера отображаемого поля
ввода на экране (по умолчанию принимается 20 символов).</p>
<p>·&nbsp;
VALUE - присваивает полю значение по
умолчанию или значение, которое будет выбрано при использовании типа RADIO (для
типа RADIO данный атрибут обязателен)</p>
<p>Меню выбора в формах</p>
<p>Под меню выбора в формах
понимают такой элемент интерфейса, как LISTBOX. Существует три типа тэгов меню
выбора для форм:</p>
<p>·&nbsp;
Select - пользователь выбирает одно значение
из фиксированного списка значений, представленных тэгами OPTION. Даннй вид
представляется как выпадающий LISTBOX.</p>
<p>·&nbsp;
Select single - то же самое, что и Select, но на
экране пользователь видит одновременно три элемента выбора. Если их больше, то
предоставляется автоматический вертикальный скроллинг.</p>
<p>·&nbsp;
Select multiple - позволяет выбрать несколько
элементов из LISTBOX.</p>
<p>SELECT</p>
<p>Тэг SELECT позволяет
пользователю выбрать значение из фиксированного списка значений. Обычно это
представлено выпадающим меню.</p>
<p>Тэг SELECT имеет один или
более параметр пежду стартовым тэгом &lt;SELECT&gt; и завершающим
&lt;/SELECT&gt;. По умолчанию, первый элемент отображается в строке выбора. Вот
пример тэга &lt;SELECT&gt;:</p>
<p>&lt;FORM&gt;</p>
<p>&lt;SELECT
NAME=group&gt;</p>
<p>&lt;OPTION&gt;
AT 386</p>
<p>&lt;OPTION&gt;
AT 486</p>
<p>&lt;OPTION&gt;
AT 586</p>
<p>&lt;/SELECT&gt;</p>
<p>&lt;/FORM&gt;</p>
<p>SELECT SINGLE</p>
<p>Тэг SELECT SINGLE - это
то же самое, что и Select, но на экране пользователь видит одновременно
несколько элементов выбора (три по умолчанию). Если их больше, то
предоставляется автоматический вертикальный скроллинг. Количество одновременно
отображаемых элементов определяется атрибутом SIZE. Пример:</p>
<p>&lt;FORM&gt;</p>
<p>&lt;SELECT
SINGLE NAME=group SIZE=4&gt;</p>
<p>&lt;OPTION&gt;
AT 386</p>
<p>&lt;OPTION&gt;
AT 486</p>
<p>&lt;OPTION&gt;
AT 586</p>
<p>&lt;OPTIONS&gt;
Pentium PRO</p>
<p>&lt;/SELECT&gt;</p>
<p>&lt;/FORM&gt;</p>
<p>SELECT MULTIPLE</p>
<p>Тэг SELECT MULTIPLE похож
на тэг SELECT SINGLE, но пользователь может одновременно выбрать более чем один
элемент списка. Атрибут SIZE определяет количество одновременно видимых на
экране элементов, атрибут MULTIPLE - максимальное количество одновременно
выбранных элементов. Пример:</p>
<p>&lt;FORM&gt;</p>
<p>&lt;SELECT
SINGLE NAME=group SIZE=4 MULTIPLE=2&gt;</p>
<p>&lt;OPTION&gt;
AT 386</p>
<p>&lt;OPTION&gt;
AT 486</p>
<p>&lt;OPTION&gt;
AT 586</p>
<p>&lt;OPTIONS&gt;
Pentium PRO</p>
<p>&lt;/SELECT&gt;</p>
<p>&lt;/FORM&gt;</p>
<br>
<p>Если выбрано одновременно
несколько значений, то серверу передаютс соответствующее выбранному количество
параметров NAME=VALUE с одинаковыми значениями NAME, но разными VALUE.</p>
<h2>Отправление файлов при помощи форм</h2>
<p>Формы
можно использовать для отправки не только небольших информационных сообщений
ввиде параметров, а также и для отправки файлов.</p>
<p>Внимание! Поскольку данная
возможность требует поддержки получения файлов WEB-сервером, то,
соответственно, необходимо, чтобы сервер поддерживал получение файлов!</p>
<p>Например:</p>
<p>&lt;FORM
ENCTYPE=&quot;multipart/form-data&quot; ACTION=&quot;url&quot; METHOD=POST&gt;</p>
<p>Отправить данный файл: &lt;INPUT NAME=&quot;userfile&quot;
TYPE=&quot;file&quot;&gt;</p>
<p>&lt;P&gt;</p>
<p>&lt;INPUT
TYPE=&quot;submit&quot; VALUE=&quot;Отправить файл&quot;&gt;</p>
<p>&lt;/FORM&gt;</p>
<p>HTML фреймы</p>
<p>Испольльзуя фреймы,
позволяющие разбивать Web-страницы на множественные скроллируемые подокна, вы
можете значительно улучшить внешний вид и функциональность информационных
систем и Web-приложений. Каждое подокно, или фрейм, может иметь следующие
свойства:</p>
<p>·&nbsp;
Каждый фрейм
имеет свой URL, что позволяет загружать его независимо от других фреймов</p>
<p>·&nbsp;
Каждый фрейм
имеет собственное имя (параметр NAME), позволяющее переходить к нему из другого
фрейма</p>
<p>·&nbsp;
Размер фрейма
может быть изменен пользователем прямо на экране при помощи мыши (если это не
запрещено указанием специального параметра)</p>
<p>Данные свойства фреймов
позволяют создавать продвинутые интерфейсные решения, такие как:</p>
<p>·&nbsp;
Размещение
статической информации, которую автор считает необходимым постоянно показывать
пользователю, в одном статическом фрейме. Это может быть графический логотип
фирмы, copyright, набор управляющих кнопок;</p>
<p>·&nbsp;
Помещение в
статическом фрейме оглавления всех или части WEB-документов, содержащихся на
WEB-сервере, что позволяет пользователю быстро находить интересующую его
информацию;</p>
<p>·&nbsp;
Создавать окна
результатов запросов, когда в одном фрейме находится собственно запрос, а в
другом результаты запроса ;</p>
<p>·&nbsp;
Создавать формы
типа &quot;мастер-деталь&quot; для WEB-приложений, обслуживающих базы данных;</p>
<h2>Синтаксис фреймов</h2>
<p>Формат
документа, использующего фреймы, внешне очень напоминает формат обычного
документа, только вместо тэга BODY используется контейнер FRAMESET, содержащий
описание внутренних HTML-документов, содержащий собственно информацию,
размещаемую во фреймах.</p>
<p>&lt;HTML&gt;</p>
<p>&lt;HEAD&gt;...&lt;/HEAD&gt;</p>
<p>&lt;FRAMESET&gt;...&lt;/FRAMESET&gt;</p>
<p>&lt;/HTML&gt;</p>
<p>Однако,
фрейм-документ является специфичным видом HTML-документа, поскольку не содержит
элемента BODY и какой-либо информационной нагрузки соответственно. Он описывает
только фреймы, которые будут содержать информацию (кроме случая двойного
документа, который мы рассмотрим позже).</p>
<p>Представим
общий синтаксис фреймов:</p>
<p>&nbsp;</p>
<p>&lt;FRAMESET
COLS=&quot;value&quot; | ROWS=&quot;value&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;url1&quot;&gt;</p>
<p>&lt;FRAME ...&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>FRAMESET</p>
<p>&lt;FRAMESET
[COLS=&quot;value&quot; | ROWS=&quot;value&quot;]&gt;</p>
<p>Тэг &lt;FRAMESET&gt; имеет завершающий тэг &lt;/FRAMESET&gt;. Все, что может находиться между этими
двумя тэгами, это тэг &lt;FRAME&gt;, вложенные тэги &lt;FRAMESET&gt; и
&lt;/FRAMESET&gt;, а также контейнер из тэгов &lt;NOFRAME&gt; и
&lt;/NOFRAME&gt;, который позволяет строить двойные документы для браузеров,
поддерживающих фреймы и не поддерживающих фреймы.</p>
<p>Данный тэг имеет два
взаимоисключающих параметра: ROWS и COLS.</p>
<p>ROWS=&quot;список-определений-горизонтальных-подокон&quot;</p>
<p>Данный тэг содержит
описания некоторого количества подокон, разделенные запятыми. Каждое описание
представляет собой числовое значение размера подокна в пикселах, процентах от
всего размера окна или связанное масштабное значение. Количество подокон
определяется количеством значений в списке. Общая сумма высот подокон должна
составлять высоту всего окна (в любых измеряемых величинах). Отсутствие
атрибута ROWS определяет один фрейм, величиной во все окно браузера.</p>
<p>Синтаксис используемых
видов описания величин подокон:</p>
<p>value</p>
<p>Простое числовое значение
определяет фиксированную высоту подокна в пикселах. Это далеко не самый лучший
способ описания высоты подокна, поскольку различные браузеры имеют различный
размер рабочего поля, не говоря уже о различных экранных разрешениях у
пользователя. Если вы, все же, используете данный способ описания размера, то
настоятельно рекомендуется сочетать его с каким-либо другим, чтобы в результате
вы точно получили 100%-ное заполнение окна браузера вашего пользователя.</p>
<p>value%</p>
<p>Значение величины подокна
в процентах от 1 до 100. Если общая сумма процентов описываемых подокон
превышает 100, то размеры всех фреймов пропорционально уменьшаются до суммы 100%.
Если, соответственно, сумма меньше 100, то размеры пропорционально
учеличиваются.</p>
<p>value*</p>
<p>Вообще говоря, значение
value в данном описании является необязательным. Символ &quot;*&quot; указывает
на то, что все оставшееся место будет принадлежать данному фрейму. Если
указывается два или более фрейма с описанием &quot;*&quot; (например
&quot;*,*&quot;), то оставшееся пространство делится поровну между этими
фреймами. Если перед звездочкой стоит цифра, то она указывает пропорцию для
данного фрейма (во сколько раз од будет больше аналогично описанного чистой
звездочкой). Например, описание &quot;3*,*,*&quot;, говорит, что будет создано
три фрейма с размерами 3/5 свободного пространства для первого фрейма и по 1/5
для двух других.</p>
<p>COLS=&quot;список-определений-горизонтальных-подокон&quot;</p>
<p>То же самое, что и ROWS,
но делит окно по вертикали, а не по горизонтали.</p>
<p>Внимание! Совместное
использование данных параметров может привести к непредствазуемым результатам.
Например, строка: &lt;FRAMESET ROWS=&quot;50%,50%&quot; COLS
&quot;50%,50%&quot;&gt; может привести к ошибочной ситуации.</p>
<p>Примеры:</p>
<p>&lt;FRAMESET
COLS=&quot;50,*,50&quot;&gt; - описывает три фрейма, два по 50 точек справа и
слева, и один внутри этих полосок.</p>
<p>&lt;FRAMESET
ROWS=&quot;20%,3*,*&quot;&gt; - описывает три фрейма, первый из которых
занимает 20% площади сверху экрана, второй 3/4 оставшегося от первого фрейма
места (т.е. 60% всей площади окна), а последний 1/4 (т.е. 20% всей площади
окна.</p>
<p>&lt;FRAMESET
ROWS=&quot;*,60%,*&quot;&gt; - аналогично предыдущему примеру.</p>
<p>Тэги &lt;FRAMESET&gt;
могут быть вложенными, т.е. например:</p>
<p>&lt;FRAMESET
ROWS=&quot;50%,50%&quot;&gt;</p>
<p>&lt;FRAMESET
COLS=&quot;*,*&quot;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>Результат данного примера
мы рассмотрим позже.</p>
<h2>FRAME</h2>
<p>&lt;FRAME
SRC=&quot;url&quot; [NAME=&quot;frame_name&quot;] [MARGINWIDTH=&quot;nw&quot;]
[MARGINHEIGHT=&quot;nh&quot;] [SCROLLING=yes|no|auto] [NORESIZE]&gt;</p>
<p>Данный
тэг определяет фрейм внутри контейнера FRAMESET.</p>
<p>SRC=&quot;url&quot;</p>
<p>Описывает
URL документа, который будет отображен внутри ланного фрейма. Если он
отсутствует, то будет отображен пустой фрейм.</p>
<p>NAME=&quot;frame_name&quot;</p>
<p>Данный
параметр описывает имя фрейма. Имя фрейма может быть использовано для
определения действия с данным фреймом из другого HTML-документа или фрейма (как
правило, из соседнего фрейма этого же документа). Имя обязательно должно
начинаться с символа. Содержимое поименованных фреймов может быть задействовано
из других документов при помощи специального атрибута TARGET, описываемого
ниже.</p>
<p>MARGINWIDTH=&quot;value&quot;</p>
<p>Это
атрибут может быть использован, если автор документа хочет указать величину
разделительных полос между фреймами сбоку. Значение value указывается в
пикселах и не может быть меньше единицы. По умолчанию данное значение зависит
от реализации поддержки фреймов используемым клиентом браузером.</p>
<p>MARGINHEIGHT=&quot;value&quot;</p>
<p>То
же самое, что и MARGINWIDTH, но для верхних и нижних величин разделительных
полос.</p>
<p>SCROLLING=&quot;yes
| no | auto&quot;</p>
<p>Этот
атрибут позволяет задавать наличие полос прокрутки у фрейма. Параметр yes указывает,
что полосы прокрутки будут в любом случае присутствовать у фрейма, параметр no
наоборот, что полос прокрутки не будет. Auto определяет наличие полос прокрутки
только при их необходимости (значение по умолчанию).</p>
<p>NORESIZE</p>
<p>NOFRAMES</p>
<p>Данный тэг используется в
случае, если вы создаете документ, который может просматриваться как
браузерами, поддерживающими фреймы, так и браузерами, их не поддерживающими.
Данный тэг помещяется внутри контейнера FRAMESET, а все, что находится внутри
тэгов &lt;NOFRAMES&gt; и &lt;/NOFRAMES&gt; игнорируется браузерами,
поддерживающими фреймы.</p>
<p>Примеры</p>
<p>Рассмотрим реализацию
фреймов для подобного разбиения окна:</p>
<br>
<p><img border="0" width="171" height="205" src="/image/88398_14_1.png" alt=""></p>
<p>&lt;FRAMESET
ROWS=&quot;*,*&quot;&gt;</p>
<p>&lt;NOFRAMES&gt;</p>
<p>&lt;H1&gt;Ваша версия
WEB-браузера не поддерживает фреймы!&lt;/H1&gt;</p>
<p>&lt;/NOFRAMES&gt;</p>
<p>&lt;FRAMESET
COLS=&quot;65%,35%&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;link1.php&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;link2.php&quot;&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>&lt;FRAMESET
COLS=&quot;*,40%,*&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;link3.php&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;link4.php&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;link5.php&quot;&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>Планирование фреймов и
взаимодействия между фреймами</p>
<p>С появлением фреймов
сразу возникает вопрос: &quot;А как сделать так, чтобы нажимая на ссылку в
одном фрейме инициировать появление информации в другом?&quot;</p>
<p>Ответом на данный вопрос
является планирование взаимодействия фреймов (далее - планирование). Каждый
фрейм может иметь собственное имя, определяемое параметром NAME при описании
данного фрейма. Существует, также, специальный атрибут - TARGET, позволяющий
определять, к какому фрейму относится та или иная операция. Формат данного
атрибута следующий:</p>
<p>TARGET=&quot;windows_name&quot;</p>
<p>Данный атрибут может
встречаться внутри различных тэгов:</p>
<p>TARGET в тэге A</p>
<p>Это самое прямое
использование TARGET. Обычно, при активизации пользователем ссылки
соответствующий документ появляется в том же окне (или фрейме), что и исходный,
в котором была ссылка. Добавление атрибута TARGET позволяет произвести вывод
документа в другой фрейм. Например:</p>
<p>&lt;A HREF=&quot;mydoc.php&quot; TARGET=&quot;Frame1&quot;&gt;
Переход в фрейм № 1 &lt;/A&gt;</p>
<p>TARGET в тэге BASE</p>
<p>Размещение TARGET в тэге
BASE позволит вам не указывать при описании каждой ссылки фрейм-приемник
документов, вызываемых по ссылкам. Это очень удобно, если в одном фрейме у вас находится
меню, а в другой - выводится информация. Например:</p>
<p>Документ № 1.</p>
<p>&lt;FRAMESET
ROWS=&quot;20,*&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;doc2.php&quot; NAME=&quot;Frame1&quot;&gt;</p>
<p>&lt;FRAME
SRC=&quot;doc3.php&quot; NAME=&quot;Frame2&quot;&gt;</p>
<p>&lt;/FRAMESET&gt;</p>
<p>Документ № 2.</p>
<p>&lt;HTML&gt;</p>
<p>&lt;HEAD&gt;</p>
<p>&lt;BASE
TARGET=&quot;Frame2&quot;&gt;</p>
<p>&lt;/HEAD&gt;</p>
<p>&lt;BODY&gt;</p>
<p>&lt;A
HREF=&quot;url1&quot;&gt; Первая часть&lt;/A&gt; |</p>
<p>&lt;A
HREF=&quot;url2&quot;&gt; Вторая часть&lt;/A&gt;</p>
<p>&lt;/BODY&gt;</p>
<p>&lt;/HTML&gt;</p>
<p>TARGET в тэге AREA</p>
<p>Таже можно включать тэг
TARGET в описание ссылки при создании карты изображения. Например:</p>
<p>&lt;AREA
SHAPE=&quot;circle&quot; COORDS=&quot;100,100,50&quot;
HREF=&quot;http://www.softexpress.com&quot; TARGET=&quot;Frame1&quot;&gt;</p>
<p>TARGET в тэге FORM</p>
<p>То же относится и к
определению формы. В данном случае, после обработки переданных параметров формы
результирующий документ появится в указанном фрейме.</p>
<p>&lt;FORM
ACTION=&quot;url&quot; TARGET=&quot;window_name&quot;&gt;</p>
<p>Внимание! Имя окна
(фрейма) в параметре TARGET должно начинаться с латинской буквы или цифры.
Также необходимо помнить, что существуют зарезервированные имена для разрешения
специальных ситуаций.</p>
<p>Зарезервированные имена
фреймов</p>
<p>Зарезервированные имена
фреймов служат для разрешения специальных ситуаций. Все они начинаются со знака
подчеруивания. Любые другие имена фреймов, начинающиеся с подчеркивания будут
игнорироваться браузером.</p>
<p>TARGET=&quot;_blank&quot;</p>
<p>Данное значение
определяет, что документ, полученный по ссылке будет отображаться в новом окне
браузера.</p>
<p>TARGET=&quot;_self&quot;</p>
<p>Данное значение
определяет, что документ, полученный по ссылке будет отображаться в том же
фрейме, в котором находится ссылка. Это имя удобно для переопределения окна
назначения, указанного ранее в тэге BASE.</p>
<p>TARGET=&quot;_parent&quot;</p>
<p>Данное значение
определяет, что документ, полученный по ссылке будет отображаться в
родительском окне, вне зависимости от параметров FRAMESET. Если родительского
окна нет, то данное имя аналогично &quot;_self&quot;.</p>
<p>TARGET=&quot;_top&quot;</p>
<p>Данное значение
определяет, что документ, полученный по ссылке будет отображаться на всей
поверхности окна, вне зависимости от наличия фреймов. Использование данного
параметра удобно в случае вложенных фреймов.</p>
<p>Создание карты
изображений</p>
<p>Создание карты
изображения является одной из привлекательнейших возможностей HTML, позволяющей
пользователю привязывать ссылки на другие документы к отдельным частям
изображений. Щелкая мышью на отдельных частях изображения, пользователь может
выполнять те или иные действия, переходить по той или иной ссылке на другие
документы и т.п.</p>
<p>Внимание! Если вы хотите использовать
технологию картирования изображений, то вам необходимо использовать браузер,
поддерживающий данную технологию!</p>
<p>Чтобы включить поддержку
карты для изображения, необходимо ввести дополнительный параметр в тэг IMG:</p>
<p>&lt;IMG
SRC=&quot;url&quot; USEMAP=&quot;url#map_name&quot; &gt;</p>
<br>
<p>Параметр USEMAP
указывает, в каком месте находится карта описываемого изображения. Карта
изображения определяет, какому участку изображения какой URL соответствует.
Карта изображения может находиться в том же документе, что и изображение, или в
другом документе. Помещение карты в другой документ позволяет собрать все карты
изображений в одном документе (если у вас их несколько в различных документах),
но добавляет еще одну итерацию в сети, когда за перыую итерацию выясняется
местонахождение карты, а за вторую - выполнение действия, предписанного URL для
данного участка изображения. Параметр map_name указывает имя карты для
изображения, а предшествующий ему URL определяет местонахождение карты. Если
данный URL отсутствует, то карта с указанным именем ищется в текущем документе.</p>
<p>Рассмотрим синтаксис
определения карты изображения:</p>
<p>&lt;MAP
NAME=&quot;map_name&quot;&gt;</p>
<p>&lt;AREA
[SHAPE=&quot; shape &quot;] COORDS=&quot;x,y,...&quot; [HREF=&quot; reference
&quot;] [NOHREF]&gt;</p>
<p>&lt;/MAP&gt;</p>
<p>Параметры:</p>
<p>&lt;MAP NAME=&quot;map_name&quot;&gt;</p>
<p>Данный тэг определяет
начало описания карты с именем map_name.</p>
<p>&lt;AREA...&gt;</p>
<p>Описывает участок
изображения и ставит ему в соответствие URL. Параметры:</p>
<p>SHAPE</p>
<p>Необязательный параметр,
указывающий на форму определяемой области изображения. Может принимать
значения:</p>
<p>- &nbsp;
default - по
умолчанию (обычно прямоугольник)</p>
<p>- &nbsp;
rect -
прямоугольник</p>
<p>- &nbsp;
circle - круг</p>
<p>- &nbsp;
poly -
многоугольник произвольной формы</p>
<p>COORDS</p>
<p>Координаты в пикселах
описываемой области. Для прямоугольника это четыре координаты левого верхнего и
правого нижнего углов, для круга - три координаты (две - центр круга, третья -
радиус). Для многоугольника это описание каждого угла в двух координатах -
соответственно число координат равно удвоенному количеству углов.</p>
<p>Координаты считаются с
нуля, поэтому для описания области 100 на 100 используется описание:</p>
<p>&lt;AREA
COORDS=&quot;0,0,99,99&quot; ...&gt;</p>
<p>HREF=&quot;url&quot;</p>
<p>Описание ссылки, действия
по которой будут выполняться при щелчке мыши в заданной области.</p>
<p>NOHREF</p>
<p>Параметр, указывающий,
что ссылка отсутствует для данного участка. По умолчанию, если не указан
параметр HREF, то считается что, действует параметр NOHREF. Также, для всех
неописанных участков изображения считается, что используется параметр NOHREF.</p>
<p>Если две описанных
области накладываются друг на друга, то используется ссылка, принадлежащая
первой из описанных областей.</p>
<p>&lt;/MAP&gt;</p>
<p>Данный тэг завершает
описание карты изображения.</p>
<p>Применение:</p>
<p>Технология Image Map
применяется в самых различных областях. Однако наиболее часто ее применение
можно увидеть при создании графических меню, когда создается одно большое
изображение с элементами меню, и каждому участку изображения предписывается
какое либо действие.</p>
<p>Так же прменять данную
технологию можно при создании простых ГИС-подобных систем с картографическими
возможностями.</p>
<h2>HTML таблицы</h2>
<p>Таблицы
в HTML организуются как набор столбцов и строк. Ячейки таблицы могут содержать
любые HTML-элементы, такие, как заголовки, списки, абзацы, фигуры, графику, а
также элементы форм.</p>
<h3>Основные
тэги таблицы</h3>
<p>Таблица:
&lt;TABLE&gt;...&lt;/TABLE&gt;</p>
<p>Это
основноые тэги, описывающие таблицу. Все элементы таблицы должны находиться
внутри этих двух тэгов. По умолчанию таблица не имеет обрамления и
разделителей. Обрамление добавляется атрибутом BORDER.</p>
<p>Строка
таблицы:
&lt;TR&gt;...&lt;/TR&gt;</p>
<p>Количество
строк таблицы определяется количеством встречающихся пар тэгов
&lt;TR&gt;..&lt;/TR&gt;. Строки могут иметь атрибуты ALIGN и VALIGN, которые
описывают визуальное положение содержимого строк в таблице.</p>
<p>Ячейка
таблицы:
&lt;TD&gt;...&lt;/TD&gt;</p>
<p>Описывает
стандартную ячейку таблицы. Ячейка таблицы может быть описана только внутри
строки таблицы. Каждая ячейка должна быть пронумерована номером колонки, для
которой она описывается. Если в строке отстутствует одна или несколько ячеек
для некоторых колонок, то браузер отображает пустую ячейку. Расположение данных
в ячейке по умолчанию определяется атрибутами ALIGN=left и VALIGN=middle.
Данное расположение может быть исправлено как на уровне описания строки, так и
на уровне описания ячейки.</p>
<p>Заголовок
таблицы: &lt;TH&gt;...&lt;/TH&gt;</p>
<p>Ячейка
заголовка таблицы имеет ширину всей таблицы; текст в данной ячейке имеет
атрибут BOLD и ALIGN=center.</p>
<p>Подпись:
&lt;CAPTION&gt;...&lt;/CAPTION&gt;</p>
<p>Данный
тэг описывает название таблицы (подпись). Тэг &lt;CAPTION&gt; должен присутствовать
внутри &lt;TABLE&gt;...&lt;/TABLE&gt;, но снаружи описания какой-либо строки
или ячейки. По умолчанию &lt;CAPTION&gt; имеет атрибут ALIGN=top, но может быть
явно установлен в ALIGN=bottom. ALIGN определяет, где - сверху или снизу
таблицы - будет поставлена подпись. Подпись всегда центрирована в рамках ширины
таблицы.</p>
<h3>Основные
атрибуты таблицы</h3>
<p>BORDER</p>
<p>Данный
атрибут используется в тэге TABLE. Если данный атрибут присутствует, граница
таблицы прорисовывается для всех ячеек и для таблицы вцелом. BORDER может
принимать числовое значение, определяющее ширину границы, например BORDER=3.</p>
<p>ALIGN</p>
<p>Если
атрибут ALIGN присутствует внутри тэгов &lt;CAPTION&gt; и &lt;/CAPTION&gt;, то
он определяет положение подписи для таблицы (сверху или снизу). По умолчанию
ALIGN=top.</p>
<p>Если
атрибут ALIGN встречается внутри &lt;TR&gt;, &lt;TH&gt; или &lt;TD&gt;, он
управляет положением данных в ячейках по горизонтали. Может принимать значения
left (слева), right (справа) или center (по центру).</p>
<p>VALIGN</p>
<p>Данный
атрибут встречается внутри тэгов &lt;TR&gt;, &lt;TH&gt; и &lt;TD&gt;. Он
определяет вертикальное размещение данных в ячейках. Может принимать значения
top (вверху), bottom (внизу), middle (по середине) и baseline (все ячейки
строки прижаты кверху).</p>
<p>NOWRAP</p>
<p>Данный
атрибут говорит о том, что данные в ячейке не могут логически разбиваться на
несколько строк и должны быть представлены одной строкой.</p>
<p>COLSPAN</p>
<p>Указывает,
какое количество ячеек будет объединено по горизонтали для указанной ячейки. По
умолчании - 1.</p>
<p>ROWSPAN</p>
<p>Указывает,
какое количество ячеек будет объединено по вертикали для указанной ячейки. По
умолчании - 1.</p>
<p>COLSPEC</p>
<p>Данный
параметр позволяет задавать фиксированную ширину колонок либо в символах, либо
в процентах, например COLSPEC=&quot;20%&quot;.</p>
<p>На данный момент в Web
используется два типа растровых файлов: в форматах JPEG и GIF.</p>
</td>
    <IDXSKIP><td width="162" valign="top" title="рефераты"><noindex>

<!-- google_ad_client = "ca-pub-1757152072818693";-->

<!-- 160Advertstart -->
<script type="text/javascript" src="//ddnk.advertur.ru/v1/code.js?id=62370"></script>
<!-- end -->


<!-- SAPJS -->
<script
    async="async"
    src="//cdn-rtb.sape.ru/rtb-b/js/532/2/3532.js"
    type="text/javascript">
</script>
<!-- END -->
<!-- SAP160x600 -->
<div id="SRTB_8533"></div>
<!-- END -->



</noindex>
    
<br>





</td></IDXSKIP>
  </tr>
    <tr title="рефераты">
    <td height="74" colspan="3" align="center" class="hhhh" title="рефераты">	<noindex><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='http://www.liveinternet.ru/click' "+
"target=_blank><img src='//counter.yadro.ru/hit?t18.1;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='рефераты' title='LiveInternet: показано число просмотров за 24"+
" часа, посетителей за 24 часа и за сегодня' "+
"border='0' width='88' height='31'><\/a>")
//--></script><!--/LiveInternet-->
</noindex>
		
	  <IDXSKIP>© 2012 Рефераты, курсовые и дипломные работы.<br></IDXSKIP> </td>
  </tr>
</table>



</body>
</html>


