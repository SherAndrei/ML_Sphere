zav.ansya.ru/health/programmirovanie-v-srede-delphi--1/pg-1.html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!--[if IE 8 ]> <!-->
	<html xmlns="http://www.w3.org/1999/xhtml" class="ie8">
<!--<![endif]-->
<!--[if (gt IE 8)|!(IE)]><!--> <html xmlns="http://www.w3.org/1999/xhtml"> <!--<![endif]-->

<head>
	
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
	<title>Программирование в среде Delphi § 1</title>

	<link rel="stylesheet" type="text/css" href="/cue/css/qg.css" media="all"/>
	<!--[if lt IE 8]><link rel="stylesheet" href="cue/css/qg-ie.css" type="text/css" media="all" /><![endif]-->
    
	 <link href="/style.css" media="all" rel="stylesheet" type="text/css"/>
	<link href="/css/layout-small.css" media="all" rel="stylesheet" type="text/css"/>
	<link href="/css/layout-medium.css" media="only all and (min-width: 43em) and (max-width: 65em)" rel="stylesheet" type="text/css"/>
	<link href="/css/layout-large.css" media="only all and (min-width: 65em)" rel="stylesheet" type="text/css"/>
    <link media="all" href="/component-news.css" type="text/css" rel="stylesheet" /> 
	<link rel="stylesheet" type="text/css" href="/cue/css/qg-video.css" media="all" />
	<!--[if lt IE 8]><link rel="stylesheet" href="cue/css/qg-video-ie.css" type="text/css" media="all" /><![endif]-->


	<!-- <link rel="shortcut icon" href="http://www.zav.ansya.ru/favicon.ico"/> -->

	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js"></script>
	<script type="text/javascript">var $j = $ = jQuery.noConflict();</script>

	
	<!--[if lt IE 9]>
    	<script type="text/javascript" src="cue/js/ie-layout.js"></script>
    <![endif]-->
	
</head>

<body id="qld-gov-au">
	

	<IDXSKIP><div id="header">
		<div class="box-sizing">
			<div class="max-width">
		<a href="/">zav.ansya.ru</a>
		
		
		
        
	</div></div></div></IDXSKIP>
	


<div id="page-container">		
	<div class="max-width">
		<div id="nav-section">
			<div class="box-sizing"> 
				<div class="sideNav">
<h2 style="height:30px!important;color:#fff;">Похожие</h2>
<br /><IDXSKIP><b>Смотрите также:</b></IDXSKIP><br />
<a href="/health/programmirovanie-v-srede-delphi--1/main.html"><div class="text2">Программирование в среде Delphi § 1</a><br /><small></small>
794.9kb. 2 стр.

</div><br /> 
<a href="/health/e-v-sannikov-kurs-prakticheskogo-programmirovaniya-v-delphi-ob/main.html"><div class="text2">Е. В. Санников курс практического программирования в delphi. Объектно – ориентированное программирование. Практикум</a><br /><small></small>
430.29kb. 2 стр.

</div><br /> 
<a href="/health/programmirovanie-v-delphi/main.html"><div class="text2">Программирование в Delphi</a><br /><small></small>
509.37kb. 7 стр.

</div><br /> <br /><iframe width="200px" height="920px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" src="http://lib.znate.ru/view.php?a=3&si=zav.ansya.ru&page=%2Fhealth%2Fprogrammirovanie-v-srede-delphi--1%2Fpg-1.html"></iframe>
				</div>
			</div> 
			<div class="nav-section-bottom">
				<div class="corner"></div>
			</div>
		</div>
		
		<div id="content-container">	
            
            
            <div id="content">
				<div class="article first-article">  
					<div class="box-sizing onecol">
						<h1>Программирование в среде Delphi § 1</h1>
						<div class="page-options" id="pre-page-options"></div>
						<div class="section" id="section-introduction">
							<IDXSKIP><span class="text5 text6">ч. 1</span></IDXSKIP> <a href="/health/programmirovanie-v-srede-delphi--1/pg-2.html"><span class="text5">ч. 2</span></a> <br /><iframe style="float:left;margin:5px;margin-top:60px;" width="326px" height="260px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" src="http://lib.znate.ru/view.php?a=1&si=zav.ansya.ru&page=%2Fhealth%2Fprogrammirovanie-v-srede-delphi--1%2Fpg-1.html"></iframe><br /><b>Глава 6. Программирование в среде Delphi</b>
<br /><b>§ 1 Введение</b>
<br />
<br /><u><b>Delphi</b></u> – среда разработки программ, ориентированных для работы в операционной системе Windows. В качестве языка программирования в Delphi используется Object Pascal, современная версия одного из наиболее распространённых алгоритмических языков Pascal. Object Pascal удачно сочетает широкие возможности с относительной простотой, что позволяет создавать Windows программы даже непрофессиональным программистам. 
<br /><b>§ 2 Работа со средой Delphi<u> </u></b> 
<p>В нашем случае входным языком является Object Pascal, используемый в среде Delphi. Пользователь имеет возможность открыть окно <i><b>проекта</b></i> Delphi либо при помощи главного меню, либо двойным щелчком мыши по соответствующей пиктограмме на рабочем столе Windows. </p>

<br />
<br /><img src="1.gif" align=left hspace=12>
<br />
<br />
<br /><img src="2.gif" align=left hspace=12>
<p>Рис.6-1
<br /></p>

<br />На рис.6-1 проиллюстрирован общий вид проекта Delphi. В верхней части экрана расположено главное окно, включающее строку меню, панель инструментов управления средой и строку визуальных компонентов, которые пользователь может вставлять в свою программу. Кроме того, имеются окно Инспектора объектов (Object inspector), окно формы (Form 1) и окно редактора кода (Unit1.pas), которое в начальный момент почти полностью закрыто окном формы. В пункте File основного меню содержатся команды создания, сохранения и изменения состава проекта. Edit – повторение и отмена команд, управление буфером обмена, выделение фрагментов текста и т.д. Порядок работы с указанными пунктами основного меню во многом аналогичен порядку работы с одноимёнными пунктами меню других приложений Windows. Порядок работы с остальными пунктами меню будет рассматриваться ниже по мере необходимости. Панель инструментов позволяет с минимальными затратами времени выполнить наиболее часто встречающиеся команды (создание нового окна, запуск программы, проверку программы по шагам и т.д.). Палитра компонентов используется для внесения визуальных компонентов (меток, кнопок, полей, полос прокрутки и т.д.) в формы разрабатываемых программ. Компоненты размещены на нескольких вкладках. Наиболее часто используемые компоненты находятся на вкладке Standard. Пользователь имеет возможность редактировать меню, панель инструментов и палитру компонентов, вставляя в них одни пункты и удаляя другие. 
<p>Исполняемая программа создаётся компилятором на основе проекта, набора файлов, содержащих исчерпывающую информацию об алгоритме выполнения программы и её интерфейсе. Файл проекта с расширением <i><b>*.dpr</b></i> связывает вместе все файлы, из которых состоит приложение. В каждом приложении может быть только один файл проекта. Изменение имён или положения файлов на диске, произведённое вне среды Delphi, может нарушить работоспособность программы. </p>

<p>Инспектор объектов, окно которого расположено в левой части экрана, позволяет устанавливать свойства объектов и назначать методы обработки событий во время разработки программы.
</p>
<p>Окно формы, расположенное справа от окна инспектора объектов, используется для размещения всех визуальных и невизуальных компонентов разрабатываемого приложения. В состав проекта может входить как одна, так и несколько форм. Изображение каждой формы хранится в виде файла с расширением <i><b>*.dfm</b></i>. Для каждой формы, включённой в проект, автоматически создаётся отдельный модуль, файл с текстом исходной программы. В проект могут быть включены также модули, не связанные непосредственно ни с одной из форм. Файлу каждого модуля, написанному на языке Object Pascal, по умолчанию присваивается имя <i><b>Unit</b></i> с соответствующим порядковым номером и расширением <i><b>*.pas</b></i>. Среда Delphi автоматически управляет файлами проектов. Поэтому пользователю не следует вносить изменения в эти файлы. Не следует также изменять описания объектов, типов, переменных и т.д., которые Delphi вносит в файлы форм и модулей.</p>

<br />
<br /><b>§ 3</b><span> </span><b>Особенности программ, работающих под управлением ОС Windows</b>
<br />
<br /><u><b>Программирование</b></u> – процесс создания программы, который может быть представлен как последовательность следующих шагов:
<br /><ol> <li>
<br />Определение требований к программе.
<br /><li>
<br />Разработка алгоритма решения задачи.
<br /><li>
<br />Написание команд.
<br /><li>
<br />Отладка.
<br /><li>
<br />Тестирование.
<br /></ol> 
<br />Определение требований к программе – описание исходных данных и формулирование требований к результату. Кроме того, описывается поведение программы в особых случаях. Например, требования к программе вычисления площади треугольника по трём сторонам с использованием формулы Герона могут быть сформулированы в следующим образом:
<br /><ol> <li>
<br />Исходными данными программы являются длины трёх сторон (a, b, c).
<br /><li>
<br />Исходные данные должны вводиться с клавиатуры в режиме диалога во время работы программы.
<br /><li>
<br />Выходные данные программы – значение площади треугольника.
<br /><li>
<br />Если треугольник с указанными длинами сторон не существует (например, не выполняется необходимое соотношение между длинами сторон a+b≤c), должно выводиться соответствующее сообщение.
<br /></ol> 
<br />При разработке программы, предназначенной для работы в Windows, требования к ней могут включать пункты о желаемом виде окон диалога программы. Поэтому даже простая программа на этапе проектирования обычно включает не один, как при работе под управлением МС ДОС, а несколько файлов. Набор файлов, из которых состоит создаваемая прикладная программа (приложение), называется <i><b>проектом</b></i><IDXSKIP>.
</IDXSKIP><p>На этапе разработки алгоритма программист должен определить последовательность действий, необходимых для получения результата, и в случае, если возможны различные варианты решения, выбрать оптимальный. Критерием оптимальности может быть скорость решения задачи, количество памяти и др. машинных ресурсов, необходимых для её решения и т.д. Разработанный алгоритм может быть представлен либо в виде описания последовательности операций, либо в виде блок-схемы.</p>

<p>Далее следует реализация алгоритма на выбранном алгоритмическом языке, в данном случае на Object Pascal .
</p>
<p>Написанная программа, как правило, не свободна от ошибок. Ошибки программиста могут быть разделены на две категории: <i><b>синтаксические</b></i> и <i><b>алгоритмические</b></i>. Синтаксические ошибки могут быть легко устранены с использованием отладчика, позволяющего производить трассировку программы, наблюдать значения переменных и т.д. Алгоритмические ошибки устранить значительно труднее.</p>

<p>Тестирование – проверка работы программы при различных наборах входных данных. Для случая программы расчёта площади треугольника по формуле Герона, очевидно, необходимо убедиться в правильности работы программы в случаях, когда возможно и когда невозможно построить треугольник со сторонами заданной длины.
</p>
<p>Алгоритм решения задачи о вычислении площади треугольника по трём сторонам должен включать следующие действия:</p>

<br /><ol> <li>
<br />Ввод исходных данных – длин сторон треугольника, измеренных одной и той же мерой, например, метрами.
<br /><li>
<br />Проверку возможности построения треугольника. Сумма длин любых двух его сторон должна быть больше длины третьей стороны.
<br /><li>
<br />Расчёт площади треугольника, если выполняются условия п2 или выдача сообщения об ошибке ввода исходных данных в противном случае. Таким образом, все последующие предписания следует выполнять только в случае, если построение треугольника возможно.
<br /><li>
<br />Вычисление величины полупериметра треугольника p=(a+b+c)/2.
<br /><li>
<br />Вычисление площади треугольника по формуле S=√(p*(p-a)*(p-b)*(p-c)) 
<br /></ol> 
<br />Если, как было отмечено выше, длины сторон измерены в метрах, площадь окажется выраженной в м<SUP>2</SUP>. В случае необходимости выразить площадь в других единицах, в расчётную формулу следует ввести соответствующий коэффициент. Если площадь должна быть выражена в га, то соответствующий коэффициент равен 10<IDXSKIP><SUP>-5</SUP></IDXSKIP>.
<p>Следующий этап решения задачи – преобразование алгоритма в программу на языке, «понятном» ПК. Алгоритмический язык понятен ПК лишь в том случае, если имеется программа перевода команд языка в последовательность команд машины. Такие программы называются трансляторами, а транслируемый алгоритмический язык – входным языком. Известны два типа трансляции машинных программ – интерпретация и компиляция. Компилирующие трансляторы обеспечивают более высокое быстродействие по сравнению с интерпретаторами. Поэтому интерпретаторы в настоящее время используются редко. Компилятор проверяет текст программы на отсутствие синтаксических ошибок и создаёт исполняемую программу – машинный код.</p>

<br />
<br />Вне зависимости от использованного алгоритмического языка, программирование под Windows является объектно-ориентированным. Объект – то, чем пользователь управляет с использованием программы. Один объект может находиться внутри другого, например, метка или управляющая кнопка входит в состав формы. Каждый объект обладает некоторыми характеристиками, свойствами. Объект имеет имя (свойство <i><b>name</b></i>), которое пользователь указывает при обращении, заголовок (свойство <i><b>caption</b></i>), расположенный на его изображении. Изменяя значения свойства <i><b>visible</b></i>, пользователь может показывать или не показывать объект на экране. Каждый объект имеет определённый набор свойств. В среде Delphi изменение значений свойств выделенного объекта осуществляется с использованием вкладки <i><b>properties </b></i>инспектора объектов. Команды, с использованием которых свойства объекта в процессе выполнения программы могут быть изменены, называются методами объекта. Самым важным объектом является <i><b>окно</b></i>. Окно первым появляется после запуска любого приложения и последним исчезает после прекращения работы. Общение с окном возможно при помощи сообщений. Windows при помощи сообщения посылает информацию окну приложения о некотором событии, вследствие которого изменились параметры окружающей приложение среды. Окно реагирует на событие в соответствии с программой, составленной пользователем. В среде Delphi перечень событий, связанных с тем или иным объектом, содержится на вкладке <i><b>events</b></i><i> </i>инспектора объектов. Программирование в среде Delphi, работающей под управлением Windows, связано, как правило, с разработкой процедур обработки событий. Задачу организации взаимодействия между отдельными процедурами берёт на себя среда Delphi. Процесс создания приложения, в состав которого входят окно формы, окно редактирования и управляющая кнопка рассмотрим на примере программы, которая после щелчка мышью по кнопке возвращает в окне редактирования слово «Привет, друг!». Для этого надо произвести следующие действия: в окно формы, появляющейся на экране при открытии Delphi вставить два визуальных элемента и написать программу, управляющую реакцией этого окна на событие – щелчок мышью по кнопке (<i><b>click</b></i>).
<br /><ol> <li>
<br />Изменение заголовка окна формы (изменение заголовков других окон или надписей на других компонентах производится при помощи тех же самых действий).
<br /><ol> <li>
<br />В левой части окна инспектора объектов на вкладке <i><b>properties</b></i><i> </i>найти свойство <i><b>caption</b></i>. 
<br /><li>
<br />В правой части вкладки установить значение свойства «Приветствие». Следует отметить, что изменяется только надпись на заголовке окна, а имя окна (свойство <i><b>name</b></i>) остаётся без изменения.
<br /></ol> <li>
<br />Вставка окна редактирования <i><b>Edit1</b></i>.
<br /><ol> <li>
<br />Установить курсор мыши на кнопку <i><b>Edit</b></i> на палитре компонентов главного окна и щёлкнуть по ней левой клавишей.
<br /><li>
<br />Установить курсор мыши в ту точку формы, где должен находиться левый верхний угол поля, нажать левую клавишу.
<br /><li>
<br />Перетащить курсор в точку, где должен находиться правый нижний угол поля, и отпустить клавишу.
<br /></ol> <li>
<br />Вставка управляющей кнопки <i><b>Button1</b></i>.
<br /><ol> <li>
<br />Установить курсор мыши на кнопку <i><b>Button</b></i> на палитре компонентов главного окна и щёлкнуть по ней левой клавишей.
<br /><li>
<br />Установить курсор мыши в ту точку формы, где должен находиться левый верхний угол кнопки, нажать левую клавишу.
<br /><li>
<br />Перетащить курсор в точку, где должен находиться правый нижний угол кнопки, и отпустить клавишу. 
<br /><li>
<br />Установить на кнопке надпись «Привет», изменив значение свойства <i><b>caption</b></i>, подобно тому, как было изменено значение свойства <i><b>caption </b></i>исходной формы.
<br /></ol> <li>
<br />Корректировка положения и размера выбранного компонента.
<br /><ol> <li>
<br />Перемещение компонента – установить на изображение компонента курсор мыши, нажать левую клавишу и, не отпуская её, переместить курсор в нужное место формы.
<br /><li>
<br />Изменение размера компонента – выделить нужный компонент щелчком мыши, установить курсор на один из маркеров, нажать левую клавишу и переместить границу компонента в нужное положение.
<br /></ol> <li>
<br />Присоединение кода для события.
<br /><ol> <li>
<br />Дважды щёлкнуть мышью по кнопке, после чего станет активным окно редактора кода (модуль <i><b>Unit1</b></i>).
<br /><li>
<br />В окне инспектора объектов щёлкнуть мышью по вкладке и выбрать событие, реакцией на которое должно стать выполнение создаваемого кода. По умолчанию устанавливается событие <i><b>OnClick</b></i>, т.е. код будет выполняться после щелчка мышью по кнопке.
<br /><li>
<br />В окне редактора кода внутри пустой процедуры, созданной средой по умолчанию, между ключевыми словами <i><b>begin </b></i>и <i><b>end </b></i>ввести команду <i><b>Edit1.Text:=</b></i>’Привет, друг!’, которая должна изменить значение свойства <i><b>«Text»</b></i> окна редактирования <i><b>Edit1</b></i>. (Свойство <i><b>«name»</b></i> окна редактирования при изменении значения свойства <i><b>«Text»</b></i> остаётся неизменным).
<br /></ol> <li>
<br />Сохранение файлов проекта
<br /><ol> <li>
<br />Войти в меню <i><b>«File»</b></i> и в выпадающем меню второго уровня выбрать пункт <i><b>«Save Project As…».</b></i>
<br /><li>
<br />В появившемся окне диалога, вид которого аналогичен окнам сохранения документов в других приложениях Windows, указать адрес и имя папки, в куда необходимо поместить проект, например<i><b>, А:\ПРОЕКТЫ</b></i>, а затем установить имя файла модуля, например<i><b>, pr_1.pas</b></i> и щёлкнуть мышью по кнопке «Сохранить».
<br /><li>
<br />В следующем окне диалога указать имя файла проекта, например, <i><b>pr1.dpr</b></i> и щёлкнуть мышью по кнопке <i><b>«Сохранить».</b></i> (В обоих случаях п6.2 и п6.3 имена файлов должны быть различными и не должны содержать русских букв. Два одинаковых имени среда Delphi воспринимает как ошибку).
<br /></ol> <li>
<br />Компиляция проекта осуществляется с использованием команды <i><b>Project </b></i><i><b></b></i><i><b> Compile </b></i>или комбинации горячих клавиш <i><b>Control+F9</b></i>. После завершения компиляции перед началом каждой правильно написанной строки появится точка синего цвета. В противном случае среда выводит сообщение об ошибке и выделяет цветом строку, в которой обнаружена ошибка.
<br /><li>
<br />Т<span id="frame1" dir="ltr"> 
<br /><img src="3.png" align=bottom width="201px" height="165px" border=0>
<br />
<br /><b>Рис. 6-2 </b> 
<br />
<br /></span>естирование программы осуществляется с использованием команды <i><b>Run </b></i><i><b></b></i><i><b> Run,</b></i> нажатием клавиши <i><b>F9 </b></i>или щелчком по кнопке «►» на панели инструментов. Вид окна тестируемой программы после её выполнения проиллюстрирован на Рис. 6-2. 
<br /><li>
<br />Сохранение исполняемого файла программы осуществляется автоматически после запуска сохранённого проекта из среды Delphi. Исполняемый файл сохраняется в той же папке, в которой сохранён файл проекта. Имя исполняемого файла соответствует имени проекта, но с расширением <i><b>«ехе».</b></i>
<br /></ol> 
<br />Следует отметить, что информация в окнах редактирования всегда представляет собой последовательность символов или строку, даже, если каждый символ этой строки – цифра. Поэтому в процессе создания более сложных программ возникнет необходимость в преобразовании строк в числа и чисел в строки с использованием специальных функций языка Object Pascal. В некоторых случаях для вывода сообщений целесообразно использовать не окна редактирования, а метки (<i><b>Label</b></i>) путём изменения значения свойства <i><b>caption.</b></i> 
<br />
<br /><i><b>Задание:</b></i> Напишите программу диалога человек-машина. Программа должна создавать форму, озаглавленную «Диалог», выводить по требованию пользователя вопрос «Ты кто?» и ответ «Я компьютер с процессором Pentium» . Отчёт по данной работе должен включать перечень использованных визуальных компонентов, описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы, описание событий, изменяющих ход выполнения программы, распечатку процедуры обработки каждого из указанных событий. 
<br /><b>§ 4</b> <b>Реализация линейных алгоритмов на языке Object Pascal</b>
<p>Проиллюстрированная выше программа «Приветствие» даёт представление о структуре проекта в Delphi, методах работы с визуальными элементами управления и т.д. Однако, для выполнения сложных преобразований необходимо создавать программы на алгоритмическом языке Object Pascal, который имеет много общего, хотя и не полностью совпадает с распространённым в настоящее время языком программирования TurboPascal. </p>

<p>Текст программы - последовательность строк, состоящих из символов, образующих алфавит языка. Каждая строка завершается специальными управляющими символами, не входящими в алфавит. Алфавит языка включает
<br /><ol> <li>
<br />символы, используемые для составления идентификаторов и служебных слов. Это
<br /><ol> <li>
<br />заглавные и строчные латинские буквы и символ подчёркивания «_», который считается буквой;
<br /><li>
<br />арабские цифры <i><b>0,1,2...,9</b></i>;
<br /></ol> <li>
<br />специальные символы, используемые для конструирования знаков операций, выражений, комментариев, а также как синтаксические разделители<i><b>: +-*.=<>.,;:@’()[]{}#$^</b></i>
<br /><li>
<br />«неиспользуемые» символы - символы, имеющие ASCII коды от 128 до 255 (русские буквы, <i><b>!,%</b></i> и т.д.), которые могут использоваться только при создании комментариев и строковых констант;
<br /><li>
<br />зарезервированные слова, которые нельзя использовать в качестве вводимых в программу идентификаторов <i><b>(begin, end, program.....).</b></i> 
<br /></ol> 
<br /><i><b>Идентификаторы</b></i> (имена) вводятся для обозначения переменных, констант и ряда др. элементов программы. Идентификатор - последовательность букв и цифр, начинающаяся с буквы. Имеются стандартные идентификаторы, обозначающие предопределённые объекты. <i><b>Комментарии</b></i> - произвольная последовательность символов (включая русские буквы), заключённая в фигурные скобки <i><b>{ }.</b></i> Если непосредственно после открывающейся фигурной скобки следует символ <i><b>$</b></i>, а за ним одиночная латинская буква, такая структура определяет режим компиляции программы и называется <i><b>директивой компилятора</b></i>. Например, <i><b>{$AppType Console}</b></i> – переход в режим создания консольных приложений, т.е. программ, не имеющих графического интерфейса. 
<br /><b>§ 5 Общая структура программы</b>
</p>
<p>Правильная программа, написанная на каком-либо алгоритмическом языке, представляет собой формальную запись некоторого алгоритма и состо­ит из двух частей: описания последовательности <i><b>действий</b></i>, которые необходи­мо выполнить для решения поставленной задачи, и описания <i><b>данных</b></i>, с кото­рыми оперируют действия, причём описания данных предшествуют описаниям дей­ствий. Кроме того, программа, написанная на языке Pascal, имеет заголовок, рассматриваемый как ком­мен­та­рий, а заканчивается оператором <i><b>«END.»</b></i> </p>

<p>Объекты, вводимые посредством описаний и определений, имеют различную природу и могут быть разбиты на 5 классов:
<br /><ul> <li>
<br />Метки (<i><b>LABEL 4, 77, 90;</b></i>);
<br /><li>
<br />Константы (<i><b>CONST A=250;</b></i>);
<br /><li>
<br />Типы (<i><b>TYPE</b></i>
<br /></ul> 
<br /><i><b>YEAR=1900..2000;</b></i>
<br />
<br /><i><b>MONTH=(JAN,FAB,MAR,APR,MAY,JUN,JUL,AUG…..</b></i>);
<br /><ul> <li>
<br />Переменные (<i><b>VAR</b></i>
<br /></ul> 
<br /><i><b>I,J: INTEGER;</b></i>
<br />
<br /><i><b>L: REAL;</b></i>);
<br /><ul> <li>
<br />Процедуры и функции (Все используемые процедуры и функции пользователя должны быть объявлены до начала входа в основную программу).
<br /></ul> 
<br />Описание <i><b>меток</b></i> вводит совокупность идентификаторов и/или целых чисел, предназначенных для организации последовательности вычислений. Посредством меток можно указать те операторы, на которые будет передано управление из других точек программы.
</p>
<p>Определение <i><b>констант</b></i> задаёт идентификаторы, являющиеся синонимами некоторых значений.</p>

<p>Определение <i><b>типов</b></i> предназначено для задания конкретных множеств значений. Некоторые типы, называемые стандартными, не требуют описаний в программе пользователя.
</p>
<p>Описание <i><b>переменных</b></i> вводит совокупность данных, с которыми производятся действия. Переменная обозначается идентификатором (именем). С каждой переменной связывается её тип, определяющий множество допустимых значений и набор допустимых операций. </p>

<p>Описание <i><b>процедуры</b></i> или <i><b>функции</b></i> определяет часть программы как отдельную синтаксическую единицу и сопоставляет с ней имя. Впоследствии действия, сосредоточенные в процедуре, могут быть выполнены посредством указания имени этой процедуры. 
</p>
<p>Описания и определения объектов могут следовать в произвольном по­рядке. Необходимые для решения задачи действия описываются с использова­нием последовательности операторов, заключённой между служебными слова­ми <i><b>begin</b></i> и <i><b>end</b></i>. Оператор определяет конкретные действия или описывает характеристики и значения данных. Запись оператора обычно включает одно служебное слово, набор выражений, определяющих параметры оператора и набор <i><b>операндов</b></i>, т.е. констант и переменных, над которыми производятся преобразования. Совокупность описаний и определений и следующая за ней последовательность операторов называется <i><b>блоком</b></i>. </p>

<p>При программировании в среде Delphi пользователь, как правило, создаёт только процедуры обработки событий или подпрограммы. Многие описания при этом создаются автоматически в процессе введения в форму тех или иных визуальных элементов. Процедура имеет ту же структуру, что и программа - в начале процедуры имеется заголовок, затем следуют раздел описаний локальных объектов, т.е. объектов, определённых только внутри данной процедуры, и раздел операторов, завершающийся оператором <i><b>«END;»</b></i>. 
<br /><b>§ 6 Система типов языка Object Pascal</b>
</p>
<p>Object Pascal является языком строгой типизации. Это значит, что переменным, объявленным с некоторым конкретным типом, могут присваиваться значения только этого типа и, следовательно, выделяется необходимое количество памяти для их хранения и определены действия, выполняемые над ними. Количество стандартных типов Object Pascal больше, чем в TurboPascal, однако, между системами типов указанных языков нет противоречий. Кроме того, на основе стандартных типов пользователь имеет возможность создавать собственные типы. Для работы с числами используются две стандартных группы типов. Названия и характеристики некоторых числовых типов приведены в таблице 1.</p>

<p>Табл. 1
<br /><CENTER> <table width=528 cellpadding=7 cellspacing=0> <col width=126> <col width=136> <col width=63> <col width=145> <tr valign=top> <td width=126> 
<br />Тип
<br /></td> <td width=136> 
<br />Диапазон
<br /></td> <td width=63> 
<br />К-во цифр
<br /></td> <td width=145> 
<br />Формат, к-во байт
<br /></td> </tr> <tr> <td colspan=4 width=512 valign=top> 
<br />ЦЕЛЫЕ
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>shortint</b></i>
<br /></td> <td width=136> 
<br />-127…128
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Знаковый, 1
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>smallint</b></i>
<br /></td> <td width=136> 
<br />-32768…32767
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Знаковый, 2
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>integer</b></i>
<br /></td> <td width=136> 
<br />-32768…32767
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Знаковый, 2
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>longint</b></i>
<br /></td> <td width=136> 
<br />-2147483648…2147483647
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Знаковый, 4
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>byte</b></i>
<br /></td> <td width=136> 
<br />0…255
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Беззнаковый, 2
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>word</b></i>
<br /></td> <td width=136> 
<br />0…65535
<br /></td> <td width=63> 
<br />
<br />
<br /></td> <td width=145> 
<br />Беззнаковый, 4
<br /></td> </tr> <tr> <td colspan=4 width=512 valign=top> 
<br />ВЕЩЕСТВЕННЫЕ
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>real</b></i>
<br /></td> <td width=136> 
<br />2.9*10<SUP>-39 </SUP>…1.7*10<SUP>+38</SUP>
<br /></td> <td width=63> 
<br />11-12
<br /></td> <td width=145> 
<br />6
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>single</b></i>
<br /></td> <td width=136> 
<br />1.5*10<SUP>-45</SUP>…3.4*10<SUP>+38</SUP>
<br /></td> <td width=63> 
<br />7-8
<br /></td> <td width=145> 
<br />4
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>double</b></i>
<br /></td> <td width=136> 
<br />5*10<SUP>-324</SUP>… 1.7*10<SUP>+308</SUP>
<br /></td> <td width=63> 
<br />15-16
<br /></td> <td width=145> 
<br />8
<br /></td> </tr> <tr valign=top> <td width=126> 
<br /><i><b>extended</b></i>
<br /></td> <td width=136> 
<br />3.4*10<SUP>-4932</SUP>… 1.1*10<SUP>+4932</SUP>
<br /></td> <td width=63> 
<br />19-20
<br /></td> <td width=145> 
<br />10
<br /></td> </tr> </table> </CENTER> 
</p>
<p>Значения целых типов в программе могут изображаться двумя способами: в десятичном виде и в шестнадцатеричном виде. В последнем случае цифры старше 9 обозначаются латинскими буквами от <i><b>A</b></i> до <i><b>F</b></i>, а перед числом ставится знак <i><b>“$”</b></i>. Пример<i><b> $F1</b></i>  241.</p>

<p>Действительные числа могут быть представлены двумя формами записи:
<br /><ol> <li>
<br />17.384 или 0.5 – с фиксированной точкой;
<br /><li>
<br />
<br /></ol> 
<br />
<br /><img src="4.gif" align=left hspace=12>
<br /><ol start=3> <li>
<br />6Е-33.6<SUP>х</SUP>10<SUP>-3</SUP> – с плавающей точкой.
<br /></ol> 
<br />Синтаксическая диаграмма вещественного числа с фиксированной или плавающей точкой
<br />
<br /><span id="frame2" dir="ltr"> 
<br />В<img src="5.gif" align=left hspace=12>ЕЩЕСТВЕННОЕ ЧИСЛО
<br />П<img src="6.gif" align=left hspace=12>ОРЯДОК
<br /></span>
<br />
</p>
<p>Над целыми и вещественными значениями допустимы операции сравнения и следующие арифметические операции:</p>

<br /><ol> <li>
<br />4 арифметические действия, имеющие привычный смысл и обозначаемые следующими символами:
<br /><ol> <li>
<br /><i><b>+</b></i> сложение;
<br /><li>
<br /><i><b>-</b></i> вычитание;
<br /><li>
<br /><i><b>*</b></i> умножение;
<br /><li>
<br /><i><b>/ </b></i> деление;
<br /></ol> <li>
<br />две дополнительные операции «типа деления», обозначаемые служебными словами:
<br /><ol> <li>
<br /><i><b>div </b></i> деление нацело (с отбрасыванием дробной части);
<br /><li>
<br /><i><b>mod</b></i> взятие остатка от целочисленного деления.
<br /></ol> </ol> 
<br />При применении к целым значениям все перечисленные операции (кроме деления) дают целый результат. Если хотя бы один операнд вещественный, результат всех перечисленных операций (кроме целочисленного деления) вещественный. Для выражения присваивания некоторой величине заданного значения используется символ «<i><b>:=</b></i>». Например, <i><b>А:=5, В:=А, С:=А+В</b></i>.
<p>Язык программирования Object Pascal поддерживает три символьных типа <i><b>ansichar</b></i>, <i><b>widechar</b></i> и <i><b>char</b></i>. Типы <i><b>ansichar</b></i> и <i><b>char</b></i> используется для описания печатаемых и служебных символов, которые кодируются числами от 0 до 255. Символы типа <i><b>widechar</b></i> кодируются числами от 0 до 65535, причём первые 256 символов этого типа совпадают с символами <i><b>ansichar</b></i> и <i><b>char</b></i>.</p>

<p>Последовательности символов (символьные массивы), называемые строками, могут быть описаны с использованием какого-либо из трёх стандартных строковых типов <i><b>shortstring</b></i>, <i><b>longstring</b></i>, <i><b>widestring</b></i>. Тип <i><b>shortstring</b></i> представляет собой статически размещаемые в памяти компьютера строки длиной от 0 до 255 символов. Тип <i><b>longstring </b></i>представляет собой динамически размещаемые в памяти компьютера строки длина которых ограничена только объёмом свободной памяти. Тип <i><b>widestring </b></i>представляет собой динамически размещаемые в памяти компьютера строки длина которых ограничена только объёмом свободной памяти, однако, в отличие от строки типа <i><b>longstring</b></i> каждый символ кодируется 16 битами. Допускается для обозначения типа <i><b>shortstring</b></i> использование идентификатора <i><b>string</b></i>, который определён в языке TurboPascal. Для обозначения величин символьных и строковых типов используются символы или последовательности символов, заключённые между двух апострофов <i><b>(‘x’</b></i> – символ, <i><b>‘xyz’</b></i> - строка). Пустая строка обозначается следующим образом <i><b>‘’</b></i>. Если символ не имеет графического представления, его можно представить в виде решётки, за которой следует код нужного символа. Пример: <i><b>#7</b></i> - подача звукового сигнала. Переход к новому параграфу в Windows имеет код 13.
</p>
<p>Для символов и строк допускаются операции сравнения. Из двух сравниваемых символов большим считается тот, который имеет большее значение числового кода. Например, <i><b>‘1’<’2’; ‘5’>’4’; ‘a’<’b’; ‘d’>’c’</b></i>. При сравнении строк в языке Pascal действуют следующие правила:</p>

<br /><ol> <li>
<br />Более короткая строка всегда меньше более длинной.
<br /><li>
<br />Если длины сравниваемых строк равны, то происходит поэлементное сравнение символов этих строк слева направо по правилам сравнения символов.
<br /></ol> 
<br />Для строк, кроме того, допускается операция конкатенации, обозначаемая знаком «<i><b>+</b></i>». Смысл конкатенации заключается в формировании новой строки в виде строк-операндов, расположенных последовательно. В отличие от сложения чисел, порядок следования операндов влияет на результат конкатенации. Например, <i><b>‘город’ + ‘ Москва ’ </b></i><i><b></b></i><i><b> ‘город Москва’</b></i>, но <i><b>‘ Москва ’ + ‘город’ </b></i><i><b></b></i><i><b>‘Москва город’.</b></i>
<br />
<br /><i><b>Булевский</b></i> (логический) <i><b>тип</b></i>. В разделе описаний <i><b>X, Y, Z: boolean;</b></i>. Значения булевского типа (истина/ложь) обозначаются стандартными идентификаторами <i><b>true</b></i>(истина) и <i><b>false</b></i>(ложь) и занимают 1 байт памяти. Над значениями булевского типа допустимы операции сравнения, причём считается, что <i><b>true > false</b></i>. Кроме того, в Паскале имеются 4 стандартные логические операции, обозначаемые служебными словами: 
<br /><ul> <li>
<br /><i><b>Not (Not A = Ā;)</b></i>– логическое отрицание;
<br /><li>
<br /><i><b>And (A and B; ) </b></i>– логическое умножение (конъюнкция);
<br /><li>
<br /><i><b>Or (A or B;) </b></i>– логическое сложение (дизъюнкция);
<br /><li>
<br /><i><b>Xor (A xor B;)</b></i>- исключающее «или» (сложение по модулю 2).
<br /></ul> <CENTER> <table width=569 cellpadding=7 cellspacing=0> <col width=127> <col width=128> <col width=128> <col width=128> <TBODY> <tr valign=top> <td width=127> 
<br />Операция
<br /></td> <td width=128> <h4> A</h4> </td> <td width=128> <h4> B</h4> </td> <td width=128> 
<br />Результат
<br /></td> </tr> <tr></tr> <tr></tr> </TBODY> <TBODY> <tr> <td rowspan=2 width=127> 
<br /><i><b>Not A</b></i>
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> <td width=128 valign=top> 
<br />-
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> </tr> <tr valign=top> <td width=128> 
<br />0 (false)
<br /></td> <td width=128> 
<br />-
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> </tr> <tr></tr> <tr></tr> </TBODY> <TBODY> <tr> <td rowspan=4 width=127> 
<br /><i><b>A and B</b></i>
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> </tr> </TBODY> <TBODY> <tr valign=top> <td width=128> 
<br />0 (false)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> </tr> </TBODY> <TBODY> <tr valign=top> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />0 (false)
<br /></td> <td width=128> 
<br />0 (false)
<br /></td> </tr> </TBODY> <TBODY> <tr valign=top> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> </tr> <tr></tr> <tr></tr> </TBODY> <TBODY> <tr> <td rowspan=4 width=127> <h4>A or B</h4> </td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> </tr> <tr> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> </tr> <tr> <td width=128 valign=top> 
<br />1 (true)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> </tr> <tr> <td width=128 valign=top> 
<br />1 (true)
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> <td width=128 valign=top> 
<br />1 (true)
<br /></td> </tr> <tr></tr> <tr></tr> </TBODY> <TBODY> <tr> <td rowspan=4 width=127 height=12> 
<br /><i><b>A хor B</b></i>
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> <td width=128 valign=top> 
<br />0 (false)
<br /></td> </tr> <tr valign=top> <td width=128> 
<br />0 (false)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> </tr> <tr valign=top> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />0 (false)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> </tr> <tr valign=top> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />1 (true)
<br /></td> <td width=128> 
<br />0 (false)
<br /></td> </tr> </TBODY> </table> </CENTER> 
<p>Результатом каждой из логических операций является логическая величина. Для представления операций сравнения используются следующие символы:</p>

<br />
<br /><i><b>=</b></i> равно;
<br />
<br /><i><b>> </b></i> больше; 
<br />
<br /><i><b>< </b></i> меньше;
<br />
<br /><i><b>>=</b></i> больше или равно;
<br />
<br /><i><b><=</b></i> меньше или равно;
<br />
<br /><i><b><></b></i> не равно. 
<br />
<br /><i><b>Пример</b></i> <i><b>A<B+1; C<=’B’ X<>true</b></i>.
<p>В зависимости от типа используемых операций выражения могут быть арифметическими, логическими (булевскими), строковыми. Реальные выражения могут включать как арифметические операции, так и операции сравнения и логические операции<i><b>. Приоритеты</b></i> выполнения операций каждого типа следующие.</p>

<br />
<br /><i><b>Not</b></i>
<br />
<br /><i><b>* / Mod Div And</b></i>
<br />
<br /><i><b>+ - Or</b></i>
<br />
<br /><i><b>= < > <= >= <></b></i>
<p>Чем выше строка, тем выше приоритет операции. Операции, стоящие в одной строке, имеют одинаковый приоритет и выполняются в порядке следования. Для изменения «естественного» порядка выполнения операций используются круглые скобки ().</p>

<br />
<br /><i><b>Пример</b></i>. Имеются 3 числа <i><b>А, В, С</b></i>. Проверить, можно ли построить треугольник, длины сторон которого равны указанным числам. Условия существования треугольника имеют вид <i><b>A+B>C</b></i> и <i><b>A+C>B</b></i> и <i><b>C+B>A.</b></i> Логические выражения, отражающие этот факт, будут иметь вид:
<br /><ol> <li>
<br /><i><b>(A+B>C) AND (A+C>B) AND (C+B>A)</b></i>
<br /><li>
<br /><i><b>var A,B,C: real;</b></i>
<br /></ol> 
<br /><i><b>L1,L2,L3: boolean;</b></i>
<p>……………………
<br /></p>

<br /><i><b>L1:=A+B>C;</b></i>
<br />
<br /><i><b>L2:=A+C>B;</b></i>
<br />
<br /><i><b>L3:=B+C>A;</b></i>
<br />
<br /><i><b>L1 AND L2 AND L3;</b></i> {выражение равно <i><b>true</b></i> , все три условия выполнены, и <i><b>false</b></i>, если не выполнено хотя бы одно из них}
<p>……………………..</p>

<p>Выполнение операций в выражениях или операций сравнения требует, чтобы операнды имели <i><b>совместимые типы</b></i>. Типы совместимы, если выполняется хотя бы одно из следующих условий:
<br /><ul> <li>
<br />Два типа эквивалентны, т.е. имеют один и тот же идентификатор.
<br /><li>
<br />Оба типа являются либо целыми, либо вещественными.
<br /><li>
<br />Один тип является базовым типом второго или оба типа имеют один и тот же базовый тип.
<br /></ul> 
<br />Важный частный случай – совместимость типов двух величин, стоящих в левой и в правой частях оператора присваивания (совместимость по присваиванию). 
<br /><ul> <li>
<br />Оба типа совместимыми дискретными или вещественными типами, и значения левой части попадают в диапазон возможных значений типа левой части.
<br /><li>
<br />Тип левой части является вещественным, а тип правой части – целым.
<br /></ul> 
<br />Если в операторе присваивания не выполняется ни одно из перечисленных условий, то на этапе компиляции будет выдано сообщение об ошибке.
</p>
<p>Приведенная выше информация о системе типов языка Object Pascal, очевидно, не является исчерпывающей. Рассматривались только стандартные скалярные типы данных (за исключением строк), т.е. значения данных определяются единственной величиной. Однако, этой информации достаточно для описания переменных, которые будут использованы при решении простых задач на языке Object Pascal. </p>

<br />
<br /><i><b><span>Задание:</span></b></i> Получить у преподавателя 1-ю индивидуальную задачу и создать программу её решения. Ввод исходных данных и вывод результата выполнить с использованием окон ввода и окон редактирования.
<p>Отчёт по данной работе должен включать перечень использованных визуальных компонентов, описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы, описание событий, изменяющих ход выполнения программы, описание использованных в программе констант и переменных (указать их типы и диапазоны изменения), распечатку процедуры обработки каждого из указанных событий. </p>

<br /><b>§ 7 Стандартные функции языка Object Pascal для работы с числовыми и символьными типами</b>
<p>Для выполнения часто встречающихся вычислений и преобразований используются стандартные функции. Названия и смысл некоторых стандартных арифметических функций приведены в таблице 2.</p>

<br />Табл. 2
<br /><DL> <DD> <table width=569 cellpadding=7 cellspacing=0> <col width=269> <col width=270> <tr valign=top> <td width=269> 
<br />Название функции
<br /></td> <td width=270> 
<br />Возвращаемое значение
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Abs(n)</b></i>
<br /></td> <td width=270> 
<br />Абсолютное значение n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Sqrt(n)</b></i>
<br /></td> <td width=270> 
<br />Квадратный корень n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Sqr(n)</b></i>
<br /></td> <td width=270> 
<br />Квадрат n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Sin(n)</b></i>
<br /></td> <td width=270> 
<br />Синус n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Cos(n)</b></i>
<br /></td> <td width=270> 
<br />Косинус n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Arctan(n)</b></i>
<br /></td> <td width=270> 
<br />Арктангенс n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Exp(n)</b></i>
<br /></td> <td width=270> 
<br />Экспонента n
<br /></td> </tr> <tr valign=top> <td width=269> 
<br /><i><b>Ln(n)</b></i>
<br /></td> <td width=270> 
<br />Натуральный логарифм n
<br /></td> </tr> </table> </DL> 
<br />При выполнении операций, связанных с вводом и выводом информации, часто приходится выполнять преобразования типа информации, например, преобразовывать данные числовых типов в строки и наоборот. Часто при решении расчётных задач возникает необходимость преобразовать число одного из вещественных типов в целое число, округлив его или выделив целую часть. Для решения подобных задач в языке Object Pascal имеются стандартные функции преобразования типов. Некоторые из них приведены в таблице №3.
<p>Табл. 3.
<br /><CENTER> <table width=565 cellpadding=7 cellspacing=0> <col width=143> <col width=392> <tr valign=top> <td width=143> </p>

<br />Функция 
<br /></td> <td width=392> 
<br />Значение
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>Chr(n)</b></i>
<br /></td> <td width=392> 
<br />Символ с номером n.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>IntToStr(n)</b></i>
<br /></td> <td width=392> 
<br />Строка, являющаяся изображением значения целого n.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>FloatToStr(n)</b></i>
<br /></td> <td rowspan=2 width=392> 
<br />Строка, являющаяся изображением значения вещественного n. Различие между функциями описано ниже.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>FloatToStrF(n,f,l,m)</b></i>
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>StrToInt(s)</b></i>
<br /></td> <td width=392> 
<br />Целое, изображением является строка s.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>StrToFloat(s)</b></i>
<br /></td> <td width=392> 
<br />Вещественное, изображаумое строкой s.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>Round(n)</b></i>
<br /></td> <td width=392> 
<br />Целое, ближайшее к n. Результат целый.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>Trunc(n)</b></i>
<br /></td> <td width=392> 
<br />Целая часть от n. Результат целый.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>Frac(n)</b></i>
<br /></td> <td width=392> 
<br />Дробная часть вещественного n.
<br /></td> </tr> <tr valign=top> <td width=143> 
<br /><i><b>Int(n)</b></i>
<br /></td> <td width=392> 
<br />Целая часть вещественного n. Результат вещественный.
<br /></td> </tr> </table> </CENTER> 
<br />Функция <i><b>FloatToStrF(n,f,l,m)</b></i> обеспечивает возможность форматного вывода вещественных чисел. Её аргументы имеют следующий смысл:
<br />
<br /><i><b>n</b></i> - преобразуемое значение;
<br />
<br /><i><b>f</b></i> - формат (способ изображения);
<br />
<br /><i><b>l </b></i>- точность (общее количество цифр);
<br />
<br /><i><b>m</b></i> - количество цифр после десятичной точки.
<p>Поле «формат» может принимать следующие значения</p>

<br />
<br /><i><u><b>ffGeneral </b></u></i> Общий числовой формат. Значение преобразовывается в изображение десятичного числа либо с фиксированной точкой, либо записанного в научном формате. Лишние нули удаляются из результирующей строки, и в случае необходимости вставляется десятичная точка. Запись числа с фиксированной точкой используется, если количество цифр в числе не превышает общее количество цифр, заданное пользователем, а само число не меньше 0.00001. В противном случае используется научный формат.
<br />
<br /><i><u><b>ffExponent</b></u></i> Научный формат. Число преобразовывается в строку вида <i><b>"-d.ddd...E+dddd"</b></i>. Если число отрицательное, строка начинается знаком минус. Количество цифр в показателе экспоненты от 0 до 4. 
<br />
<br /><i><u><b>ffFixed</b></u></i> Формат с фиксированной точкой. Число преобразуется в строку вида: <i><b>"-ddd.ddd..."</b></i>. Если число отрицательное, строка начинается знаком минус. Количество цифр после десятичной точки не более 18. Если количество цифр превышает величину, указанную пользователем, изображение числа преобразуется в научный формат.
<br />
<br /><i><u><b>ffNumber</b></u></i> Числовой формат возвращает строку в виде <i><b>"-d,ddd,ddd.ddd..."</b></i>. Он отличается от формата с фиксированной точкой только разделителями групп разрядов.
<br />
<br /><i><u><b>ffCurrency</b></u></i> Денежный формат. Преобразует результат и представляет его в виде суммы денег.
<p>Функции обычно используются в качестве операндов выражений. Например, для расчёта площади треугольника по формуле Герона можно использовать следующие выражения: <i><b>p:=(a+b+c)/2; </b></i>{величина полупериметра} <i><b>S</b></i><i><b>:=</b></i><i><b>sqrt</b></i><i><b>(</b></i><i><b>p</b></i><i><b>*(</b></i><i><b>p</b></i><i><b>-</b></i><i><b>a</b></i><i><b>)*(</b></i><i><b>p</b></i><i><b>-</b></i><i><b>b</b></i><i><b>)*(</b></i><i><b>p</b></i><i><b>-</b></i><i><b>c</b></i><i><b>));</b></i>{площадь тр-ка}</p>

<p>При использовании функций важно, чтобы тип выражения, используемого в качестве параметра, соответствовал или мог быть преобразован к типу, указанному в описании функции.
</p>
<p>Кроме того, пакет Delphi включает модуль <i><b>Math</b></i>, содержащий большое количество часто используемых функций, не включённых в набор функций языка Паскаль, а также компонент <i><b>F</b></i><i><b>1</b></i><i><b>Book</b></i>, позволяющий использовать среду Delphi в качестве процессора электронных таблиц и организовать обмен информацией между Delphi и Excel. Для использования модуля <i><b>Math</b></i> его название следует внести в раздел <i><b>uses</b></i> основного модуля программы. Процесс установки компонента в форму не отличается от процесса установки остальных компонентов.</p>

<br /><b>§ 8 Ввод и вывод данных</b>
<p>Программа может получать исходные данные и выводить результаты с использованием окон или полей ввода и вывода, окон диалога или из файла. Кроме того, вывод данных может быть осуществлён на принтер.</p>

<p>Ввод данных из <b>окна ввода</b> осуществляется с использованием функции <i><b>InputBox</b></i>, возвращаемым значением которой является строка, введённая пользователем. Выражение для ввода должно быть записано следующим образом:
<br />
<br /><i><b>Переменная:= InputBox (Заголовок, Подсказка, Значение)</b></i>;
</p>
<p>Где
<br /></p>

<br /><i><b>Переменная</b></i> – имя переменной строкового типа, значение которой должно быть получено из окна ввода.
<br />
<br /><i><b>Заголовок</b></i> – текст заголовка окна ввода.
<br />
<br /><i><b>Подсказка</b></i> – текст поясняющего сообщения.
<br />
<br /><i><b>Значение</b></i> – текст, находящийся в поле ввода в момент появления окна ввода на экране.
<p>Вывод результата через <b>окно сообщения</b> осуществляется либо с использованием процедуры <i><b>ShowMessage</b></i>, либо функции <i><b>MessageDlg</b></i>. В общем виде вызов процедуры <i><b>ShowMessage</b></i> имеет следующий вид: <i><b>ShowMessage</b></i> <i><b>(Сообщение)</b></i> . Здесь <i><b>Сообщение</b></i> – любая величина строкового типа. Процедура <i><b>MessageDlg</b></i> позволяет наряду с сообщением вводить в окно сообщения подсказку, кнопки, справку. Более подробно использование этой функции будет рассматриваться ниже. Фрагмент программы, включающий ввод длины одной из сторон треугольника, и вывод сообщения имеет вид.</p>

<br />
<br /><i><b>var a:string;</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>a:=InputBox('Расчёт площади','Введите длину стороны А в метрах','');</b></i>
<br />
<br /><i><b>ShowMessage('Длина стороны А равна'+ #13 + a + ' метров');</b></i>
<br />
<br /><i><b>end;</b></i> 
<p>Окна ввода и вывода информации имеют вид:</p>

<p>Рис.6-3
<p>Ч<span id="frame3" dir="ltr"> </p>

<br /><img src="7.gif" align=bottom width="278px" height="158px" border=0><img src="8.png" align=bottom width="154px" height="114px" border=0>
<br /></span>ерез окно ввода или окно сообщения можно вывести только одно сообщение. Заголовок окна сообщения – название проекта, под которым он сохранён в памяти ПК. Окна ввода и окна сообщений удобно использовать при необходимости ввести или вывести одно данное. Если же, как, например, в случае расчёта площади треугольника, необходимо ввести несколько данных, удобнее использовать <b>окна диалога</b>, аналогичные окну программы «Приветствие», процесс создания которой рассматривался выше. Для создания заголовка окна, изменяем свойство <i><b>caption</b></i> исходной формы и присваиваем ему значение «Площадь треугольника». В верхней части окна создаём метку (элемент <i><b>Label1</b></i>) и, изменяя её свойство <i><b>caption</b></i>, создаём надпись «Треугольник задаётся длинами трёх сторон». Затем вводим в форму 3 окна редактирования (элементы <i><b>Edit1-3</b></i>). Поля редактирования предназначены для ввода длин сторон треугольника. Поэтому над с использованием меток (элементы <i><b>Label2-4</b></i>) создаём поясняющие надписи «Сторона А», «Сторона В», «Сторона С». В нижней части формы создаём 3 кнопки «Вычислить», «Новый», «Завершить». Процессы создания кнопок не отличается от процесса создания кнопки в окне программы «Приветствие». Очевидно, в окна редактирования следует ввести значения длин сторон. Щелчок мышью по кнопке «Вычислить» должен сопровождаться вычислением площади треугольника. Кнопка «Новый» используется для ввода новых данных. Кнопка «Завершить» закрывает окно диалога. Следует иметь в виду, что информация, внесенная в поля редактирования, имеет строковый тип даже, если она состоит только из цифр. Поэтому перед выполнением расчётов её необходимо преобразовать в числа с использованием функций <i><b>StrToInt </b></i>или <i><b>StrToFloat</b></i>. Например, <i><b>а1:= StrToFloat(а)</b></i>. Здесь <i><b>а1</b></i> – вещественное число, <i><b>а</b></i> – строка цифр с десятичным разделителем. Фрагмент программы расчёта площади имеет вид: 
<br />
<br /><i><b>var</b></i>
<br />
<br /><i><b>a,b,c:integer;</b></i>
<br />
<br /><i><b>p,s:real;</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>a:=StrToInt(Edit1.Text);</b></i>
<br />
<br /><i><b>b:=StrToInt(Edit2.Text);</b></i>
<br />
<br /><i><b>c:=StrToInt(Edit3.Text);</b></i>
<br />
<br /><i><b>p:=(a+b+c)/2;</b></i>
<br />
<br /><i><b>s:=sqrt(p*(p-a)*(p-b)*(p-c));</b></i>
<br />
<br /><i><b>ShowMessage('ПЛОЩАДЬ ТРЕУГОЛЬНИКА РАВНА' + #13 + FloatToStr(s/10000)+' га')</b></i>
<br />
<br /><i><b>end;</b></i>
</p>
<p>Окна ввода и вывода информации приведены на рис. 6-4.</p>

<p>Р<span id="frame4" dir="ltr"> 
<br /><img src="9.png" align=bottom width="287px" height="160px" border=0><img src="10.png" align=bottom width="214px" height="113px" border=0>
<br /></span><BR CLEAR=LEFT>ис. 6-4. 
</p>
<p>Если пользователь желает ограничить количество десятичных знаков в окне сообщения, он имеет возможность использовать форматный вывод с использованием функции <i><b>FloatToStrF. FloatToStrF(s/10000,ffFixed,5,3) </b></i>выводит пятизначное число, содержащее 3 знака после запятой.<i> </i>В случае необходимости пользователь имеет возможность многократно повторять расчёт. Кнопка «Новый» очищает поля редактирования от ненужной информации, присваивая свойству «Text» каждого из полей значение «‘’».<i> </i>Щелчок мыши по кнопке «Завершить» сопровождается закрытием окна программы с использованием команды <i><b>Form1.Close</b></i>.</p>

<br />
<br /><u><b><span>Задание.</span></b></u> Получить у преподавателя 2-ю индивидуальную задачу и создать программу её решения. Ввод исходных данных и вывод результата выполнить с использованием окон ввода и окон редактирования.
<p>Отчёт по данной работе должен включать перечень использованных визуальных компонентов, описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы, описание событий, изменяющих ход выполнения программы, описание использованных в программе констант и переменных (указать их типы и диапазоны изменения) и стандартных функций, распечатку процедуры обработки каждого из указанных событий. </p>

<br /><b>§ 9 Реализация разветвляющихся алгоритмов </b> 
<br />
<br /><i>Реакция программы на ошибки ввода данных</i>
<p>Правильно составленная программа должна включать контроль ошибок ввода исходных данных и обеспечивать возможность повторения ввода. При расчёте треугольников одной из наиболее распространённых ошибок является нарушение соотношения между длинами сторон, обеспечивающего возможность построения треугольника. Это соотношение состоит в том, что сумма длин любых двух сторон должна быть больше длины третьей стороны. Следовательно, программа должна трижды проверить истинность указанного соотношения, определить количество ошибок ввода и имя неверно введённой величины, если таковая имеется, а также сообщить пользователю об ошибке и предложить повторить ввод. Иными словами, ход выполнения программы зависит от выполнения некоторого условия (правильно выбраны длины сторон треугольника или допущена ошибка). Управление последовательностью выполнения команд программы, а также преобразованием данных осуществляется с использованием операторов. <i><b>Операторы</b></i> – синтаксические конструкции, предназначенные как для записи алгоритмических действий по преобразованию данных, так для задания порядка выполнения других действий. Набор операторов языка Паскаль обеспечивает возможность наглядного и однозначного представления алгоритмов в стиле структурного программирования. Язык содержит следующие операторы:</p>

<br /><ol> <li>
<br />Оператор присваивания.
<br /><li>
<br />Оператор перехода.
<br /><li>
<br />Условный оператор.
<br /><li>
<br />Оператор варианта.
<br /><li>
<br />Операторы цикла:
<br /><ol> <li>
<br />с параметром;
<br /><li>
<br />с проверкой условия до начала выполнения операции (с предпроверкой);
<br /><li>
<br />с проверкой условия после завершения операции (с постпроверкой);
<br /></ol> <li>
<br />Оператор процедуры.
<br /><li>
<br />Составной оператор.
<br /><li>
<br />Пустой оператор.
<br /></ol> 
<br />Оператор присваивания рассматривался выше и применялся в программе расчёта площади треугольника. 
<p>Для выбора одного из двух возможных действий в зависимости от выполнения некоторого условия используются <i><b>условные операторы</b></i>. Синтаксическая диаграмма условного оператора имеет вид:</p>

<br />
<br /><img src="11.gif" align=left hspace=12>
<p>Сначала выполняется логическое выражение, стоящее после служебного слова <i><b>IF</b></i>. Его результат имеет булевский тип. Если он равен <i><b>TRUE</b></i>, то выполняется оператор, указанный после служебного слова <i><b>THEN</b></i>, если он равен <i><b>FALSE</b></i>, то выполняется оператор, стоящий после служебного слова <i><b>ELSE</b></i>. При отсутствии <i><b>ELSE</b></i> управление передаётся следующему оператору. Условный оператор может быть использован для решения целого ряда задач, например, для определения максимального или минимального из двух значений:<i><b> if X<Y then MAX:=Y else MAX:=X</b></i> или для организации подсчёта количества ошибок. Пусть <i><b>k</b></i> – количество ошибок.</p>

<br />
<br /><i><b>k:=0;</b></i> {Первоначально <i><b>k</b></i>=0}
<p>……… {Ввод исходных данных}</p>

<br />
<br /><i><b>if a+b<c then k:=1;</b></i>
<p>Таким образом, в случае ошибочного ввода данных величина <i><b>k</b></i> будет отличной от нуля. Очевидно, что количество ошибок при вводе длин сторон треугольника не может быть больше 1. Только одна из сторон может быть чересчур длинной. Если в случае ошибочного ввода следует выполнить несколько действий, напри­мер, определить количество ошибок и выделить ошибочно введённое значение, необходимо создать <i><b>составной оператор</b></i> – последовательность операторов, заключённую между служебными словами <i><b>begin…end</b></i>. Пусть требуется выделить ошибочно введённое значение, изменив цвет шрифта: </p>

<br />
<br /><i><b>if a+b<c then begin</b></i>
<br />
<br /><i><b>k:=k+1;</b></i>
<br />
<br /><i><b>Edit3.Font.Color:=clRed</b></i>
<br />
<br /><i><b>end;</b></i>
<p>Основной расчёт должен выполняться только в случае безошибочного ввода исходных данных, что также может быть организовано с помощью условного оператора.</p>

<br />
<br /><i><b>if k=0 then begin</b></i>
<p>…………… 
<br /></p>

<br /><i><b>end;</b></i>
<br />
<br /><i><b><span>Задание:</span></b></i> Получить у преподавателя 3-ю индивидуальную задачу и создать программу её решения. Ввод исходных данных и вывод результата выполнить с использованием описанных выше визуальных компонентов. В случае ошибки ввода программа должна предлагать пользователю произвести повторный ввод исходных данных.
<p>Отчёт по данной работе должен включать перечень использованных визуальных компонентов, описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы, описание событий, изменяющих ход выполнения программы, описание использованных в программе констант и переменных (указать их типы и диапазоны изменения) и стандартных функций, распечатку процедуры обработки каждого из указанных событий. </p>

<br /><b>§ 10 Использование массивов и циклов</b>
<br />
<br /><span>Существенным недостатком программы расчёта площади треугольника является многократное повторение одних и тех же действий, что усложняют программу и увеличивает вероятность ошибок. В частности, при вводе длин сторон треугольника трижды производится перевод строковой величины в целочисленную, в расчётной формуле трижды от величины полупериметра отнимается длина одной из сторон и т.д. Все перечисленные действия, конечно, необходимы, однако, форма записи может быть упрощена. Для обращения к большому количеству данных, имеющих один и тот же базовый тип, используются структурированные типы – массивы. Каждое значение величины структурированного типа состоит из фиксированного количества значений одного и того же базового типа. Например, каждый треугольник определяется длинами 3-х сторон, т.е. тремя элементами целого или вещественного типа. Поэтому все значения массива можно объединить некоторым групповым именем, а к каждому элементу массива обращаться, указав его имя и порядковый номер, называемый индексом. Следовательно, для корректного определения регулярного типа необходимо задать 2 характеристики: тип его элементов, а также количество и «способ нумерования» элементов. В языке </span><span>Object</span><span> </span><span>Pascal</span><span> определены две разновидности массивов: </span><b><i>статические</i></b><span> и </span><b><i>динамические</i></b><span>. Количество элементов статического массива должно быть известно перед компиляцией программы, а элементы массива хранятся в памяти в течение всего периода работы программы. Поэтому использование статических массивов часто сопряжено с нерациональным использованием ресурсов компьютера. Определение статического массива имеет следующий общий вид: </span> 
<br />
<br /><i><b>Type</b></i>
<br />
<br /><i><b> A=array[T1] of T2</b></i>
<br />
<br /><span>Где </span><b><i>array</i></b><span> и </span><b><i>of </i></b><span> - служебные слова ; </span><b><i>Т1</i></b><span> – тип индекса массива; </span><b><i>T2</i></b><span> – тип компонент. В качестве типа индекса может выступать любой перечислимый или интервальный тип, сформированный на основе какого-либо дискретного типа, кроме </span><b><i>LongInt</i></b><span>. В памяти машины массив не должен занимать более 64 кБт. Массив, представляющий собой последовательность целых чисел в количестве не более 20 (одномерный массив), может быть описан следующим образом: </span><b><i>M</i><i>1</i></b><span>: </span><b><i>Array[1..20] of integer</i></b><span> . Если элементами массива являются массивы(массив в виде матрицы), то для идентификации элемента необходимы два индекса – номер строки и номер столбца. В этом случае говорят, что массив двумерный. Для описания двумерного массива используется запись: </span><b><i>Matrix:Array[1..10,1..20] of integer</i></b><span>. Число индексов, т.е. размерность массива не ограничивается. Обращение к элементу одномерного массива </span><b><i>М1 </i></b><span>имеет вид </span><b><i>М1[5]</i></b><span>, а обращение к элементу двумерного массива -</span><b><i> Matrix[5,6]</i></b><span>, где указываются номер строки и номер столбца. Паскаль допускает единственно возможное действие над массивами – присваивание его в операторе присваивания </span><b><i>A:=B</i></b><span>. Каждый элемент массива считается переменной, и ему можно присвоить значение обычным способом. Особенности работы с динамическими массивами будут рассматриваться ниже.</span>
<p>В задаче о расчёте площади треугольника можно использовать два одномерных массива – массив строковых величин, вводимых пользователем в поля редактирования, и массив длин сторон треугольника. Эти массивы должны быть описаны следующим образом:<i> </i> </p>

<br />
<br /><i><b>A1: array[1..3] of string[5];</b></i>
<br />
<br /><i><b>A : array[1..3] of integer;</b></i>
<p>Каждый массив может содержать не более 3-х элементов. Строки, входящие в состав массива <i><b>А1</b></i>, содержат не более 5-ти символов. </p>

<p>В Object Pascal имеются 3 оператора для создания циклических конструкций.
</p>
<p>Оператор <i><b>цикла с параметром</b></i>.</p>

<br /><table width=650 cellpadding=7 cellspacing=0> <col width=324> <col width=298> <tr valign=top> <td width=324 height=230> 
<br /><span><img src="12.gif" align=left hspace=12></span><span><img src="13.gif" align=left hspace=12></span><span><img src="14.gif" align=left hspace=12></span> 
<br />Блок
<p>операторов</p>

<br /><span> <img src="14.gif" align=left hspace=12></span><span> <img src="15.gif" align=left hspace=12></span><span> <img src="16.gif" align=left hspace=12></span><span> <img src="17.gif" align=left hspace=12></span><span> <img src="18.gif" align=left hspace=12></span><span> <img src="19.gif" align=left hspace=12></span><span> <img src="20.gif" align=left hspace=12></span><span> <img src="21.gif" align=left hspace=12></span><u><b>Вход</b></u> 
<br />
<br /><span><img src="22.gif" align=left hspace=12></span>
<br />
<br /><u><b>Выход</b></u>
<br /></td> <td width=298> 
<br />Такие операторы используются, когда число повторений может быть определено заранее. Кроме того, они часто используются, когда требуется автоматически изменять значение некоторой величины в процессе итераций.
<br /></td> </tr> </table> 
<br />Данный вариант оператора цикла определяет:
<br /><ol> <li>
<br />Диапазон изменения значений управляющей переменной и число повторений оператора, содержащегося в теле цикла.
<br /><li>
<br />Направление изменения значения переменной (возрастание или убывание).
<br /><li>
<br />Собственно действия, выполняемые на каждой итерации (оператор тела цикла).
<br /></ol> 
<br />С<img src="23.gif" align=left hspace=12>интаксическая диаграмма оператора цикла с параметром имеет вид:
<br />
<p>Диапазон
<br /></p>

<br /><img src="24.gif" align=left hspace=12>
<p>П<img src="25.gif" align=left hspace=12>еременную называют параметром цикла или управляющим параметром. На использование управляющей переменной накладываются следующие ограничения:</p>

<br /><ol> <li>
<br />В качестве управляющей переменной должна использоваться простая переменная, описанная в текущем блоке.
<br /><li>
<br />Управляющая переменная должна иметь дискретный тип.
<br /><li>
<br />Начальные и конечные значения диапазона должны иметь тип, совместимый с типом управляющей переменной.
<br /><li>
<br />В теле цикла запрещается явное изменение значения управляющей переменной (например, оператором присваивания). 
<br /></ol> 
<br />Фрагмент программы выполнения цикла с параметром имеет следующий вид:
<br />
<br /><i><b>for i:=1 to n do</b></i>
<br />
<br /><i><b>begin</b></i>
<p>……… <i><b>{Тело цикла}</b></i></p>

<br />
<br /><i><b>end ;</b></i>
<br />
<br /><span>Здесь </span><b><i>i</i></b><span> – параметр цикла;</span>
<br />
<br /><b><i>n</i></b><span> - верхняя граница интервала изменения параметра цикла.</span>
<p>После нормального завершения цикла значение управляющей переменной становится неопределённым. При каждом последующем выполнении цикла управляющая переменная либо увеличивается, либо уменьшается на единицу. </p>

<p>При следующих условиях тело цикла не будет выполнено ни разу
<br /><ol> <li>
<br />Шаг = 1 и i<sub>2</sub><i<sub>1</sub>  
<br /><li>
<br />Шаг = -1 и i<sub>2</sub>>i<sub>1</sub>
<br /></ol> 
<br />Фрагмент программы расчёта площади треугольника с использованием операторов цикла приведен ниже
<br />
<br /><i><b>a1[1]:=Edit1.Text;</b></i>
<br />
<br /><i><b>a1[2]:=Edit2.Text;</b></i>
<br />
<br /><i><b>a1[3]:=Edit3.Text;</b></i>
<br />
<br /><span> </span><i><b><u>for i:=1 to 3 do </u><span>a[i]:=StrToInt(a1[i]);</span></b></i>
<br />
<br /><span> </span><u> <i><b>for i:=1 to 3 do</u></b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>b:=i+1;</b></i>
<br />
<br /><i><b>c:=i+2;</b></i>
<br />
<br /><i><b>if b>3 then b:=b-3;</b></i>
<br />
<br /><i><b>if c>3 then c:=c-3;</b></i>
<br />
<br /><i><b>if a[i]>(a[b]+a[c]) then</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>k:=1;</b></i>
<br />
<br /><i><b>if k<>0 then MessageDlg('Введено ошибочное значение длины '</b></i>
<br />
<br /><i><b>+#13+IntToStr(i)+'-й стороны',</b></i>
<br />
<br /><i><b>mtError,[mbRetry],0);</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>if k=0 then</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>p:=0;</b></i>
<br />
<br /><span> </span><u> <i><b>for i:=1 to 3 do</b></i></u><span><i><b> p:=p+a[i];</b></i></span>
<br />
<br /><i><b>p:=p/2;</b></i>
<br />
<br /><i><b>s1:=p;</b></i>
<br />
<br /><span> </span><i><b><u>for i:=1 to 3 do</u><span> s1:=s1*(p-a[i]);</span></b></i>
<br />
<br /><i><b>s:=sqrt(s1);</b></i>
<br />
<br /><i><b>ShowMessage('ПЛОЩАДЬ ФИГУРЫ РАВНА' + #13 + FloatToStrF(s/10000,ffFixed,5,3)+' га')</b></i>
<br />
<br /><i><b>end</b></i>
<br />
<br /><i><b>end;</b></i>
</p>
<p>Операторы цикла в приведенном фрагменте подчёркнуты. Чем большее количество раз требуется выполнить тот или иной оператор или блок операторов, тем больший положительный эффект достигается благодаря использованию оператора цикла. </p>

<br />
<br /><span>Во многих случаях нет необходимости выполнять все итерации внутри диапазона изменения параметра цикла, выполнение тела цикла может быть прекращено после выполнения какого-либо условия. В задаче о расчёте площади треугольника такая ситуация имеет место в процессе контроля правильности ввода исходных данных. Длина только одной стороны может превосходить сумму длин двух других сторон. Поэтому, если установлено, что </span><b><i>a[1]>a[2]+a[3]</i></b><span>, нет необходимости контролировать правильность ввода длин остальных сторон, и выполнение цикла может быть прекращено после первой же итерации. Следовательно, при каждом новом выполнении тела цикла должен решаться вопрос о переходе к новой итерации или о завершении цикла. Проверка выполнения условия продолжения цикла может осуществляться либо перед выполнением тела цикла (предпроверка условия), либо после выполнения тела цикла (постпроверка условия). В большинстве случаев возможны оба варианта.</span>
<br />
<br /><span>Д 
<br /><img src="26.gif" align=bottom width="726px" height="54px" border=0>
<br />ля решения задачи с предварительной проверкой условия используется оператор <b><i>While … Do</i></b> (до тех пор, пока). Синтаксическая диаграмма этого оператора имеет вид 
<br /><span>Блок-схема алгоритма оператора </span><b><i>While … Do</i></b><span>, следующая</span>
<br /><table width=568 cellpadding=7 cellspacing=0> <col width=270> <col width=270> <tr valign=top> <td width=270 height=194> 
<br /><span><img src="27.gif" align=left hspace=12></span> 
<br /><i><b>Блок операторов</b></i>
<br />  
<br /><i><b>Да</b></i>
<br />  
<br /><i><b>Нет</b></i>
<br /><span> <img src="14.gif" align=left hspace=12></span><span> <img src="28.gif" align=left hspace=12></span><span> <img src="29.gif" align=left hspace=12></span><span> <img src="30.gif" align=left hspace=12></span><span> <img src="31.gif" align=left hspace=12></span><span> <img src="32.gif" align=left hspace=12></span><span> <img src="33.gif" align=left hspace=12></span><span> <img src="34.gif" align=left hspace=12></span>Вход 
<br /><span><img src="35.gif" align=left hspace=12></span>
<br />
<p>Выход
<br /></td> <td width=270> </p>

<br />Проверка условия производится в на­чале работы оператора. Если условие не выполняется, повторение тела цикла прекращается, и выполняется сле­дующий оператор.
<br /></td> </tr> </table> 
<br />
<br /><span>Последний среди операторов цикла – оператор </span><b><i>с последующей проверкой условия</i> <i>Repeat … Until</i></b><i><span> </span></i><span>(до тех пор пока). Его синтаксическая диаграмма имеет вид</span>
<br />
<br /><img src="36.gif" align=left hspace=12>
<br />Блок-схема алгоритма, реализуемого этим оператором, следующая
<br /><table width=899 cellpadding=7 cellspacing=0> <col width=222> <col width=383> <col width=251> <tr valign=top> <td width=222 height=97> 
<br /><span><img src="37.gif" align=left hspace=12></span> 
<br />Блок операторов
<br />  
<br />Нет
<br /><span> <img src="14.gif" align=left hspace=12></span><span> <img src="21.gif" align=left hspace=12></span><span> <img src="38.gif" align=left hspace=12></span><span> <img src="39.gif" align=left hspace=12></span><span> <img src="34.gif" align=left hspace=12></span>Вход 
<br /> 
<br />Да
<br /><span> <img src="40.gif" align=left hspace=12></span>
<br />
<p>Выход
<br /></td> <td width=383> </p>

<br /><span>Отличия, от оператора </span><b><i>While…do</i></b><span> заключаются в том что</span>
<p>1 Проверка условия производится после выполнения цикла.</p>

<p>2 Повторение цикла имеет место лишь до тех пор, пока условие не выполняется. Выполнение условия сопровождается прекращением цикла. 
<br />
<br /></td> <td width=251> 
<br />
<br />
<br /></td> </tr> </table> 
<br />
<br /><span>3 Между служебными словами</span><i><span> </span></i><b><i>While … Do</i></b><i><span> </span></i><span>может находиться только один оператор, возможно, составной, а между словами </span><b><i>Repeat … Until</i></b><i><span> </span></i><span>может быть размещено несколько операторов.</span>
<br /><table width=568 cellpadding=7 cellspacing=0> <col width=270> <col width=270> <tr valign=top> <td width=270> 
<br /><i><b>i:=0;</b></i>
<br />
<br /><i><b>While i< 10 do</b></i>
<br />
<br /><i><b>Begin</b></i>
<br />
<br /><i><b>i:=i+1;</b></i>
</p>
<p>…………<i><b>.</b></i></p>

<br />
<br /><i><b>End;</b></i>
<br /></td> <td width=270> 
<br /><i><b>i:=0;</b></i>
<br />
<br /><i><b>Repeat</b></i>
<br />
<br /><i><b>I:=i+1;</b></i>
<p>…………<i><b>..</b></i></p>

<br />
<br /><i><b>until i>=10;</b></i>
<br /></td> </tr> </table> 
<p>Фрагмент программы, прекращающей выполнение цикла после выявления ошибки ввода длины одной из сторон треугольника, имеет следующий вид:</p>

<br />
<br /><i><b>i:=0;</b></i>
<br />
<br /><i><b><u>repeat</u></b></i>
<br />
<br /><i><b>i:=i+1;</b></i>
<br />
<br /><i><b>b:=i+1;</b></i>
<br />
<br /><i><b>c:=i+2;</b></i>
<br />
<br /><i><b>if b>3 then b:=b-3;</b></i>
<br />
<br /><i><b>if c>3 then c:=c-3;</b></i>
<br />
<br /><i><b>if a[i]>(a[b]+a[c]) then</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>k:=1;</b></i>
<br />
<br /><i><b>if k<>0 then MessageDlg('Введено ошибочное значение длины '</b></i>
<br />
<br /><i><b>+#13+IntToStr(i)+'-й стороны',</b></i>
<br />
<br /><i><b>mtError,[mbRetry],0);</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b><u>until (k<>0) or (i=3</u>);</b></i>
<p>Здесь проверка условия осуществляется после ввода значений длин сторон. Поэтому использован оператор <i><b>Repeat … Until </b></i>(подчёркнут)<i>.</i> Прекращение цикла имеет место либо, когда параметр цикла станет равным 3 (будут проверены все исходные данные), либо после выявления ошибки ввода. В подобных случаях возможна проверка условия перед выполнением следующей итерации с использованием оператора <i><b>While…do</b></i>. Кроме того, для вывода информации об ошибке использована процедура <i><b>MessageDlg</b></i>, имеющая 4 параметра. 1-й параметр –сообщение («Ошибка…..»); 2- параметр – тип стандартной эмблемы окна диалога (<i><b>mtWarning</b></i> - предупреждение, <i><b>mtError</b></i> - ошибка, <i><b>mtInformation</b></i> - информация, <i><b>mtConfirmation</b></i> подтверждение, <i><b>mtCustom </b></i>– сообщение пользователя); 3-й параметр – надпись на кнопке (<i><b>mrNone</b></i>, <i><b>mrAbort</b></i>, <i><b>mrYes</b></i>, <i><b>mrOk</b></i>, <i><b>mrRetry</b></i>, <i><b>mrNo</b></i>, <i><b>mrCancel</b></i>, <i><b>mrIgnore</b></i>, <i><b>mrAll</b></i>); 4-й параметр –комментарий.</p>

<br /><b>§ 11 Компонент <i>Memo</i> и его использование для ввода элементов массивов</b>
<p>Рассмотрим решение более сложной задачи, в которой расчёт площади треугольника является лишь одним из нескольких шагов алгоритма, одной из нескольких <i><b>процедур</b></i>. Пусть имеется многоугольник. Количество его вершин равно <i><b>(n+1)</b></i>, начиная с 0-й, кончая <i><b>n</b></i>-й. 0-я вершина совмещена с началом координат. Координаты остальных вершин известны. Требуется найти площадь многоугольника. </p>

<p> 
<br /><img src="41.gif" align=left hspace=12><span id="frame16" dir="ltr"> 
<br />Y
<br />  
<br />X
<br />  
<br />0
<br />  
<br />1
<br />  
<br />2
<br />  
<br />3
<br />  
<br />4
<br />  
<br />Рис.6-7
<br />
<br />
<br /></span>Для решения задачи соединим вершину, расположенную в начале координат, со всеми остальными вершинами и разобьём фигуру на <i><b>(n-1)</b></i> треугольников, как показано на рис. 6-7. Длина каждого отрезка (стороны или диагонали многоугольника) определяется координатами его начала и его конца: <i><b>√((Х</b></i><sub><i><b>н</b></i></sub><i><b>-Х</b></i><sub><i><b>к</b></i></sub><i><b>)</b></i><SUP><i><b>2</b></i></SUP><i><b>+(Y</b></i><sub><i><b>н</b></i></sub><i><b>-Y</b></i><sub><i><b>к</b></i></sub><i><b>)</b></i><SUP><i><b>2</b></i></SUP><i><b>)</b></i>. Исходные данные можно представить в виде двумерного массива (матрицы) значений, в каждой строке которого расположены две координаты одной точки, а в каждом столбце – однотипные координаты различных точек. Вершинами <i><b>i</b></i>-го треугольника являются 0-я, <i><b>i</b></i> -я и <i><b>(i +1)-</b></i>я точки. Следовательно, длины сторон <i><b>i</b></i>-го треугольника равны: 
<br />
<br /><i><b>A<sub>i1</sub>=√((Х<sub>i</sub>-Х<sub>0</sub>)<SUP>2</SUP>+(Y<sub>i</sub>-Y<sub>0</sub>)<SUP>2</SUP>);</b></i>
<br />
<br /><i><b>A<sub>i2</sub>=√((Х<sub>i+1</sub>-Х<sub>i</sub>)<SUP>2</SUP>+(Y<sub>i+1</sub>-Y<sub>i</sub>)<SUP>2</SUP>);</b></i>
<br />
<br /><i><b>A<sub>i3</sub>=√((Х<sub>i+1</sub>-Х<sub>0</sub>)<SUP>2</SUP>+(Y<sub>i+1</sub>-Y<sub>0</sub>)<SUP>2</SUP>).</b></i>
</p>
<p>Площадь треугольника <i><b>S</b></i><sub><i><b>i</b></i></sub> можно рассчитать по формуле Герона. Программа расчёта площади при известных длинах сторон описана выше. При переходе к следующему треугольнику расчёт повторяется. Расчётные формулы могут быть упрощены, если учесть, что <i><b>Х</b></i><sub><i><b>0</b></i></sub>= <i><b>Y</b></i><sub><i><b>0</b></i></sub>=0. Кроме того, <i><b>A</b></i><sub><i><b>i3</b></i></sub>= <i><b>A</b></i><sub><i><b>(i+1)1</b></i></sub>. Таким образом, для решения задачи необходимо объявить 3 массива:</p>

<br /><ol> <li>
<br />Двумерный массив координат точек <i><b>X[1:n,1:2]</b></i>.
<br /><li>
<br />Двумерный массив длин сторон треугольников <i><b>A[1:(n-1),1:3]</b></i>.
<br /><li>
<br />Одномерный массив площадей треугольников <i><b>S[1:(n-1)]</b></i>.
<br /></ol> 
<br />Алгоритм решения задачи реализуется с использованием операторов цикла. Ввод данных можно осуществить с использованием окон редактирования. Однако, при большом количестве вершин количество полей редактирования может превысить разумные пределы. Количество полей редактирования может быть уменьшено за счёт ввода нескольких данных в каждое поле. В таком случае необходимо производить расшифровку информации, содержащейся в поле редактирования, с использованием специальной программы. Поэтому для ввода информации целесообразно использовать новый компонент – <i><b>Memo</b></i>, который находится на вкладке стандартных визуальных компонентов и может быть установлен в форму точно также, как поля редактирования и кнопки, создание которых рассматривалось выше. Этот компонент может содержать несколько строк. Информация в них может быть внесена также как в поле редактирования и воспринимается как строка символов. Доступ к информации осуществляется либо через свойство <i><b>Text</b></i>, либо через свойство <i><b>Lines</b></i>. Свойство <i><b>Text</b></i> используется для доступа ко всей информации целиком, а свойство <i><b>Lines</b></i> – для построчного доступа. В последнем случае следует указать номер строки. Например, <i><b>Edit1.Text:=Memo1.Lines[1]</b></i> . Нумерация строк начинается с 0. На каждой строке должно находиться не более одного числа. В противном случае необходима программа преобразования строки в последовательность чисел. Ввод и редактирование данных осуществляется либо через компонент <i><b> Memo</b></i> , либо через редактор <i><b>String</b></i><i> </i><i><b>List</b></i><i> </i><i><b>Editor</b></i>, доступ к которому возможен через окно инспектора объектов. Для вызова <i><b>String</b></i><i> </i><i><b>List</b></i><i> </i><i><b>Editor</b></i> следует : 1) Выбрать свойство <i><b>Lines</b></i> компонента <i><b>Memo; </b></i>2) Щёлкнуть мышью по многоточию в правой части соответствующей строки в окне инспектора объектов. Если все данные не могут быть размещены в видимой части поля<i><b> Memo</b></i>, то пользователь с целью упрощения процедуры просмотра имеет возможность ввести одну или две полосы прокрутки, выбрав одно из возможных значений свойства <i><b>ScrollBars (ssVertical</b></i>, <i><b>ssHorizontal, ssBoth, ssNone)</b></i>, пользователь вводит вертикальную полосу прокрутки. При считывании информации, представленной в таком виде, необходимо использовать вложенные циклы, т.е. конструкцию в которой один оператор цикла находится внутри другого. Других новых конструкций языка программа не содержит. После считывания информации и преобразования строковых данных в числовые, производится расчёт длин сторон и диагоналей многоугольника по, приведенным выше, формулам. Далее следует расчёт площадей отдельных треугольников. Общая площадь фигуры равна сумме площадей составляющих. Ниже приведен фрагмент программы расчёта площади многоугольника по координатам его вершин.
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>n:= StrToInt(Edit1.Text);</b></i>
<br />
<br /><i><b>n:=n-1;</b></i>
<br />
<br /><i><b>m:=0;</b></i>
<br />
<br /><i><b>for i:=1 to n do</b></i>
<br />
<br /><i><b>for j:=1 to 2 do</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>m:=m+1;</b></i>
<br />
<br /><i><b>x[i,j]:=StrToInt(Memo1.Lines[m])</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>for i:=1 to (n-1) do</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>a[i,1]:=sqrt(sqr(x[i,1])+sqr(x[i,2]));</b></i>
<br />
<br /><i><b>a[i,2]:=sqrt(sqr(x[i,1]-x[i+1,1])+sqr(x[i,2]-x[i+1,2]));</b></i>
<br />
<br /><i><b>a[i,3]:=sqrt(sqr(x[i+1,1])+sqr(x[i+1,2]))</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>for i:=1 to n-1 do</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>p:=0;</b></i>
<br />
<br /><i><b>for j:=1 to 3 do p:=p+a[i,j];</b></i>
<br />
<br /><i><b>p:=p/2;</b></i>
<br />
<br /><i><b>s1:=p;</b></i>
<br />
<br /><i><b>for j:=1 to 3 do s1:=s1*(p-a[i,j]);</b></i>
<br />
<br /><i><b>s[i]:=sqrt(s1);</b></i>
<br />
<br /><i><b>{ShowMessage(FloatToStr(s[i]));}</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>Stot:=0;</b></i>
<br />
<br /><i><b>for i:=1 to n-1 do Stot:=Stot+s[i];</b></i>
<br />
<br /><i><b>ShowMessage('ПЛОЩАДЬ ФИГУРЫ РАВНА' + #13 + FloatToStrF(Stot/10000,ffFixed,5,3)+' га')</b></i>
<br />
<br /><i><b>end;</b></i>
<p>П 
<br />Рис. 8</p>

<br />ри расчёте площади фигуры по координатам её вершин, очевидно, нет необходимости контролировать правильность соотношения между длинами сторон образующих её треугольников. Поэтому элементы, связанные с таким контролем в данной программе отсутствуют.ид окна программы расчёта площади многоугольника приведен на рис.6-8. Результат выводится в окно сообщения, аналогичное окну, показанному на рис. 6-4. В поле компонента <i><b>Memo</b></i> введены координаты вершин квадрата, длина стороны которого равна 100 м. Если информация введена непосредственно в поле <i><b>Memo</b></i>, после закрытия окна формы она пропадает. Для длительного хранения информации её следует внести в процессе разработки формы с использованием редактора <i><b>String</b></i><i> </i><i><b>list</b></i><i> </i><i><b>editor</b></i>. Некоторые другие возможности использования компонента <i><b>Memo</b></i> будут рассмотрены ниже. 
<p> 
<br /><img src="42.png" align=bottom width="398px" height="287px" border=0></p>

<br />
<p>Рис. 6-8
<br /><b>§ 12 Использование таблицы для вывода двумерных массивов на экран</b></p>

<br />
<br />Задача о выводе на экран элементов двумерных массивов встречается достаточно часто и может быть решена различными способами. Одним из наиболее удобных способов является представление массива в виде таблицы. Для создания таблиц в среде Delphi используется стандартный визуальный компонент <i><b>StringGrid</b></i>, расположенный вкладке <i><b>Additional</b></i> (Дополнительные) палитры компонентов. Компонент <i><b>StringGrid</b></i> устанавливается в форму обычными методами. Заполнение таблицы обычно производят программными методами, изменяя свойства ячеек. Однако, если свойству <i><b>Options</b></i><i><b></b></i><i><b>goEditing</b></i> присвоить значение <i><b>true</b></i><i> </i>(по умолчанию это свойство имеет значение <i><b>false</b></i>), таблица превратится в набор полей редактирования, т.е. появится возможность вводить в таблицу данные с клавиатуры. В процессе работы наиболее часто приходится использовать следующие свойства компонента <i><b>StringGrid</b></i>:
<br /><table width=631 cellpadding=7 cellspacing=0> <col width=173> <col width=430> <tr valign=top> <td width=173> 
<br /><i><b>Name -</b></i>
<br /></td> <td width=430> 
<br />Имя, используемое в программе для доступа к свойствам компонента.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>ColCount -</b></i>
<br /></td> <td width=430> 
<br />Количество колонок (столбцов) таблицы.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>RowCount -</b></i>
<br /></td> <td width=430> 
<br />Количество строк таблицы.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>Cells -</b></i>
<br /></td> <td width=430> 
<br />Соответствующий таблице строковый массив. Ячейке, находящейся на пересечении <i><b>i</b></i>–й колонки (столбца) и <i><b>j</b></i>–й строки соответствует элемент массива <i><b>cells</b></i><i><b>[</b></i><i><b>i</b></i><i><b>,</b></i><i><b>j</b></i><i><b>]</b></i>. Нумерация строк и столбцов начинается с нуля.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>FixedCols -</b></i>
<br /></td> <td width=430> 
<br />Количество зафиксированных слева колонок (столбцов) таблицы. Зафиксированные колонки выделяются цветом и при горизонтальной прокрутке таблицы остаются на месте.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>FixedRows -</b></i>
<br /></td> <td width=430> 
<br />Количество зафиксированных сверху строк таблицы. Зафиксированные строки выделяются цветом и при вертикальной прокрутке таблицы остаются на месте.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>DefaultColWidth -</b></i>
<br /></td> <td width=430> 
<br />Ширина колонок таблицы.
<br /></td> </tr> <tr valign=top> <td width=173 height=8> 
<br /><i><b>DefaultRowHight-</b></i>
<br /></td> <td width=430> 
<br />Высота строк таблицы.
<br /></td> </tr> <tr valign=top> <td width=173> 
<br /><i><b>ScrollBars -</b></i>
<br /></td> <td width=430> 
<br />Вывод на экран и удаление с экрана горизонтальной и вертикальной полос прокрутки.
<br /></td> </tr> </table> 
<br />Значения свойств таблицы можно изменять как с использованием инспектора объектов, так и программными методами. 
<p>В задаче о расчёте площади многоугольника в таблицу могут быть внесены длины сторон треугольников, на которые в процессе расчёта была разбита исходная фигура. Если параметры каждого треугольника расположены в отдельной строке, то массив включает <i><b>(</b></i><i><b>n</b></i><i><b>-1)</b></i> строку и 3 столбца. Для удобства работы можно ввести нумерацию строк и заголовки столбцов. Тогда результирующая таблица будет включать <i><b>n</b></i> строк и 4 столбца. Таким образом, количество колонок таблицы фиксировано и может быть установлено один раз в процессе создания формы, а количество строк зависит от количества вершин многоугольника, и его следует устанавливать каждый раз в процессе расчёта программными средствами. </p>

<p>После установки таблицы необходимо определить те её свойства, которые в процессе выполнения программы должны остаться неизменными. Свойство <i><b>Name</b></i>, по умолчанию <i><b>StringGrid</b></i><i><b>1</b></i>, оставим неизменным. Количество колонок, <i><b>ColCount</b></i>, установим равным 4. Ширину колонок установим равной 75 у.е. Количества фиксированных строк и столбцов, как и по умолчанию, оставим равными 1. Т.к. количество столбцов таблицы невелико, и все столбцы вполне могут быть размещены в поле таблицы, горизонтальная полоса прокрутки не требуется. В то же время количество строк не определено и может быть достаточно большим. Поэтому таблицу целесообразно снабдить вертикальной полосой прокрутки. Для этой цели свойству <i><b>ScrollBars</b></i> следует присвоить значение <i><b>ssVertical</b></i>. Затем процедуру обработки щелчка мышью по кнопке «<i><b>Вычислить</b></i>» необходимо дополнить командами заполнения ячеек таблицы. Очевидно, заполнение таблицы должно производиться после завершения расчёта длин сторон треугольников. Фрагмент программы, выполняющий ввод данных в таблицу, имеет вид:
<br />
<br /><i><b>StringGrid1.RowCount:=N;</b></i>
<br />
<br /><i><b>for i:=1 to 3 do StringGrid1.Cells[i,0]:='Сторона '+IntToStr(i);</b></i>
<br />
<br /><i><b>for i:=1 to n-1 do StringGrid1.Cells[0,i]:='Тр-к '+IntToStr(i);</b></i>
<br />
<br /><i><b>for i:=1 to n do</b></i>
<br />
<br /><i><b>for j:=1 to 3 do StringGrid1.Cells[i,j]:=FloatToStr(a[j,i]);</b></i>
</p>
<p>Р<span id="frame24" dir="ltr"> </p>

<br /><img src="43.png" align=bottom width="384px" height="255px" border=0><img src="43.png" align=bottom width="431px" height="254px" border=0>
<br /></span><BR CLEAR=LEFT>ис.6-9. 
<p>Первоначально устанавливается количество строк в таблице. Т.к. нумерация начинается с 0-вой строки, то максимальный номер строки равен (n-1). Аналогичное утверждение справедливо и для нумерации столбцов. Далее следуют циклы заполнения заголовков столбцов и строк, после чего с использованием двух вложенных циклов заполняется рабочее поле таблицы. Следует отметить, что при обращении к ячейкам таблицы на первом месте находится номер столбца, а на втором – номер строки. Вид окна программы проиллюстрирован на рис. 6-9. Наряду с таблицей, здесь имеется еще одно отличие от приведенных выше программ. Результат расчёта выводится не в окно сообщения, а в специальное окно редактирования более крупным шрифтом.</p>

<br />
<br /><i><b><span>Задание:</span></b></i> Получить у преподавателя 4-ю индивидуальную задачу и создать программу её решения. Ввод исходных данных и вывод результата выполнить с использованием описанных выше визуальных компонентов. В случае ошибки ввода программа должна предлагать пользователю произвести повторный ввод исходных данных.
<p>Отчёт по данной работе должен включать: перечень использованных визуальных компонентов, описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы, описание событий, изменяющих ход выполнения программы, описание использованных в программе констант и переменных(указать их типы и диапазоны изменения) и стандартных функций, распечатку процедуры обработки каждого из указанных событий. </p>

<br /><b>§ 13 Использование процедур и функций пользователя</b>
<p>При создании сложных программ большое внимание уделяется вопросам, связанным со структурой программы. Структурирование программы или её представление как совокупности относительно обособленных фрагментов делает программу более ясной, легче модифицируемой и проверяемой. Для структурирования программы считается целесообразным оформление любого самостоятельного фрагмента в качестве подпрограммы. <i><b>Подпрограммой </b></i>будем называть часть программы, оформленную в виде отдельной синтаксической конструкции снабжённую именем. «Вызов» подпрограммы, т.е. выполнение действий, заданных в подпрограмме в виде операторов, может быть произведен в некоторой точке программы посредством указания имени этой подпрограммы. Кроме задания последовательности действий, подпрограмма может содержать описания совокупности <i><b>локальных объектов</b></i> – констант, типов, переменных и т.д. Эти объекты предназначены для организации действий в подпрограмме и имеют смысл только <i><b>внутри данной подпрограммы</b></i>. Подпрограмма может быть разработана для различных случаев применения, т.е. перед началом выполнения ей может быть передана какая-либо исходная информация из точки вызова. Такая «настройка» подпрограммы реализуется с использованием <i><b>параметров</b></i> и способствует большей гибкости и универсальности подпрограммного механизма. В Object Pascal подпрограммы используются в <i><b>виде процедур и функций</b></i>, которые могут быть разделены на две категории: стандартные, т.е. являющиеся составной частью компилятора, и подпрограммы, созданные пользователем. К числу стандартных подпрограмм можно отнести использованные выше процедуры <i><b>ShowMessage</b></i> и <i><b>MessageDlg</b></i>, а также функции, перечисленные в таблицах №№1-3. </p>

<p>Структура подпрограммы напоминает структуру программы. При описании подпрограммы в общем случае необходимо задать следующие её компоненты:
<br /><ol> <li>
<br />Интерфейс подпрограммы, т.е. информацию, необходимую для её вызова.
<br /><li>
<br />Локальный контекст подпрограммы: совокупность описаний рабочих объектов, над которыми производятся действия.
<br /><li>
<br />Собственно операторы, составляющие смысл подпрограммы.
<br /></ol> 
<br />Интерфейс программы – информация, достаточная для её вызова, заключена в <i><b>заголовке</b></i>. Описание локальных объектов и операторы составляют внутреннюю её часть и, как правило, имеют синтаксис блока. Заголовок содержит информацию о том, <i><b>что</b></i> делает подпрограмма, а тело – о том, <i><b>как</b></i> она это делает. Разница между процедурами и функциями связана с различным назначением и способом их использования. <i><b>Процедуры</b></i> служат для задания совокупности действий, связанных с изменением внешней по отношению к ним программной обстановки (изменение значений переменных, общение с внешними устройствами и т.д.). Вызов процедуры на выполнение осуществляется с использованием <i><b>оператора процедуры</b></i>. Этот оператор задаёт выполнение операторов, заключённых в теле процедуры. После завершения выполнения процедуры управление передаётся оператору, следующему за оператором процедуры. Синтаксис оператора процедуры имеет следующий вид:
<br />
<br /><img src="44.gif" align=left hspace=12> 
<br />
<br /><img src="45.gif" align=left hspace=12>
<br />
<br /><img src="46.gif" align=left hspace=12>
<br />Смысл <i><b>функций</b></i> – определение алгоритма вычисления значений переменных различных типов. Вызов функции осуществляется с использованием <i><b>указателя</b></i>. Общая структура описания процедур и функций может быть проиллюстрирована следующими синтаксическими диаграммами 
<br />
<br /><img src="47.gif" align=left hspace=12>
<br />
<br />
<br /><i><u><b>З<img src="48.gif" align=left hspace=12>аголовок процедуры</b></u></i>
<br /><i><u><b>Заголовок функции</b></u></i>
</p>
<p> 
<br /><img src="49.gif" align=bottom width="631px" height="214px" border=0></p>

<br />
<br />Заголовки процедур и функций начинаются со служебного слова, обозначающего вид подпрограммы, после чего следуют её имя, используемое при вызове подпрограммы, и, как правило, список формальных параметров. Последний может отсутствовать. <i><b>Формальные</b></i> параметры, указанные в описании процедуры или функции, получают значения <i><b>фактических </b></i>параметров, размещенных на тех же позициях указанных в момент вызова функции. Количество фактических параметров равно количеству формальных параметров, указанных при описании подпрограммы. Следует обратить внимание на следующее: типы формальных параметров должны обозначаться <i><b>идентификаторами</b></i>. Например, следующий заголовок <u>недопустим</u>: <i><b>procedure Incorrect(var A: array[1..10] of real)</b></i>. Идентификаторы <i><b>формальных</b></i> параметров можно считать условными обозначениями в теле подпрограммы тех реальных или <i><b>фактических</b></i> параметров, которые будут переданы в подпрограмму при её вызове. Для функций необходимо также указать тип возвращаемого результата. Тип результата следует после списка формальных параметров и отделяется от него двоеточием. Функция всегда возвращает какое-либо значение. Поэтому в теле функции должен присутствовать оператор присваивания, в левой части которого находится идентификатор, совпадающий с именем функции, а в правой – выражение, вычисляющее возвращаемое значение. Таких операторов присваивания может быть несколько. Важно только, чтобы хотя бы один из них всегда срабатывал в процессе выполнения тела функции. Тип выражения в правой части оператора присваивания должен быть совместим с типом функции, т.е. с типом возвращаемого значения, указанным в заголовке функции. Если в процессе выполнения функции не было выполнено ни одного присваивания, то результат функции считается <i><b>неопределённым</b></i>. Программирование функций упрощено благодаря автоматическому объявлению локальной (определённой только внутри данной функции) переменной <i><b>Result</b></i> в каждой из них. Эта переменная имеет тот же самый тип, что и тип результата функции. Присваивание значения переменной <i><b>Result</b></i> по действию аналогично присвоению того же значения идентификатору функции. При программировании в среде Delphi описания объектов, глобальных переменных, указание вызываемых стандартных модулей производится автоматически, и пользователь, как правило, создаёт именно собственные процедуры обработки того или иного события. В приведенных выше программах это были процедуры реакции программы на щелчок мышью по кнопке. Однако внутри каждой процедуры обработки события могут быть определены другие процедуры и функции пользователя. Например, в программе расчёта площади многоугольника можно выделить, по меньшей мере, два фрагмента, которые могут быть оформлены как подпрограммы. Это расчёт длины отрезка, координаты концов которого известны, и расчёт площади треугольника по трём сторонам, причём каждый из этих фрагментов можно представить и как процедуру, и как функцию пользователя. Фрагмент программы расчёта площади многоугольника, где расстояния между вершинами определяются при помощи функции <i><b>distance</b></i>, приведен ниже.
<br />
<br /><i><b>var</b></i>
<br />
<br /><i><b>x: array[1..20,1..2] of integer;</b></i>
<br />
<br /><i><b>a: array[1..19,1..3] of real;</b></i>
<br />
<br /><i><b>s: array[1..19] of real;</b></i>
<br />
<br /><i><b>i,j,m,n:integer;</b></i>
<br />
<br /><i><b>p,s1,Stot:real;</b></i>
<br />
<br /><i><b>function distance(x1,x2:integer):real;</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>result:=sqrt(sqr(x1)+sqr(x2))</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>begin</b></i>
<p>………………………</p>

<br />
<br /><i><b>for i:=1 to (n-1) do</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>a[i,1]:=distance(x[i,1],x[i,2]);</b></i>
<br />
<br /><i><b>a[i,2]:=distance((x[i,1]-x[i+1,1]),(x[i,2]-x[i+1,2]));</b></i>
<br />
<br /><i><b>a[i,3]:=distance(x[i+1,1],x[i+1,2]);</b></i>
<br />
<br /><i><b>end;</b></i>
<p>………………………<i><b>..</b></i></p>

<p>В описании функции <i><b>distance</b></i> используются два формальных параметра <i><b>x1</b></i> и <i><b>x2</b></i>, которым присваиваются значения фактических параметров, в данном случае элементов двумерного массива координат вершин многоугольника. Перед присваиванием компилятор контролирует соответствие типов фактических параметров типам формальных параметров, указанным в описании функции. 
</p>
<p>Расчёт расстояния между двумя точками может быть выполнен и с использованием процедуры пользователя. Фрагмент программы расчёта площади многоугольника с использованием процедуры пользователя имеет вид:</p>

<br />
<br /><i><b>var</b></i>
<br />
<br /><i><b>x: array[1..20,1..2] of integer;</b></i>
<br />
<br /><i><b>a: array[1..19,1..3] of real;</b></i>
<br />
<br /><i><b>s: array[1..19] of real;</b></i>
<br />
<br /><i><b>i,j,m,n:integer;</b></i>
<br />
<br /><i><b>p,s1,Stot:real;</b></i>
<br />
<br /><i><b>procedure distance(x1,x2:integer; var d:real);</b></i>
<br />
<br /><i><b>begin</b></i>
<br />
<br /><i><b>d:=sqrt(sqr(x1)+sqr(x2));</b></i>
<br />
<br /><i><b>end;</b></i>
<br />
<br /><i><b>begin</b></i>
<p>………………………<i><b>..</b></i></p>

<br />
<br /><i><b>for i:=1 to (n-1) do</b></i>
<br />
<br /><i><b>begin </b></i> 
<br />
<br /><i><b>distance(x[i,1],x[i,2],a[i,1]);</b></i>
<br />
<br /><i><b>distance((x[i,1]-x[i+1,1]),(x[i,2]-x[i+1,2]),a[i,2]);</b></i>
<br />
<br /><i><b>distance(x[i+1,1],x[i+1,2],a[i,3]);</b></i>
<br />
<br /><i><b>end;</b></i>
<p>………………………….</p>

<p>Процедура может не возвращать никаких значений, например, если результатом выполнения процедуры является изменения цвета шрифта. Если же процедура возвращает некоторое значение, например, результат вычислений, для возвращаемого значения следует использовать некоторый параметр, который в момент возврата из процедуры принимает значение, равное результату работы процедуры. Указанный параметр следует объявить в списке параметров, как переменную ключевым словом <i><b>VAR</b></i>. В приведенном примере такой параметр - расстояние между двумя точками <i><b>d</b></i>. В большинстве случаев используется один из двух способов задания значений формальных параметров процедуры. 
<br /><ol> <li>
<br />Параметры, перед которыми отсутствует служебное слово<i><b> var</b></i> и за которыми следует идентификатор типа.
<br /><li>
<br />Параметры, перед которыми указано служебное слово<i><b> var</b></i> и за которыми следует тип.
<br /></ol> 
<br />Первый способ называется передачей <i><b>параметров по значению</b></i>. Второй способ – передачей параметров <i><b>по ссылке</b></i>. Одна и та же программа может содержать оба способа передачи параметров. <i><b>Параметры-значения</b></i> – наиболее распространённый и простой способ передачи параметров. Параметр считается обычной локальной переменной в пределах подпрограммы. При вызове подпрограммы начальное значение такого параметра автоматически устанавливается равным значению соответствующего ему фактического параметра. Параметры, <i><b>передаваемые по ссылке</b></i> (параметры-переменные), указываются заданием служебного слова <i><b>var</b></i> перед их идентификаторами в списке параметров. 
</p>
<p>Телом процедуры или функции является блок. Структура блока содержит описание объектов и группу операторов. Имена объектов, описанных в блоке подпрограммы, по определению считаются известными только в пределах данного блока. Это же относится и к именам формальных параметров. Говорят, что формальные параметры и объекты, описанные в блоке подпрограммы, образуют <i><b>собственный локальный контекст</b></i> данного блока. Среди описаний блока могут содержаться описания процедур и/или функций. Таким образом, допускается создание вложенных подпрограмм, которые, в свою очередь, допускают наличие вложенных подпрограмм. Таким образом:</p>

<br /><ol> <li>
<br />Имена объектов, описанных в некотором блоке, считаются известными в пределах данного блока, включая и вложенные блоки.
<br /><li>
<br />Имена объектов, описанных в блоке, должны быть уникальны в пределах данного блока и могут совпадать с именами объектов из других блоков.
<br /><li>
<br />Если в некотором блоке описан объект, имя которого совпадает с именем объекта, описанного в объемлющем блоке, то это последнее имя становится недоступным в данном блоке. Говорят, что имя, описанное в блоке, экранирует одноименные объекты из блоков, объемлющих данный блок. 
<br /></ol> 
<br />Если пользователь разработал подпрограмму (процедуру или функцию), которая должна быть использована при работе процедур обработки различных событий, нет необходимости описывать её в тексте каждой из указанных процедур. Для «обобществления» такой подпрограммы её описание следует поместить в раздел <i><b>implementation</b></i><i> </i>(реализация) основного модуля. Если разработанные процедуры и функции предполагается использовать в различных программах, пользователь имеет возможность создать собственный модуль, в состав которого входили бы указанные подпрограммы. В дальнейшем такой модуль может быть использован точно также как и остальные модули компилятора.
<br />
<br /><i><b><span>Задание:</span></b></i> Решить предыдущую задачу с использованием процедур и/или функций пользователя.
<p>Отчёт по данной работе должен включать: перечень, использованных, визуальных компонентов; описание свойств компонентов, изменённых при создании формы или изменяемых в процессе выполнения программы; описание событий, изменяющих ход выполнения программы; описание, использованных в программе, констант и переменных (указать их типы и диапазоны изменения), процедур и функций пользователя и стандартных функций; распечатку процедуры обработки каждого из указанных событий. </p>

<br />
<br />
<br /><h3> Глава 7. Задачи по программированию для индивидуального решения</h3> 
<br />
<br /><b>§ 1 Линейная программа</b>
<br />
<br /><b>1.1 </b>Даны два действительных числа a и b. Получить их сумму, разность и произведение.
<br />
<br /><b>1.2</b> Дано действительное число x. Не пользуясь никакими другими арифметическими операциями, кроме умножения сложения и вычитания, вычислить 2x<SUP>4</SUP> – 3x<SUP>3</SUP> + 4x<SUP>2</SUP> – 5x +6. Разрешается использовать как можно меньше умножений, сложений и вычитаний.
<br />
<br /><b>1.3</b> Даны действительные числа x, y. Не пользуясь никакими операциями, кроме умножения, сложения и вычитания, вычислить 3x<SUP>2</SUP>y<SUP>2</SUP> – 2xy<SUP>2 </SUP>– 7x<SUP>2</SUP>y – 4y<SUP>2</SUP> + 15xy + 2x<SUP>2</SUP> – 3x + 10y + 6. Разрешается использовать как можно меньше умножений, сложений и вычитаний.
<br />
<br /><b>1.4 </b>Дано действительное число x. Не пользуясь никакими другими арифметическими операциями, кроме умножения сложения и вычитания, вычислить 1 – 2x + 3x<IDXSKIP><SUP>2</SUP></IDXSKIP> – 4x<SUP>3</SUP> и 1 + 2x + 3x<SUP>2</SUP> + 4x<SUP>3</SUP>. Разрешается использовать как можно меньше операций.
<br />
<br /><b>1.5</b> Написать программу для вычисления площади треугольного участка по заданным координатам его вершин. Значения координат задаются в метрах, площадь необходимо вычислить в гектарах и округлить до 0,1 га. Формула для вычисления площади:
<br />
<br /><img src="50.gif" align=absmiddle width="334px" height="53px">
<p>Форма выдачи результата:</p>

<p>ПЛОЩАДЬ = значение S ГА.
<br />
<br /><b>1.6</b> Написать программу для вычисления площади четырехугольного участка по заданным значениям координат его вершин. 
</p>
<p>Формула для вычисления площади:</p>

<br />
<br /><img src="51.gif" align=absmiddle width="424px" height="53px">
<p>Значения координат задаются в метрах, площадь необходимо вычислить в гектарах. В программе предусмотреть округление вычисленного значения площади до 0,1 га.</p>

<p>Форма выдачи результата:
</p>
<p>ПЛОЩАДЬ УЧАСТКА РАВНА значение S ГА.</p>

<br />
<br /><b>1.7</b> Написать программу для вычисления площади треугольного участка по заданным значениям координат его вершин по формуле:
<br />
<br /><img src="52.gif" align=absmiddle width="241px" height="60px">
<p>Значения координат задаются в метрах, площадь определить в гектарах с точностью до 0,001 га.</p>

<p>Форма выдачи результата:
</p>
<p>ПЛОЩАДЬ РАВНА значение S ГА.</p>

<br />
<br /><b>1.8</b> Написать программу для определения объема усеченного конуса, с высотой H м и параллельными основаниями с радиусами R<sub>1</sub> м и R<sub>2 </sub>м. В программе предусмотреть округление объема до 0,001 м<IDXSKIP><SUP>3</SUP></IDXSKIP>. Формула для вычисления объема:
<br />
<br /><img src="53.gif" align=absmiddle width="207px" height="80px">
<p>Форма выдачи результата:</p>

<p>ОБЪЕМ КОНУСА= значение V КУБ.М.
<br />
<br /><b>1.9</b> Написать программу для вычисления суммы вклада в сберегательный банк через N лет при условии, что начальная сумма вклада составляла A рублей, а процент годовых равен P%. Расчет выполняется по формуле сложных процентов:
<br />
<br /><img src="54.gif" align=absmiddle width="113px" height="38px">
</p>
<p>В программе предусмотреть округление результата до 0,01 рубля.</p>

<p>Форма вывода результата:
</p>
<p>СУММА ЧЕРЕЗ значение N ЛЕТ РАВНА значение S РУБ.</p>

<br />
<br /><b>1.10</b> Дан прямоугольный параллелепипед. <i><b>a</b></i><i><b>, </b></i><i><b>b</b></i><i><b>, </b></i><i><b>c</b></i><i><b> —</b></i> ребра прямоугольного параллелепипеда. Найти:
<p>1)его диагональ <img src="55.gif" align=absmiddle width="8px" height="18px"><img src="56.gif" align=absmiddle width="119px" height="27px">;</p>

<p>2)площадь полной поверхности <img src="57.gif" align=absmiddle width="162px" height="26px">;
</p>
<p>3) объем <img src="58.gif" align=absmiddle width="75px" height="24px">.</p>

<br />
<br /><b>1.11</b> Дан обелиск. Нижнее и верхнее основание являются прямоугольниками, расположенными в параллельных плоскостях; противоположные боковые грани одинаково наклонены к основанию, но не пересекаются в одной точке.
<br />
<br /><b>1.12</b> Даны a, b и a1, b1 — стороны оснований, h — высота. Найти объем обелиска по формуле
<br />
<br /><img src="55.gif" align=absmiddle width="8px" height="18px">V=h[ab+(a+a<sub>1</sub>)(b+b<sub>1</sub>)+a<sub>1</sub>b<sub>1</sub>]/6.
<p>Форма выдачи результата:</p>

<p>ОБЪЕМ ОБЕЛИСКА= значение V КУБ.М.
<br />
<br /><b>1.13</b> Если известны координаты двух точек X<sub>1</sub>Y<sub>1</sub> и X<sub>2</sub>Y<sub>2</sub> (рис. 7-1), то координаты X, Y точки, делящей отрезок 1–2 в отношении <img src="59.gif" align=absmiddle width="28px" height="50px">, можно определить по формулам:
<br />
<br /><img src="60.gif" align=absmiddle width="242px" height="52px">.
<br /><img src="61.gif" align=left hspace=12><img src="62.gif" align=left hspace=12> <b>X</b><sub><b>2</b></sub><b>Y</b><sub><b>2</b></sub>
<br />
<br /><i><b>n</b></i>
<br />
<br /><img src="63.gif" align=left hspace=12><img src="63.gif" align=left hspace=12> <i><b>m</b></i> <b>X Y</b>
<br /><b>X<sub>1</sub>Y<sub>1</sub></b>
</p>
<p>Рис. 7-1.</p>

<p>Написать программу для определения X, Y. Значения X<sub>1</sub>, Y<sub>1</sub>, X<sub>2</sub>,Y<sub>2 </sub>вводить в метрах. Координаты X, Y выводить в метрах в метрах с точностью до 0,1м.
</p>
<p>Форма выдачи результата:</p>

<p>КООРДИНАТЫ ДЕЛЯЩЕЙ ТОЧКИ:
</p>
<p>X = значение X, Y = значение Y.</p>

<br />
<br /><b>1.14</b> Написать программу для вычисления поправки превышения за кривизну Земли и рефракцию:
<br />
<br /><i><b>f</b></i><img src="64.gif" align=left hspace=12 width="109px" height="55px"><BR CLEAR=LEFT><i> </i>— поправка измеряется в метрах. Рефракция — преломление светового луча в атмосфере (поправку вычисляют для расстояний более 300 м);
<p>R — радиус Земли. R6371,1 км (в формуле перевести в м);</p>

<br />
<br /><i><b>S</b></i><sub><i><b>i</b></i></sub><i> </i>— длина линии в метрах между точками, где измеряется превышение.
<p>Поправку округлять до 0.01 м.</p>

<p>Форма вывода результата: ПОПРАВКА= значение (м).
<br />
<br /><b>1.15</b> Написать программу для расчета общих годовых издержек на 1 га угодий в зависимости от площади территории P и пространственного расположения земель и хозяйственного центра:
</p>
<p>г<img src="65.gif" align=left hspace=12 width="253px" height="64px"><BR CLEAR=LEFT>де K1 — коэффициент, характеризующий конфигурацию земельной площади и положение хозяйственного центра;</p>

<p>K2 — коэффициент, показывающий, во сколько раз путь по дорогам к данному участку длиннее, чем путь по прямой.
</p>
<p>Значение Z округлить до 0,01.</p>

<p>Форма вывода результата:
</p>
<p>ГОДОВЫЕ ИЗДЕРЖКИ= значение Z Р/ГА.</p>

<br />
<br /><b>1.16</b> Написать программу для определения площади участка пашни, с баллом бонитировки Б<sub>2 </sub>(балл экономической оценки земли, оценивается по 100-бальной шкале), которую хозяйство должно отдать в обмен на полученный им участок с площадью S<sub>1</sub> и баллом Б<sub>1</sub>:
<br />
<br /><img src="66.gif" align=left hspace=12 width="90px" height="38px"><BR CLEAR=LEFT>
<br />
<p>Значение S<sub>2</sub> S<sub>1</sub> округлять до 0,01 га.</p>

<p>Форма вывода результата:
</p>
<p>ПОДЛЕЖИТ ВОЗВРАТУ значение ГА ПАШНИ.</p>

<br />
<br /><b>1.17</b> Написать программу для вычисления поправки за кривизну Земли в длину измеренной линии:
<p>г<img src="67.gif" align=left hspace=12 width="76px" height="53px"><BR CLEAR=LEFT>де S — длина линии в метрах, R- радиус Земли. R6371,1 км. Поправку вычислить в сантиметрах и округлить до 0,1 см.</p>

<p>Перевод в единые единицы измерения предусмотреть в формуле самостоятельно.
<br />
<br /><b>1<img src="55.gif" align=left hspace=12 width="8px" height="18px"><BR CLEAR=LEFT><img src="55.gif" align=left hspace=12 width="12px" height="23px"><BR CLEAR=LEFT>.18</b> Написать программу для определения оптимальной площади территории по формуле:
</p>
<p>г<img src="68.gif" align=left hspace=12 width="411px" height="118px"><BR CLEAR=LEFT>де a<sub>1</sub>, a<sub>2</sub>, a<sub>3</sub>, a<sub>4</sub>, — коэффициенты уравнений переменных частей годовых издержек (возможные значения 1-100);</p>

<p>K<sub>1</sub> — коэффициент, значение которого определяется в зависимости от конфигурации земельных площадей и положения хозяйственного центра (возможные значения 1-100);
</p>
<p>K<sub>2</sub> — дорожный коэффициент, показывающий, во сколько раз путь по дорогам к данному земельному участку длиннее пути по прямой (возможные значения 1-100);</p>

<p>Г — грузооборот на 1 га земельной площади в тоннах;
</p>
<p> — переменная часть транспортных расходов (0,1-1);</p>

<p>n — количество переездов в день;
</p>
<p>D — среднегодовые затраты на полевые работы на 1 га (человеко-дней);</p>

<p>S<sub>p</sub> — тариф за 1 км пробега автомашины;
</p>
<p>S<sub>d</sub> — оплата одного человеко-дня;</p>

<p> — коэффициент использования вместимости автомашин (0,1-1);
</p>
<p> — коэффициент использования автопробега (0,1-1) ;</p>

<p>Е — вместимость автомашины (0,1-1) ;
</p>
<p>V<sub></sub> — скорость движения автомашин;</p>

<p>N<sub>p</sub> — продолжительность рабочего дня.
</p>
<p>Результат округлить до 0,01 га.</p>

<p>Форма вывода результата:
</p>
<p>ОПТИМАЛЬНАЯ ПЛОЩАДЬ = значение P ГА.</p>

<br />
<br /><b>1.19</b> С<img src="69.gif" align=left hspace=12 width="148px" height="27px"><BR CLEAR=LEFT>оставить программу для вычисления длины окружности C и площади круга S, если известен радиус r по формулам:
<p>Форма вывода результатов:</p>

<p>ДЛИНА ОКРУЖНОСТИ С РАДИУСОМ значение r = значение C
</p>
<p>ПЛОЩАДЬ КРУГА С РАДИУСОМ значение r = значение S.</p>

<br />Исходные данные вводить в сантиметрах. Результат округлить до целых.
<br />
<br /><b>1.20</b> С<img src="70.gif" align=left hspace=12 width="191px" height="48px"><BR CLEAR=LEFT>оставить программу для вычисления площади сегмента S<sub>1</sub> и площади сектора S<sub>2</sub>, если известны r — радиус круга,  — центральный угол (в градусах) по формулам:
<p>Форма вывода результатов:</p>

<p>ПЛОЩАДЬ СЕГМЕНТА КРУГА = значение S<sub>1</sub>
</p>
<p>ПЛОЩАДЬ СЕКТОРА КРУГА = значение S<sub>2</sub>.</p>

<p>Радиус круга задан в метрах. Площади определить с точностью до 0,1 м<SUP>2</SUP><IDXSKIP>.
<br /></IDXSKIP>
<br /><b>1.22</b> Составить программу для исследования величины поправки (S) за редуцирование расстояния (S в метрах) при переходе с эллипсоида на плоскость в проекции Гаусса. Для этого рассчитать поправку:
</p>
<p>для случаев :<img src="71.gif" align=left hspace=12 width="81px" height="43px"><BR CLEAR=LEFT></p>

<br /><ol> <li>
<br />линия располагается на осевом меридиане (y = 0 км);
<br /><li>
<br />линия находится на краю шестиградусной зоны (y330км).
<br /></ol> 
<br />R — радиус Земли. R6371,1 км.
<p>y — ордината середины редуцируемого отрезка в км.</p>

<p>Поправку вычислить в метрах с точностью до 0,1 м.
<br />
<br /><b>1<img src="72.gif" align=left hspace=12 width="82px" height="40px"><BR CLEAR=LEFT>.23</b> Составить программу для вычисления поправки P в площадь за переход с поверхности шара на плоскость в проекции Гаусса:
</p>
<p>P — площадь участка на поверхности шара (га).</p>

<p>R — радиус Земли. R6371,1 км.
</p>
<p>y — ордината середины редуцируемой площади (0-300 км).</p>

<p>Поправку округлить до 0,01 га.
<br />
<br /><b>1.24</b> Составить программу для расчета цены деления уровня по формуле:
</p>
<p>г<img src="73.gif" align=left hspace=12 width="150px" height="41px"><BR CLEAR=LEFT>де l<sub>1</sub>-l<sub>2</sub> — разность отсчетов по рейке в мм;</p>

<p>n — число делений, на которое сместился пузырек уровня;
</p>
<p>d — расстояние от нивелира до рейки в метрах.</p>

<p>Перевод мм в м в рабочей формуле учтен константой 206''.
</p>
<p>Результат вывести с точностью до 0,01 секунды.</p>

<br />
<br /><b>1.25</b> Дан радиус сферы (R) в метрах. Составить программу для вычисления площади полной поверхности:
<br />
<br /><img src="74.gif" align=absmiddle width="65px" height="20px">
<p>и объема:</p>

<br />
<br /><img src="75.gif" align=absmiddle width="83px" height="20px">.
<p>Результат округлить до 0,01 метра.</p>

<br />
<br /><b>1.26</b> Известны значения хорды шарового сектора в сантиметрах (a), радиуса шара (R в см) и стрелы шарового сектора (h в см). Cоставить программу для вычисления площади полной поверхности шарового сектора:
<br />
<br /><img src="76.gif" align=absmiddle width="101px" height="19px">
<p>и объема шарового сектора:</p>

<br />
<br /><img src="77.gif" align=absmiddle width="93px" height="20px">.
<p>Результат округлить до 0,1 сантиметра.</p>

<br />
<br /><b>1.27</b> Дан круговой прямой цилиндр. Известен радиус цилиндра R в метрах. Составить программу для вычисления площади боковой поверхности:
<br />
<br /><img src="78.gif" align=absmiddle width="81px" height="18px">
<p>площади полной поверхности:</p>

<br />
<br /><img src="79.gif" align=absmiddle width="110px" height="19px">
<p>объема:
<br /></p>

<br /><img src="80.gif" align=absmiddle width="83px" height="20px">
<br />
<br /><b>1.28</b> Дан усеченный круговой цилиндр. Известны: радиус основания цилиндра — R в метрах; h<sub>1</sub> и h<sub>2</sub> — высоты усеченного цилиндра. Написать программу для вычисления площади боковой поверхности:
<br />
<br /><img src="81.gif" align=absmiddle width="116px" height="22px">
<p>площади полной поверхности:</p>

<br />
<br /><img src="82.gif" align=absmiddle width="272px" height="77px">,
<p>объема
<br /></p>

<br /><img src="83.gif" align=absmiddle width="97px" height="41px">.
<p>Результат округлить до 0,001 метра.</p>

<br />
<br /><b>1.29</b> Известны: r и R — внутренний и внешний радиусы кругового кольца в метрах; центральный угол  (в градусах) части кольца. Составить программу для вычисления площади кругового кольца (S<sub>1</sub>) и площади части кольца (S<sub>2</sub>) с заданным центральным углом по формулам:
<br />
<br /><img src="55.gif" align=absmiddle width="8px" height="18px"><img src="84.gif" align=absmiddle width="104px" height="24px">, <img src="85.gif" align=absmiddle width="121px" height="38px">.
<p>Результат округлить до 0,1 метра.</p>

<br />
<br /><b>1.30</b> Составить программу для вычисления объема трехгранной усеченной пирамиды. Если известны стороны оснований пирамиды: a<sub>1</sub>, b<sub>1</sub>, c<sub>1</sub> a<sub>2</sub>, b<sub>2</sub>, c<sub>2</sub>, высота пирамиды h по формуле:
<br />
<br /><img src="86.gif" align=absmiddle width="189px" height="26px">
<p>где F — площадь нижнего основания;</p>

<p>f — площадь верхнего основания.
</p>
<p>Площади оснований рассчитать по формуле Герона.</p>

<br />
<br /><b>1.31</b> Написать программу для вычисления расстояния S между двумя населенными пунктами, если автомобиль со скоростью V км/час проезжает его за T часов.
<p>Расстояние S между населенными пунктами равно S = V*T.</p>

<p>Предусмотреть запросы при вводе исходных данных:
</p>
<p>Скорость автомобиля км/час:</p>

<p>Время проезда в часах:
</p>
<p>Форма вывода результата:</p>

<p>Расстояние между населенными пунктами равно <значение S> км.
<br />
<br /><b>1.32</b> Составить программу для вычисления силы тока I = q/t,
</p>
<p>где q — величина электрического заряда (измеряется в кулонах);</p>

<p>t — время прохождения заряда через поперечное сечение проводника в секундах.
</p>
<p>Результат округлить до 0,1 ампера. </p>

<br /><b>§ 2 Библиотечные функции в линейных программах</b>
<br /><ol> <li>
<br />Написать программу для определения угла (рис. 7-2) по заданным значениям X и S. Угол  определять в градусах, минутах и секундах, округлив секунды <span>до 0,1 сек.</span>
<br /></ol> 
<br /><img src="87.gif" align=left hspace=12> 
<br />
<br /><img src="88.gif" align=left hspace=12>
<br />
<p> S
<br /></p>

<br /><img src="89.gif" align=left hspace=12> Y 90 
<br />X
<p>Рис. 7-2.</p>

<p>В программе предусмотреть запросы при вводе исходных данных:
</p>
<p>ГИПОТЕНУЗА = ?</p>

<p>ПРОТИВОЛЕЖАЩИЙ КАТЕТ = ?
</p>
<p>Форма вывода результата:</p>

<br /></c></c></y></dd></span><br /><IDXSKIP><span class="text5 text6">ч. 1</span></IDXSKIP> <a href="/health/programmirovanie-v-srede-delphi--1/pg-2.html"><span class="text5">ч. 2</span></a> <br /><center><iframe width="800px" height="450px" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" src="http://lib.znate.ru/view.php?a=2&si=zav.ansya.ru&page=%2Fhealth%2Fprogrammirovanie-v-srede-delphi--1%2Fpg-1.html"></iframe></center>
						</div>
					</div>
				</div>
				<div class="one-content-bottom">
					<div class="corner"></div>
				</div>
			</div>
			

			<div class="aside-spacer"></div>
			
		</div>
		<div class="clearfix"></div>
	</div></div>
	<div id="footer">
		
		
		<div class="max-width"><div class="box-sizing">
			
			<IDXSKIP><p class="legal">&copy; zav.ansya.ru, 2017</p></IDXSKIP>
			<IDXSKIP><p><img src="/contact.jpg"/></p></IDXSKIP><center><!--LiveInternet counter--><script type="text/javascript"><!--
document.write("<a href='//www.liveinternet.ru/click' "+
"target=_blank><img src='//counter.yadro.ru/hit?t22.5;r"+
escape(document.referrer)+((typeof(screen)=="undefined")?"":
";s"+screen.width+"*"+screen.height+"*"+(screen.colorDepth?
screen.colorDepth:screen.pixelDepth))+";u"+escape(document.URL)+
";"+Math.random()+
"' alt='' title='LiveInternet: показано число просмотров за 24"+
" часа, посетителей за 24 часа и за сегодня' "+
"border='0' width='88' height='31'><\/a>")
//--></script><!--/LiveInternet-->
</center>
		</div></div>
	</div>
	 
    <!--[if gte IE 9]><!-->
    <script type="text/javascript"><!--
			// OPTIONAL: manually specify the current page title (to determine which menus are open onload)  
			//var currentPageTitle = '_INSERT_PAGE_TITLE_HERE_';  
			--></script><script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.js"> </script>
    <!--<![endif]-->
		
	
	<script type="text/javascript" src="/js/jquery.compact.js"></script> 
	<script type="text/javascript" src="/js/jquery.compact.slideshow.js"></script> 
	<script type="text/javascript" src="/js/jquery.resize-events.js"></script>
	<script type="text/javascript" src="/js/jquery.fader.js"></script>
	<script type="text/javascript" src="/js/jquery.pageFunctions.js"></script>
	
</body>
</html>
