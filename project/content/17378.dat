sunhome.ru/books/p.informatika
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
    <title>Информатика</title>
    <meta http-equiv="Content-Type" CONTENT="text/html; charset=windows-1251">
    <meta http-equiv="Content-Language" content="ru">
    <meta name="keywords" content="информатика, виталий каймин, книги, информатика, наука, скачать информатика, виталий каймин информатика, книги виталий каймин">
    <meta name="description" content="Информатика. Виталий Каймин. Книги. Информатика. Виталий Каймин Информатика. Наука. Скачать Информатика. Книги Виталий Каймин.">
    <meta name="robots" content="all">
    <base href="http://www.sunhome.ru">

    <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">
	<link rel="stylesheet" type="text/css" href="/new/new_styles.css">
	<link rel="stylesheet" type="text/css" href="/new/css/common.css">
	<link rel="stylesheet" type="text/css" href="/new/css/wrapper_new.css">
    <link rel="stylesheet" type="text/css" href="/new/css/print_new.css">
	<link rel="stylesheet" type="text/css" href="/css/print_styles.css">
	<link rel="stylesheet" type="text/css" href="/new/_mainpage/main.css">
	
    <script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-11753748-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>
    
</head>

<body>
	<div id="container">
		<div id="header">
			<div class="print-topcrumbs">
			    <a title="Книги" href="/books" style="font-weight:bold">Книги</a> / 
                <a title="Наука" href="/books/nauka">Наука</a> / 
                <a title="Наука" href="/books/informatika">Информатика</a> / 
			    <a title="Виталий Каймин" href="/books/n.vitaliy_kaymin">Виталий Каймин</a> / 
			    <strong>Информатика</strong>
			</div>
			<div class="print-logo">
				<a href="" title="Дом Солнца - Эзотерический мегапортал">
				    <img height="50" width="214" alt="Дом Солнца - Эзотерический мегапортал" src="http://i.sunhome.ru/common/logo.gif" /></td>
				</a>
			</div>
			<div id="razdel-logo-text">
				<a href="/books" title="КНИГИ">КНИГИ</a>		
			</div>
		</div>
		
		<div id="content">
			<h1>
				<a style="font-size: inherit" href="/books/b.informatika" title="Информатика">Информатика</a>
			</h1>
			
        <div class="print_article">
            Перед Вами один из учебников нового поколения по дисциплине «Информатика» для студентов высших учебных заведений, обучающихся по естественнонаучным направлениям и специальностям профессионального образования, написанный известными специалистами в области вычислительной техники и прошедший сложный и длительный путь конкурсного отбора.<br />
<br />
Данный учебник является одним из двух победителей по дисциплине «Информатика» Всероссийского конкурса учебников нового поколения по общим фундаментальным естественнонаучным дисциплинам. Этот конкурс впервые в истории высшей школы в России в связи с реформированием структуры и содержания программ высшего образования был инициирован Госкомвузом России (в дальнейшем - Минобразованием России) и проведен в течение 1995-1998 годов на базе Российского университета дружбы народов.<br />
<br />
В конкурсе приняли участие свыше 350 авторских коллективов практически из всех регионов России, заявки представлялись по 11 номинациям, а в их оценке участвовало более ста высококвалифицированных экспертов.<br />
<br />
В результате двух туров конкурса было отобрано 30 авторских коллективов, чьи заявки, а затем и рукописи более всего соответствовали как новым учебным программам, так и государственным образовательным стандартам по каждой дисциплине.<br />
<br />
Конкурсная комиссия выражает надежду, что данный учебник внесет свой полезный вклад в дело дальнейшего совершенствования российского высшего профессионального образования, и желает всем читателям-студентам и преподавателям - больших творческих успехов.<br /><br />
Заместитель министра образования России,<br />
<br />
академик Российской академии образования,<br />
<br />
председатель конкурсной комиссии профессор<br />
<br />
В.Д. Шадриков<br /><br />
ВВЕДЕНИЕ<br /><br />
Настоящий учебник посвящен изучению информатики - новой научной дисциплины и новой информационной индустрии, связанных с использованием персональных компьютеров и сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Развитие бизнеса, образования, промышленности и общества в целом учеными, политиками, бизнесменами во многом связывается с широким использованием информационных ресурсов <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и нарастающими интеллектуальными возможностями вычислительных машин.<br />
<br />
Учебник предназначается студентам вузов и представляет определенное отражение современного состояния информатики как науки и информационной индустрии, в том числе отражение современного состояния персональных компьютеров и возможностей сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> как базы для развития современной информационной индустрии.<br />
<br />
Наиболее распространенным видом современной вычислительной техники стали персональные компьютеры IBM PC. По этим причинам в учебнике изучаются основные возможности наиболее современных программных средств персональных компьютеров IBM PC - операционной системы Windows, редактора текстов Word, электронных таблиц Excel, базы данных Access, а также телекоммуникационной системы Internet Explourer.<br />
<br />
Представление информатики как научной дисциплины связано с рассмотрением проблем организации вычислений и обработки информации с помощью ЭВМ и внутри ЭВМ, а также принципов организации и работы машинных интеллектуальных систем (систем искусственного интеллекта) на ЭВМ. Для изучения принципов работы систем искусственного интеллекта в учебнике используется язык Пролог - язык моделирования интеллектуальных процессов на ЭВМ.<br />
<br />
Изучение принципов обработки информации и организации вычислений проводится на примерах решения экономических задач, при этом решение задач доводится до получения результатов на ЭВМ путем составления калькуляций, баз данных и программ с параллельным анализом и доказательством правильности получаемых результатов. С этой целью в учебнике излагаются систематические методы безошибочного (доказательного) программирования - нового научного подхода к составлению программ, гарантирующих получение правильных результатов с помощью ЭВМ.<br />
<br />
Особенностью информатики как учебной дисциплины является практикум на ЭВМ, который может проводится в вузе, в школе или дома. Для прохождения такого практикума необходимо иметь персональный компьютер или доступ к нему, а также необходимые пакеты программ - редакторы текстов, базы данных, электронные таблицы и новейшие средства компьютерного обучения - электронные учебники.<br />
<br />
Настоящий учебник построен так, что по нему можно изучать информатику даже дома с использованием персональной ЭВМ, и последующей сдачей зачетов и экзаменов с помощью <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Такая возможность требует наличия на домашних ЭВМ перечисленных пакетов программ с операционными системами, редакторами текстов, системами программирования и электронными учебниками.<br />
<br />
Особенностью электронных учебников по информатике, описанных в настоящем пособии, является то, что с их помощью можно успешно подготовиться к сдаче всех зачетов и экзаменов и сдать их на оценки «отлично» или «хорошо». Основная особенность курса информатики состоит в том, что все экзамены и зачеты по этому курсу, а также контроль знаний должен проводиться на персональных ЭВМ и может производиться дистанционно с помощью сети ЭВМ.<br />
<br />
Электронные учебники по информатике были созданы специально для дистанционного обучения на ЭВМ с использованием сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и апробировались в вузах и школах России и Казахстана в течении ряда лет. Сегодня эти электронные учебники можно увидеть на ряде серверов сети Итернет, указанных в настоящем пособии, с помощью любого персонального компьютера, имеющего доступ к <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Использование этих электронных учебников в ходе апробации  систематически приводило к одному и тому же результату - практически все студенты и школьники после работы с электронными учебниками успешно сдали все зачеты и экзамены на «хорошо» и «отлично» и создавали при этом стихи, <A href="http://www.sunhome.ru/image/35"><font class="normal">рисунки</font></A>, базы данных, электронные калькуляции и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> решения на ЭВМ различных задач с доказательствами правильности получаемых результатов.<br />
<br />
Особое место в информатике как новой информационной индустрии играет <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, электронная почта и средства телекоммуникаций, изучение которых вошло в настоящий учебник по информатике. При этом освоение средств <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> в настоящем учебнике проводится сразу после освоения техники работы и редактирования текстов на персональных ЭВМ.<br />
<br />
Опережающее освоение техники работы в <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> позволит студентам и старшеклассникам без задержки войти в сеть <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и обратиться в один из центров дистанционного обучения для получения консультаций и помощи в решении текущих и экзаменационных задач у лучших преподавателей.<br />
<br />
Благодаря сети Интернат сотни тысяч молодых людей и девушек смогут учиться в лучших отечественных и зарубежных вузах, используя персональные компьютеры. Такого рода дистанционное обучение может проводиться без выезда из своего города, поселка или даже не выходя из своего дома.<br />
<br />
Первые эксперименты дистанционного и очного обучения с использованием описанных здесь технологий показали, что качество обучения с применением электронных учебников не хуже, чем очные занятия в лучших зарубежных вузах, и на порядок лучше, чем при обычной модели обучения без использования каких бы то ни было учебников.<br />
<br />
Однако использование <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, открывая новые возможности в предоставлении информации и информационных услуг, создает и новые проблемы. Основные из них - проблемы защиты информации в ЭВМ от искажения, уничтожения и неправомерного доступа.<br />
<br />
Ярким примером служит проблема компьютерных вирусов, которые могут уничтожить всю информацию, хранящуюся в ЭВМ. Неправильные действия в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, а также копирование программ и данных в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> может привести к самым неприятным последствиям. Здесь необходимо твердо усвоить и придерживаться ряда правил гигиены от компьютерных вирусов.<br />
<br />
Согласно принятому законодательству информация признана объектом гражданских прав с определением норм и правил отнесения ее к массовой, персональной или конфиденциальной. А базы данных и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> для ЭВМ отнесены к объектам авторского права и на их распространение и использование распространяются соответствующие нормы правовой защиты.<br />
<br />
Автор выражает свою признательность своим студентам, аспирантам и сотрудникам, принимавшим участие в разработках электронных учебников и учебных программ для персональных ЭВМ, а также принимавшим участие в оформлении, редактировании и макетиро-вании учебников по информатике в течении 1985-1999 гг.<br /><br />
Академик В.А.Каимин<br /><br />
Глава 1. ИНФОРМАЦИЯ И ПЕРСОНАЛЬНЫЕ ЭВМ<br /><br />
1.1. Введение в информатику<br /><br />
Информатика - это новая научная дисциплина и новая информационная индустрия, связанные с использованием персональных компьютеров и сетей ЭВМ. В новом тысячелетии предполагается, что основная информация, связанная с деятельностью людей будет храниться в памяти электронных вычислительных машин.<br />
<br />
Информатика как научная дисциплина изучает законы, принципы и методы накопления, обработки и передачи информации с помощью ЭВМ. В этом смысле информатика как <A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A> является фундаментом для развития новой информационной индустрии, основанной на использовании сетей ЭВМ.<br />
<br />
Фундамент информатики образуют вычислительные науки - науки об вычислительных процессах и организации вычислительных машин, вычислительных систем и сетей. Основным объектом вычислительных наук являются вычислительные машины - устройства для организации вычислений и обработки символьной информации.<br />
<br />
Обработка, накопление и передача информации происходит не только внутри ЭВМ. Передачу и накопление информации мы видим при общении людей, в технических устройствах, в живых организмах и в жизни общества, что тоже входит в предмет изучения информатики как научной дисциплины.<br />
<br />
Передача информации в общении людей - это передача сведений и суждений, данных и сообщений. Даже улыбка является передачей информации при общении людей друг с другом. Любая совместная деятельность людей - работа, учеба и даже игра - построены на обмене и передаче информации.<br />
<br />
Для живых существ восприятие и передача информации в форме  сигналов - основное отличие от неодушевленных предметов окружающего мира. Языковая форма передачи знаковой информации - основное отличие людей от других живых существ.<br />
<br />
Слово информация происходит от латинского informatio, означающего сведения, разъяснения, пояснения. С содержательной точки зрения информация - это сведения о ком-то или о чем-то, а с формальной точки зрения - набор знаков и сигналов.<br />
<br />
С юридической точки зрения информация - это сведения о людях, предметах, фактах, событиях и процессах, независимо от формы их представления. Данное определение зафиксировано в Законе «Об информации, информатизации и защите информации», утвержденном в 1995 году.<br />
<br />
Особую роль для общества играет документированная информация. Документы - это информация, зафиксированная на материальном носителе - бумаге или машинном носителе, имеющем реквизиты, позволяющие его идентифицировать.<br />
<br />
Возможность записи информации в письменном виде - в форме последовательности знаков - привела к образованию государств, возникновению бюрократии и появлению почтовых служб. Параллельно это привело - к появлению грамотных людей - людей, умеющих читать, писать и искать информацию для решения различных проблем.<br />
<br />
Возникновение письменности позволило людям не только передавать информацию, но и накапливать ее в форме записок, писем и рукописей в архивах, а также в личных и публичных библиотеках. Квалифицированная переработка информации потребовала людей, имеющих надлежащее образование.<br />
<br />
Для обучения грамотности были открыты гимназии, лицеи и школы, а для подготовки образованных людей - университеты и колледжи, где накоплением и передачей знаний стали заниматься ученые, учителя и профессора.<br />
<br />
Для хранения знаний стали использоваться рукописные <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>, а для хранения книг - библиотеки и книгохранилища. В них стал накапливаться интеллектуальный потенциал общества и государств. Неслучайно одной из основных задач варвары считали уничтожение книг и книгохранилищ.<br />
<br />
Изобретение печатных станков в XV в. создало технологическую основу для массового издания и распространения печатных книг. Это послужило основой для всеобщего распространения грамотности и открытия массовых начальных школ, в которых все дети обучались грамотности - умениям читать, писать и считать.<br />
<br />
Развитие промышленного производства в XVIII-XIX веках потребовало большого числа специалистов, для подготовки которых было открыто большое число университетов. Это дало мощный толчок для развития естественных наук - химии, физики, механики, математики и подготовки инженерных кадров.<br />
<br />
Развитие печатных станков привело к появлению и распространению газет как средств массовой информации и информатизации общества, а также появлению и распространению журналов для распространения литературных произведений. В это же время появились первые законы, регулирующие авторские права.<br />
<br />
Изобретение в XIX - начале XX века телеграфа, радио и телефона открыло новые возможности в передаче информации и информатизации общества. Эти технические средства дали возможность практически мгновенно передавать информацию на любые расстояния.<br />
<br />
Следующим шагом технического прогресса стало появление и развитие электроники, телевидения и радиовещания к середине XX века. Изобретение телевидения позволило людям видеть на экранах телевизоров события, происходящие в самых различных точках планеты, а изобретение магнитофона - накапливать звуковую и видеоинформацию на магнитных носителях.<br />
<br />
Точкой отсчета становления информатики как индустрии стало изобретение в середине XX века электронных вычислительных машин. Основной особенностью компьютеров стала возможность автоматической обработки информации. Переработка информации перестала быть исключительной способностью людей и живых существ.<br />
<br />
Параллельно в середине XX века были заложены теоретические основы информатики как научной дисциплины. В этот период получили развитие математическая логика - фундамент теоретической информатики и теория алгоритмов - фундамент вычислительных наук.<br />
<br />
Компьютеры первого поколения создавались именно как электронные вычислительные машины для автоматизации сложнейших вычислений оборонного и научного характера. Объем и сложность вычислений, выполнявшихся первыми компьютерами, были недоступны даже самым сильным математикам и вычислителям, но посильными для современных домашних компьютеров.<br />
<br />
В этот период появились первые профессиональные программисты и первые теоретические работы по математической лингвистике, теории искусственного интеллекта и теоретическому программированию. Бурное развитие получили вычислительная и дискретная математика, образующие математическую базу информатики и вычислительных наук.<br />
<br />
Компьютеры второго поколения создавались в качестве универсальных вычислительных машин, предназначенных для решения задач обработки и накопления информации с использованием устройств ввода и вывода. Компьютеры этого поколения стали использоваться для решения различных научных, экономических, оборонных и инженерных задач.<br />
<br />
Для этих машин были созданы первые операционные системы, системы программирования и первые диалоговые системы. В этот период программирование зародилось как профессия и появились первые языки программирования и первые инструментальные про-граммы - компиляторы и интерпретаторы для ЭВМ.<br />
<br />
Третье поколение компьютеров - это первые серийные вычислительные машины для автоматизации обработки и накопления информации. Для этих ЭВМ был создан целый спектр устройств ввода, вывода и накопления информации. С помощью этих ЭВМ создавались первые экспериментальные вычислительные системы и сети.<br />
<br />
Компьютеры третьего поколения стали широко использоваться в качестве технической базы для самых различных автоматизированных систем - бухгалтерских и банковских систем, банков данных, систем автоматизации проектирования и производства и т. п. В это время появились первые администраторы баз данных и информационные службы по эксплуатации автоматизированных систем.<br />
<br />
Четвертое поколение - это компьютеры, создаваемые на базе серийных микропроцессоров. С этого поколения ЭВМ началось массовое производство и распространение персональных компьютеров, которые могут устанавливаться на любом рабочем столе - дома, на работе или в офисе.<br />
<br />
Персональные ЭВМ широко используются для учебы, игры, написания писем, книг и отчетов, ведения бухгалтерской документации и экономических расчетов, проведения научных и маркетинговых исследований, сочинения стихов и музыки, ведения переписки с коллегами и друзьями.<br />
<br />
Применение компьютеров в жизни общества затрагивает условия деятельности и жизни миллионов людей. Современные персональные компьютеры прежде всего открывают возможность выхода в сеть <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и оперативного поиска и получения различной информации в форме электронной почты, электронных журналов, газет и библиотек из самых различных стран и регионов, электронной коммерции - покупок и продаж по всему миру.<br />
<br />
В серии ЭВМ четвертого поколения используются и более мощные компьютеры, получившие название серверов - вычислительных машин с большим объемом памяти, используемых для постоянного хранения больших объемов информации. Именно такие серверы и используются в качестве узлов связи в вычислительных системах и сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Академик В.М. Глушков еще в начале 80-х годов писал, что «к началу следующего столетия в развитых странах основная масса информации будет храниться в памяти ЭВМ, а человек XXI века, который не будет уметь пользоваться ЭВМ, будет подобен человеку XX века, не умевшему ни читать, ни писать».<br />
<br />
Обучение компьютерной грамотности - умениям работать с персональными ЭВМ - является основной целью курса информатики в массовой школе. Современное понимание компьютерной грамотности предполагает не только умения читать, писать и считать с помощью персональных ЭВМ, но и умения искать и передавать информацию с помощью <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Целью вузовского курса информатики считается освоение профессионального использования персональных компьютеров и решения на ЭВМ профессиональных задач. Для развития этих умений необходима определенная культура и развитие логического мышления.<br />
<br />
Эффективное использование ЭВМ предполагает наличие информационной культуры - умений искать, передавать и подготавливать информацию в форме текстов и рисунков с помощью персональных компьютеров и сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Развитие этой культуры ведет к более глубокому развитию логического мышления.<br />
<br />
Логическое мышление проявляется в умении решать различные интеллектуальные задачи и в том числе в решении сложных задач с помощью ЭВМ. Эти интеллектуальные способности выражаются в умениях рассуждать, доказывать, ставить задачи, а также подбирать и обосновывать способы их решения.<br />
<br />
Сложность изучения информатики как индустрии связана с ее беспрецендентной динамичностью - технические средства информатики - компьютеры, <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> и средства телекоммуникаций полностью модернизируются каждые пять-шесть лет, а соответствующие технические знания обновляются каждые два-три года. Одновременно модернизируются компьютерные сети, архивы, библиотеки и информационные системы.<br />
<br />
Подготовка и издание новой учебной литературы требует, как правило, от трех до пяти лет. Поэтому учебная литература не поспевает за темпами обновления вычислительной техники. Угнаться за такими темпами обновления техники могут только электронные средства - электронная пресса, электронные справочники, электронные учебники и технологии, связанные с использованием персональных ЭВМ и сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
В то же время информатика как научная дисциплина сохраняет свое ядро - общие принципы, законы и методы, организации вычислений и обработки информации с помощью ЭВМ. Эти принципы сохранят свою роль и значение для всех моделей и типов ЭВМ независимо от их элементной базы, быстродействия и объемов памяти.<br />
<br />
Более того общие законы информатики как общие законы интеллектуальной деятельности сохраняют свою силу при изучении принципов обработки, накопления и передачи информации не только в ЭВМ, но и в живых организмах и человеческом обществе.<br /><br />
В о п р о с ы<br /><br />
1. Что такое информация?<br />
<br />
2. Что такое информатика?<br />
<br />
3. Где будет храниться информация в XXI веке?<br />
<br />
4. Что такое компьютерная грамотность?<br />
<br />
5. Что такое информационная культура?<br />
<br />
6. Что такое логическое мышление?<br />
<br />
7. В чем сложность изучения информатики?<br /><br />
1.2. Персональные компьютеры<br /><br />
Компьютеры - это универсальные электронные вычислительные машины (ЭВМ), используемые для накопления, обработки и передачи информации. Самое широкое распространение получили персональные компьютеры, предназначенные для индивидуальной работы.<br />
<br />
Персональные компьютеры - это малогабаритные вычислительные машины, которые могут быть установлены на любом рабочем месте. Наиболее известны и распространены персональные компьютеры IBM PC и Macintosh.<br />
<br />
Минимальный состав персональных компьютеров:<br />
<br />
1) системный блок;<br />
<br />
2) дисплей;<br />
<br />
3) клавиатура.<br />
<br />
Дисплей - это устройство отображения информации на электронном экране. Дисплеи в персональных компьютерах могут быть цветными и черно-белыми. Информация на дисплеях обычно отображается как в телевизоре - на экране электронно-лучевой трубки.<br /><br />
Общий вид персонального компьютера<br /><br />
Клавиатура содержит клавиши, как правило, латинского и русского алфавитов. Кроме того, на клавиатуре имеются цифры и другие специальные знаки. Нажимая на эти клавиши, можно вводить в компьютер самую разную информацию - числа, слова, фразы, а также команды управления компьютером.<br />
<br />
Мышка - устройство, которое подсоединяется к персональному компьютеру электрическим шнуром и которое можно перемещать по столу.<br />
<br />
Системный блок содержит процессор и оперативную память. Возможности компьютеров зависят от типа и быстродействия процессора, а также от объемов оперативной и долговременной памяти. Во всех современных персональных компьютерах в системный блок входят также накопители на магнитных дисках.<br />
<br />
Процессор - это устройство управления компьютером. Быстродействие компьютеров определяется числом операций, выполняемых процессором за одну секунду. Основной функцией процессоров является автоматическое управление работой ЭВМ с помощью программ, размещаемых в оперативной памяти.<br />
<br />
В компьютерах первого поколения быстродействие процессоров составляло несколько тысяч операций в секунду; второго поколения - несколько десятков тысяч, а в машинах третьего поколения - несколько сотен тысяч операций в секунду.<br />
<br />
Быстродействие персональных компьютеров четвертого поколения - несколько миллионов операций в секунду. В компьютерах следующих поколений быстродействие будет составлять десятки и даже сотни миллионов операций в секунду.<br />
<br />
В персональных компьютерах IBM PC используются процессоры фирмы Intel. В компьютерах младших моделей процессоры Intel - 86, 286, 386 и 486, а в старших моделях процессоры серии Pentium - Pentium, Pentium II, Pentium III и т. д. В персональных компьютерах Macintosh применяются процессоры фирмы Motorola.<br />
<br />
Программа - это последовательность команд и данных, которые могут интерпретироваться ЭВМ. <A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A> определяют конкретные функции и роли ЭВМ от игрового автомата и редактора текстов до рабочего места президента крупной фирмы или страны.<br />
<br />
Минимальной единицей информации считается бит. Бит - это величина, принимающая значение 0 или 1. Любая другая информация может быть закодирована последовательностью из нулей и единиц. Именно в таком виде вся информация представляется в памяти ЭВМ.<br />
<br />
Единицей памяти в современных ЭВМ считается байт. Байты - это 8-разрядные двоичные числа вида - 00000000, 00000001, ..., 11111111. Один байт записывается в виде 8 двоичных знаков информации - нулей и единиц:<br /><br />
1 байт = 8 бит.<br /><br />
Для измерения памяти большого объема используются следующие единицы:<br /><br />
1 Кбайт = 1024 байт   (1 килобайт);<br />
<br />
1 Мбайт = 1024 Кбайт (1 мегабайт);<br />
<br />
1 Гбайт = 1024 Мбайт (1 гигабайт).<br /><br />
Машины первого поколения имели оперативную память порядка нескольких килобайт, компьютеры второго поколения - десятки килобайт, а машины третьего поколения - сотни килобайт.<br />
<br />
Оперативная память в персональных компьютерах типа IBM PC и Macintosh составляет несколько мегабайт. В больших современных ЭВМ объем оперативной памяти достигает порядка десятков мегабайт, а в компьютерах новых поколений - сотни и тысячи мегабайт.<br />
<br />
Для долговременного хранения информации и программ в персональных компьютерах используются магнитные диски - гибкие и жесткие. Информация в оперативной памяти удаляется после выключения компьютера. Информация на магнитных дисках может храниться после выключения ЭВМ до следующих сеансов работы.<br />
<br />
Жесткие диски - это устройства хранения информации, программ и данных в ЭВМ. В персональных компьютерах жесткие диски находятся внутри системного блока и служат для постоянного хранения программ, данных, архивов и т.п.<br />
<br />
Объем памяти на жестких дисках в современных компьютерах имеет диапазон от нескольких мегабайт до нескольких гигабайт. В компьютерах новых поколений объем памяти на жестких магнитных дисках будет составлять десятки и сотни гигабайт.<br />
<br />
Гибкие диски - это сменные носители информации, на которых <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> и данные можно хранить отдельно от ЭВМ. Гибкие диски используются для личного хранения и переноса программ и данных от одного компьютера к другому. Объем памяти на наиболее широко распространенных гибких магнитных дисках составляет от 360 Кбайт до 1,4 Мбайт.<br />
<br />
К современным персональным компьютерам может быть подсоединен целый ряд дополнительных устройств. Наиболее часто к ним подключаются принтеры, модемы и компакт-дисководы. Компакт-дисковод - это устройство для считывания компакт-дисков.<br />
<br />
Компакт-диск - это оптические диски с голографической записью информации. Особенность компакт-дисков - большой объем записанной на них информации, равной объему порядка 500 гибких дисков.<br />
<br />
Компакт-диски - это средство для постоянного хранения информации, которая записывается один раз и может многократно считываться на ЭВМ. Компакт-диски - наиболее удобное средство для переноса больших объемов информации. Объем памяти на компакт-дисках составляет до 780 Мбайт.<br />
<br />
Принтер - это печатающее устройство, подсоединяемое к компьютерам. Наибольшее распространение получили три типа принтеров, различающихся скоростью и качеством печати: матричные, струйные и лазерные. Самые простые и дешевые среди них - матричные, самые быстрые и качественные - лазерные, а струйные - самые качественные среди дешевых принтеров.<br />
<br />
Модем - это устройство передачи информации по линиям телефонной связи. С помощью модемов персональные компьютеры могут подключаться через телефонную сеть к другим компьютерам, а также входить в различные телекоммуникационные компьютерные сети.<br />
<br />
Скорость передачи информации по линиям связи оценивается в бодах и килободах. Скорость в один бод - это передача одного бита в секунду:<br />
<br />
1 бод = 1 бит/секунда. <br />
<br />
1 Кбод = 1024 бод.<br /><br />
В о п р о с ы<br /><br />
1. Какие устройства входят в состав персональных компьютеров?<br />
<br />
2. Что такое процессор?<br />
<br />
3. Каково быстродействие современных процессоров?<br />
<br />
4. В каких единицах измеряется объем памяти компьютеров?<br />
<br />
5. Каков объем оперативной памяти современных компьютеров?<br />
<br />
6. Каковы объемы памяти на гибких дисках?<br />
<br />
7. Каковы объемы памяти на жестких дисках?<br />
<br />
8. Каковы объемы памяти на компакт-дисках?<br /><br />
1.3. Работа на персональных ЭВМ<br /><br />
Работа на ЭВМ обычно проходит в форме диалога человека с компьютером. Человек просматривает информацию на экране компьютера, указывает на нее мышкой, нажимает клавиши, набирает команды, вводит слова, числа, фразы и т. п. В ответ компьютер выводит свою информацию: сообщения, меню, заставки, диаграммы, <A href="http://www.sunhome.ru/image/35"><font class="normal">рисунки</font></A>, результаты вычислений и обработки данных.<br />
<br />
Работа ЭВМ основана на использовании программ. <A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A> для ЭВМ - это форма представления данных и команд, предназначенных для получения определенных результатов или способа функционирования ЭВМ.<br />
<br />
Совокупность программ для данного типа ЭВМ определяет все многообразие их применений. На персональных компьютерах наиболее часто применяются игры, редакторы текстов, базы данных, информационные системы, электронные таблицы, системы програм-мирования и т. п.<br />
<br />
Главной среди программ на ЭВМ является операционная система, которая постоянно хранится в долговременной памяти компьютера. Работа ЭВМ начинается с загрузки операционной системы, а все остальные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> запускаются с помощью операционной системы.<br />
<br />
Операционная система - это главная программа, управляющая работой компьютера в целом. На персональных компьютерах типа IBM PC используются в основном операционные системы MS DOS и Windows. В персональных компьютерах Macintosh применяется операционная система OS/7.<br />
<br />
Операционная система MS DOS - это самая простая операционная система для компьютеров IBM PC. Она используется на всех младших моделях IBM PC и может применяться на всех старших моделях компьютеров этого же типа.<br />
<br />
Операционная система Windows - наиболее современная и удобная операционная система для старших моделей персональных компьютеров IBM PC. Эта система может использоваться только на компьютерах старших моделей с оперативной памятью более 2 Мбайт и памятью на жестких дисках не менее 80 Мбайт.<br />
<br />
На персональных компьютерах IBM PC используются несколько версий операционной системы Windows; созданных всемирно известной фирмой Microsoft: Windows 3.1, Windows-95, Windows-98, Windows-2000, отличающихся своими функциями и возможностями.<br />
<br />
Основными объектами во всех операционных системах на ЭВМ являются файлы, <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> и каталоги. Все <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> в ЭВМ представляются отдельными файлами или наборами файлов, хранящихся в определенном каталоге.<br />
<br />
Файлы - это последовательность записей на машинных носителях - магнитных или оптических дисках, магнитных или перфолентах и т.п. Все данные и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ записываются в виде файлов или наборов файлов. Все файлы в памяти ЭВМ имеют уникальные имена.<br />
<br />
Совокупности файлов в памяти ЭВМ объединяются в форме каталогов и подкаталогов. Каждый каталог имеет свое уникальное имя. Имя подкаталога образуется из его собственного имени и имени каталога, в котором он находится. Имена каталогов (оглавлений) записываются большими (прописными) буквами, а имена файлов - малыми (строчными) буквами.<br />
<br />
В операционных системах MS DOS и Windows имена файлов образуются из латинских букв и цифр с добавлением трехбуквенных окончаний после точки. Для записи окончаний в этих операционных системах приняты правила:<br />
<br />
.ехе - программа, готовая к выполнению;<br />
<br />
.com - программа, готовая к выполнению;<br />
<br />
.bat - командный файл операционной системы;<br />
<br />
.txt - текстовый файл;<br />
<br />
.doc - текстовый файл.<br />
<br />
Работа с любыми операционными системами - это в основном работа над каталогами файлов и программ, размещенных на магнитных и оптических дисках. Эта работа состоит в просмотре каталогов и подкаталогов, копировании файлов и запуске тех или иных программ.<br />
<br />
В любой современной операционной системе работа с ЭВМ происходит в основном с помощью менеджеров программ и файлов. Эта программа позволяет человеку в диалоге с компьютером просматривать каталоги программ и файлов во внешней памяти:<br /><br />
С:							А:<br />
<br />
Name	Name	Name	Name	Name	Name<br />
<br />
…	begin.bat	file2.dat	TUTOR	MUSIC	<br />
<br />
DOS	prog1.exe		TEACHER	GRAF	<br />
<br />
NC	prog2.exe		CALC	DOC	<br />
<br />
KAYMIN	text1.txt		EDIT		<br />
<br />
BOOK	text2.txt		BASE		<br />
<br />
PAСET	file1.dat		PROLOG		<br />
<br />
text1.txt	4096	26.12.96	6720 bytes in 1 files selected<br /><br />
В приведенном примере указаны два каталога: каталог на жестком диске С, на котором размещена операционная система DOS, и каталог на гибком диске А с пакетом программ, включающим электронный учебник TEACHER, клавиатурный тренажер TUTOR и другие учебные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> из пакета программ для лабораторных работ по информатике.<br />
<br />
Запуск программ на персональных ЭВМ обычно проводится перемещением курсора на экране с помощью клавиш-стрелок или мышки на имя <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> в каталоге, подлежащей выполнению, а затем - нажатием клавиши ввода Enter на клавиатуре либо нажатием клавиши на мышке.<br />
<br />
Для установки новых программ на ЭВМ они должны быть предварительно записаны на оптическом или гибких дисках, либо получены по электронной почте через <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Для этого диск с новыми программами должен быть установлен в соответствующий дисковод.<br />
<br />
Для перезаписи программ и файлов необходимо выявить каталог, где они записаны; далее указать или создать каталог, куда они должны быть переписаны и только после этого указать команду «запись» и нажать клавишу Enter либо клавишу на мышке.<br />
<br />
В любом случае до записи новых программ на жесткие диски вашей ЭВМ необходимо проверить отсутствие вирусов на этих дисках или в файлах, полученных по <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. При обнаружении вирусов немедленно пролечите эти файлы и диски с помощью антивирусных программ.<br />
<br />
Компьютерные вирусы - это специальные саморазмножающиеся <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>. Эти <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> могут испортить или уничтожить <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> и файлы, хранящиеся в памяти компьютера. Заражение компьютерными вирусами происходит исключительно при копировании файлов с помощью дискет или при их передаче по сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Наиболее опасные вирусы могут испортить или уничтожить всю информацию в ЭВМ и сделать неработоспособным компьютер и даже сеть ЭВМ. Для предотвращения от таких последствий используются специальные меры и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>.                      <br />
<br />
Для защиты от вирусов используются специальные антивирусные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, которые необходимо устанавливать и периодически обновлять на ЭВМ. Работа антивирусных программ заключается в диагностике и удалении компьютерных вирусов в файлах и программах на ЭВМ.<br />
<br />
Для надежной работы Ваших компьютеров и предотвращения потерь информации на дисках придерживайтесь следующих правил «компьютерной гигиены»:<br />
<br />
1) при вводе чужих дисков в свою машину первым делом проверьте их на вирусы;<br />
<br />
2) после работы на чужой машине сразу же проверьте свои диски на вирусы.<br />
<br />
Для защиты от компьютерных вирусов при работе в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> придерживайтесь следующих правил:<br />
<br />
3) не открывайте файлы, полученные по почте, без проверки их на вирусы;<br />
<br />
4) не запускайте <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, полученные по <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, без их проверки на вирусы.<br />
<br />
Для борьбы с компьютерной заразой постоянно обновляйте свои антивирусные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>. Учтите, что «супер-программисты», создающие компьютерные вирусы, постоянно ищут средства и способы для преодоления защиты от вирусов и проникновения в чужие компьютеры.<br />
<br />
Кроме защиты от вирусов на любых ЭВМ может быть предусмотрена также защита от несанкционированного доступа к ЭВМ и хранящимся в них данным. Простейшим средством для этого является введение паролей для доступа к ЭВМ или определенным сегментам ее памяти.<br /><br />
В о п р о с ы<br /><br />
1. Что такое - <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> для ЭВМ?<br />
<br />
2. Каковы основные типы программ?<br />
<br />
3. Что такое операционная система?<br />
<br />
4. Какие операционные системы используются на IBM PC?<br />
<br />
5. Что такое файл на ЭВМ?<br />
<br />
5. Как записываются имена файлов и каталогов на ЭВМ?<br />
<br />
6. Как проводится перезапись программ на компьютере?<br />
<br />
7. Что такое компьютерные вирусы?<br />
<br />
8. Как предохраняться от компьютерных вирусов?<br />
<br />
9. Для чего используются пароли на ЭВМ?<br /><br />
З а д а н и е<br /><br />
1. Проработайте на компьютере с клавиатурным тренажером следующие наборы слов:<br />
<br />
а) русские слова;       	в) английские слова;<br />
<br />
б) числа и формулы;   	г) слова языка Бейсик.<br />
<br />
2. Узнайте, как на Вашем компьютере запускаются антивирусные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>.<br />
<br />
3. Проверьте память своего компьютера на наличие вирусов.<br />
<br />
4. Проверьте свои диски на наличие компьютерных вирусов.<br />
<br />
5. Узнайте - сколько свободной памяти на Ваших дисках.<br /><br />
1.4. Редактирование текстов на ЭВМ<br /><br />
Подготовка и редактирование текстов - это одно из наиболее частых применений персональных компьютеров. Простота и удобство редактирования текстов на ЭВМ привели к тому, что для подобных работ практически перестали использоваться пишущие машинки.<br />
<br />
Редакторы текстов на ЭВМ - это специальные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, позволяющие вводить, искать, редактировать и сохранять различные тексты на ЭВМ вплоть до научных отчетов и литературных произведений, а также личных и служебных архивов.<br />
<br />
Редакторы текстов на ЭВМ - это наиболее удобное средство для подготовки различного рода документов и создания архивов документов на ЭВМ. Ведение такого рода архивов составляет основу работы большого числа людей - бизнесменов, юристов, писателей, ученых, журналистов, инженеров, секретарей, референтов и многих других специалистов.<br />
<br />
Документом считается информация, зафиксированная на материальном носителе, имеющем реквизиты, позволяющие его идентифицировать. К числу реквизитов документа относится фамилия автора (исполнителя) и дата его создания (подписания), а также входящая или исходящая регистрация при размещении его в архивах.<br />
<br />
На персональных компьютерах IBM PC наибольшее распространение получили редакторы текстов Word и Лексикон. Word - это лучший редактор текстов для операционной системы Windows. Лексикон - это один из лучших отечественных редакторов текстов для компьютеров с операционной системой MS DOS.<br />
<br />
В ЭВМ с накопителями на жестких магнитных дисках могут храниться и редактироваться целые <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>. Одна страница текста, имеющая 30 строк по 60 знаков в строке, требует для хранения 1800 байт  » 1,76 Кбайт памяти.<br />
<br />
Книга из 100 страниц указанного размера занимает около 176 Кбайт на магнитных дисках. Соответственно, на дисках объемом 200 Мбайт может храниться более 100 таких книг.<br />
<br />
Набор текстов на клавиатуре компьютера проводится так же, как и на пишущих машинках. Но при этом тексты выводятся не на бумагу, а на экран дисплея, на котором и производятся все исправления. Если текст большой, то на экране будет видна только его часть, а весь текст будет храниться в памяти ЭВМ.<br /><br />
Экран ЭВМ:<br /><br />
Я помню чудное мгновенье:<br />
<br />
Передо мной явилась ты,<br />
<br />
Как мимолетное виденье,<br />
<br />
Как гений чистой &#220;<br /><br />
Значок &#220; для указания на экране места исправления символа или слова называется курсором. Перемещение курсора по экрану проводится с помощью мышки или клавиш стрелок. Для исправления букв, слов или фраз курсор подводят к их началу.<br />
<br />
Исправления в тексте на персональных компьютерах можно вносить неоднократно. Вставка или замена символов и слов проводится набором их на клавиатуре. Удаление символов и слов выполняется нажатием клавиши Del или Bs. Для переключения режима вставка/замена нажимается клавиша Ins. Удаление строк и вставка новых строк проводятся выделением их на экране с последующим нажатием клавиши Del.<br />
<br />
Используя выделение фрагментов текстов на экране компьютера, их можно переносить из одного места текста в другое. Можно выделять их курсивом, подчеркиванием, изменением толщины или вида шрифта.<br />
<br />
В многооконных редакторах фрагменты можно переносить из одного текста в другой. Для этого на экране одновременно открывается два или более текстов сразу в нескольких окнах.<br />
<br />
Поиск текстов на магнитных дисках также проводится через основное меню указанием на слово «файл» (file), а затем на режим «открытие» (open). Результатом будет появление оглавления с именами файлов и других каталогов, на которые можно указывать с помощью мышки или клавиш-стрелок. Нажатие клавиши Enter приведет к появлению текста на экране ЭВМ.<br />
<br />
Запись текстов на диски в редакторах проводят обращением к основному меню, указав на слово «файл» (file). Далее в появившемся на экране подменю нужно указать вид операции - «запись»(write), а затем имя файла, под которым текст записывается на магнитные диски, после чего нажимается клавиша ввода Enter.<br />
<br />
Во многих редакторах можно создавать сложные тексты, вставляя различные таблицы, диаграммы, <A href="http://www.sunhome.ru/image/35"><font class="normal">рисунки</font></A> и даже фотографии. С помощью этих средств можно создавать письма, документы и отчеты, сохраняя их на магнитных дисках и печатая в необходимом количестве экземпляров.<br />
<br />
Возможности современных текстовых редакторов на персональных ЭВМ таковы, что с их помощью можно выполнять не только редакционную подготовку документов, писем и отчетов, но и издательскую подготовку газет, журналов и книг практически в домашних условиях.<br />
<br />
Создание книг на ЭВМ приводит к появлению электронных книг и журналов как новых видов литературных произведений. Копирование и распространение электронных книг, газет и журналов должно подчиняться законам авторского права, так же как и создание и распространение бумажных книг, журналов и газет.<br /><br />
Авторские права на произведения состоят в следующем:<br />
<br />
1) право на имя - в произведении должно присутствовать имя автора;<br />
<br />
2) право на изменения - только автор может вносить изменения в произведение;<br />
<br />
3) имущественные права - автор является собствеником созданного произведения.<br />
<br />
Автором считается лицо, творческим трудом которого создано произведение. Автор имеет права требовать указания своей фамилии на всех экземплярах (копиях) своего произведения. В соответствии с законом об авторских правах только автор может вносить изменения при модификации произведения.<br />
<br />
Защита прав собственности на произведение фиксируется знаком © (copyright - права на копирование) с указанием фамилии или псевдонима автора. Включение в произведение копирайта (знака ©) означает, что никто не имеет права копировать произведения без заключения письменного договора с его автором (авторами).<br />
<br />
Согласно международному праву на электронные <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>, учебники, базы данных и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> для ЭВМ распространяются те же авторские права, как и на обычные литературные произведения.<br />
<br />
Использование программ, баз данных, электронных книг и учебников в коммерческих целях возможно только при заключении договоров с владельцами авторских прав. Нарушители авторских прав обязаны возмещать ущерб издателям и авторам произведений.<br /><br />
В о п р о с ы<br /><br />
1. Что такое редактор текстов?<br />
<br />
2. Что такое - документ?<br />
<br />
3. Каковы основные операции редактирования текстов?<br />
<br />
4. Сколько страниц текста может быть записано:<br />
<br />
а) на кассете магнитной ленты с объемом памяти 100 Кбайт;<br />
<br />
б) на гибком диске с объемом памяти 1 Мбайт?<br />
<br />
5. Как тексты записываются на магнитные диски?<br />
<br />
6. Как узнать, какие тексты хранятся в памяти компьютера?<br />
<br />
7. Что такое авторские права на произведение?<br />
<br />
8. В чем состоят имущественные права авторов?<br />
<br />
9. Как называются нарушители авторских прав?<br /><br />
З а д а н и я<br /><br />
1. Введите с помощью редактора текстов любимое четверостишие, выведите его на бумагу и запишите на магнитные диски.<br />
<br />
2. Подготовьте текст поздравления с Новым годом для родителей, близких и друзей. Выведите на печать два-три поздравления для разных адресатов.<br />
<br />
3. Перепишите четверостишие и поздравления на ваши диск и попробуйте прочитать их с помощью диспетчера файлов или <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> Norton Commander.<br />
<br />
4. Подготовьте на ЭВМ договор на издание сборника ваших рассказов с указанием Ваших авторских прав.<br /><br />
1.5. Контроль знаний на ЭВМ<br /><br />
Контроль и проверка знаний при дистанционном, заочном и очном обучении может производиться с помощью персональных ЭВМ. В этих целях создаются и используются специальные компьютерные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, получившие название электронных учебников.<br />
<br />
Электронные учебники - это компьютерные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, содержащие учебные тексты и тесты. Тесты - это контрольные вопросы. Тесты в электронных учебниках отличаются тем, что ответы на них проверяются ЭВМ непосредственно в диалоге с учащимися.<br />
<br />
Основные возможности электронных учебников состоят в следующем. Электронные учебники могут использоваться:<br />
<br />
1) для проверки знаний на занятиях с использованием ЭВМ;<br />
<br />
2) в качестве экзаменатора на зачетах и экзаменах;<br />
<br />
3) в качестве тренажеров на самостоятельных занятиях с ЭВМ.<br />
<br />
Примером может служить электронный учебник по информатике, являющийся приложением к настоящему бумажному учебнику. Этот электронный учебник используется для контроля знаний студентов и школьников по информатике на зачетах и текущих занятиях, а также при подготовке и сдаче экзаменов.<br />
<br />
Особенностью данного электронного учебника является его связь с бумажным учебником. Все тексты электронного учебника взяты из настоящего учебника и все ответы на тесты электронного учебника можно найти в данном учебном пособии.<br />
<br />
Электронным учебником по информатике можно пользоваться на компьютерах IBM PC с операционными системами MS DOS и Windows. В среде MS DOS запуск электронного учебника осуществляется из каталога TEACHER, в котором находится программа, с помощью команды<br /><br />
> menu<br /><br />
Если запуск прошел успешно, то на экране появится заставка с названием <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, а затем - окно регистрации, в котором необходимо указать свою фамилию, имя и группу:<br /><br />
Информация    Регистрация    Работа    Темы    Протокол    Выход<br /><br />
Зарегистрируйтесь:<br />
<br />
Фамилия: ___________<br />
<br />
Имя: ______________<br />
<br />
Группа: _____________<br />
<br />
Дата:     01/01/1998<br /><br />
После регистрации на экране появляется основное меню электронного учебника. Работа с электронным учебником проходит в режиме диалога с ЭВМ в трех основных режимах:<br />
<br />
1) чтение разделов учебника;<br />
<br />
2) обучение с использованием тестов; <br />
<br />
3) контроль знаний учащихся.<br /><br />
В режиме «чтение» на экране можно читать разделы электронного учебника, организованные в главы и разделы точно так же, как и в бумажном учебнике. Пример оглавления:<br /><br />
Информация 	Регистрация 	Работа 	Темы 		Протокол    Выход<br /><br />
Иванов<br /><br />
Глава 1. Информация и персональные ЭВМ <br />
<br />
Глава 2. Элементы информационных технологий <br />
<br />
Глава 3. Элементы «искусственного интеллекта» <br />
<br />
Глава 4. Алгоритмы и начала программирования <br />
<br />
Глава 5. Технология решения задач на ЭВМ<br /><br />
Пример текста из первого раздела учебника:<br /><br />
Информация 	Регистрация 	Работа 	Темы 		Протокол 	Выход<br /><br />
Иванов<br /><br />
Глава 1.1. Информация и персональные ЭВМ <br />
<br />
1.1.1. Введение в информатику<br />
<br />
Информатика - это научная дисциплина, изучающая законы и методы накопления, обработки и передачи информации с помощью ЭВМ. Накопление, передача и обработка информации происходит не только внутри ЭВМ, но и при общении людей, в технических устройствах, в живых организмах и в жизни общества.<br /><br />
В режиме чтения тексты можно перелистывать с помощью клавиш стрелок и клавиш пролистывания страниц вверх-вниз. Смена темы проводится через основное меню, расположенное на верхней строке экрана.<br />
<br />
Контрольные вопросы можно получить в режимах контроля и обучения. Разница между ними заключается в том, что в режиме контроля на экране появляется только сам контрольный вопрос, а в режиме обучения на экране можно читать и перелистывать текст соответствующего раздела.<br />
<br />
Пример контрольного вопроса:<br /><br />
Информация 	Регистрация 	Работа 	Темы		Протокол   Выход <br /><br />
Иванов<br /><br />
Глава 1.1. Информация и персональные ЭВМ <br />
<br />
1.1.1. Введение в информатику<br /><br />
Контрольный вопрос<br /><br />
Информация - [_____] о ком-то<br />
<br />
или о [_____], передаваемые<br />
<br />
в форме [____] и сигналов.<br /><br />
Ответы на контрольные вопросы вводятся с клавиатуры в места соответствующих пропусков. Слова могут вводиться в любом порядке и при необходимости тут же исправляться. Оценка ответа будет выведена ЭВМ на экран сразу после нажатия клавиш Ctrl и Enter.<br />
<br />
Ответ считается правильным, если получится фраза, выражающая истинное утверждение. Эталонные правильные ответы можно найти в соответствующем разделе бумажного или электронного учебника.<br />
<br />
ЭВМ выводит на экран оценку «молодец», если ответ полностью совпадет с соответствующей фразой в учебнике. Оценка «хорошо», «нехорошо» и «плохо» будет выводиться ЭВМ в зависимости от числа совпадений и количества введенных слов.<br />
<br />
Оценка «хорошо» ставится, если не менее 50% слов совпадают с эталоном из учебника. В случаях, когда более половины слов отличается от эталонных ответов, выводится оценка «нехорошо». Оценка «плохо» выводится, если не введено ни одного слова.<br />
<br />
В режиме обучения правильный ответ к контрольному вопросу можно найти с помощью подсказки, нажав клавишу F6. В результате на экране появится раздел учебника с эталонным ответом, который можно найти перелистывая текст раздела. Возврат к контрольному вопросу произойдет после повторного нажатия клавиши F6.<br />
<br />
Все контрольные вопросы составлены исключительно по материалам учебника и в нем всегда можно найти все ответы на все контрольные вопросы. Поэтому в режиме обучения, используя доступ к текстам учебника, при внимательной работе можно получать исключительно отличные и положительные оценки.<br />
<br />
Режим обучения особенно удобен при самостоятельной подготовке к зачетам и экзаменам. Именно при работе в этом режиме могут быть проработаны все контрольные вопросы по заданному разделу учебника и по всему учебнику в целом.<br />
<br />
Педагогический эффект от работы с рассматриваемыми тестами заключается в том, что заполнение тестов требует нахождения, запоминания, проговаривания и ввода слов-ответов с клавиатуры. При этом при анализе ответа необходимо осмысление подбираемых фраз на предмет их истинности.<br />
<br />
Работа с электронными учебниками позволяет не только мгновенно сообщать оценки каждого теста учащемуся, но и работать в удобном темпе, используя тексты учебника и получая подсказки от ЭВМ. При этом с компьютером можно заниматься столько - сколько нужно для получения положительных или отличных оценок.<br />
<br />
Работу по контролю знаний на традиционных занятиях в школах и вузах стараются выполнять учителя и преподаватели. Однако при групповом обучении они не могут опросить в течении занятия всех учащихся и поэтому они не могут дать гарантий в результатах обучения всем своим ученикам.<br />
<br />
Определенным выходом для традиционных форм обучения могло бы служить использование бумажных тестов, которые позволяют проверять знания всех учащихся по любому из текущих занятий. Однако проверка этих бумажных материалов весьма трудоемка для преподавателей и они минимизируют или игнорируют эту работу.<br />
<br />
Компьютерный контроль знаний позволяет освободить преподавателей и учителей от весьма трудоемкой и рутинной работы по проверке всех результатов тестирования. Эту работу на себя вполне могут взять персональные компьютеры, снабженные соответствующими электронными учебниками.<br />
<br />
Однако наиболее эффективно обучение с использованием электронных учебников происходит при контроле и руководстве преподавателей, которые организуют систематический контроль знаний и решение задач по всему курсу.<br />
<br />
Проверка знаний в представляемом электронном учебнике происходит в режиме «контроль». В этом режиме на экран выводятся только тесты по выбранной теме без каких либо подсказок. Оценка ответа выводится на экран ЭВМ сразу же после его ввода с клавиатуры.<br />
<br />
При этом все ответы записываются в протокол на магнитных дисках, который можно увидеть на экране по завершении серии тестов по выбранной теме. По завершении серии тестов на экран выводятся итоги прохождения проработанной темы в следующей форме:<br /><br />
-----------------------------------------------------------------------<br />
<br />
> Количество тестов =15<br />
<br />
> Отлично =11<br />
<br />
> Хорошо = 3<br />
<br />
> Нехорошо = 1<br />
<br />
> Плохо = 0<br />
<br />
>!> Совпало ответов = 87 % 
<br />
>!> 0тсутствуют ответы = 0 % 
<br />
-----------------------------------------------------------------------------------<br />
<br />
Окончательных оценок компьютер не ставит. Задача компьютера состоит в сборе статистики ответов и ведении протокола ответов в режиме «контроль». Оценка ответов выводится учащимся на экран сразу после проработки серии тестов по текущей теме.<br />
<br />
Проставление окончательных оценок остается за преподавателями, которые должны просматривать протоколы ответов с учетом возможных альтернативных правильных ответов учащихся. Если ответ учащегося правильный, но отличается от эталонного ответа в учебнике, то преподаватель обязан скорректировать окончательную оценку за этот ответ и итоговые оценки за работу в целом.<br />
<br />
Протокол ответов можно увидеть на экране через главное меню, не завершая работы с электронным учебником. Пример протокола диалога с компьютером при работе с электронным учебником по информатике:<br /><br />
Фамилия: Чуков <br />
<br />
Имя: Андрей <br />
<br />
Группа: 434 <br />
<br />
Дата: 10/01/1997<br />
<br />
################################### <br />
<br />
Режим: Контроль<br />
<br />
###################################<br />
<br />
>@ Глава 2. Элементы информационных технологий. <br />
<br />
>@ 2.4. Базы знаний на ЭВМ. <br />
<br />
Признак - логическая [характеристика] <br />
<br />
[объекта] / субъекта / [процесса].<br />
<br />
------------------------------------------------------------------------------------<br />
<br />
Определение понятия - совокупность [признаков], <br />
<br />
характеризующих [содержание] понятия.<br />
<br />
------------------------------------------------------------------------------------<br />
<br />
Содержание понятия - совокупность [признаков], <br />
<br />
выделяющих {объект}, отвечающих данному <br />
<br />
понятию, [среди] других [объектов].<br />
<br />
------------------------------------------------------------------------------------<br />
<br />
----------------------------------------------------------------------<br />
<br />
> Количество тестов =15<br />
<br />
> Отлично =11<br />
<br />
> Хорошо = 3<br />
<br />
> Нехорошо = 1<br />
<br />
> Плохо = 0<br />
<br />
>!> Совпало ответов = 87 % 
<br />
>!>Отсутствуют ответы = 0 % 
<br />
----------------------------------------------------------------------------<br />
<br />
*<br /><br />
Такого рода протоколы в виде файлов формируются и автоматически записываются на магнитные диски. Эти протоколы накапливаются и хранятся на ЭВМ. При дистанционных формах обучения эти протоколы в виде файлов могут пересылаться по электронной почте и служить подтверждением результатов проработки учебных материалов.<br /><br />
В о п р о с ы<br /><br />
1. Что такое - электронные учебники?<br />
<br />
2. Что такое - выборочные ответы?<br />
<br />
3. Когда ответ считается правильным?<br />
<br />
4. Когда и как получить подсказки?<br />
<br />
5. Как добиться хорошей успеваемости?<br /><br />
З а д а н и я<br /><br />
1. Зарегистрируйтесь в электронном учебнике.<br />
<br />
2. Сравните оглавления электронного и бумажного учебников.<br />
<br />
3. Пролистайте первый раздел электронного учебника.<br />
<br />
4. Проработайте тесты первого раздела учебника.<br />
<br />
5. Ответьте на контрольные вопросы первого раздела.<br /><br />
Глава 2. ЭЛЕМЕНТЫ ИНФОРМАЦИОННЫХ ТЕХНОЛОГИЙ<br /><br />
2.1. Основные возможности <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A><br /><br />
Новым явлением в жизни общества в конце XX века стало создание глобальной международной компьютерной сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Эта компьютерная сеть для многих людей стала средством оперативного получения самой различной информации - электронных копий газет, писем, журналов, книг, программ, игр и информационных новостей.<br />
<br />
Передача и получение информации с помощью сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> за рубежом стали самым массовым применением персональных компьютеров. Оперативное получение разнообразной информации дома и на работе с помощью персональных ЭВМ становится доступным после подсоединения их к телефонной или телекоммуникационной сети.<br />
<br />
Вычислительная сеть - это объединение ЭВМ, в которой каждый компьютер может передать информацию любому другому компьютеру, подключенному к сети. Главной возможностью вычислительных сетей является доступ к информации, документам и информационным ресурсам, хранящихся на компьютерах, подключенных к сети.<br />
<br />
Информационные ресурсы - совокупность документов в архивах, библиотеках, фондах, банках данных и других информационных системах. В вычислительных сетях информационные ресурсы, хранящиеся в ЭВМ, могут быть доступны с помощью других персональных компьютеров, подключенных к этой сети.<br />
<br />
По количеству объединяемых компьютеров сети подразделяются на локальные, корпоративные, региональные и глобальные. Соответственно можно говорить о корпоративных, региональных и глобальных информационных ресурсах, доступных в этих сетях ЭВМ.<br />
<br />
Локальная вычислительная сеть - это сеть, связывающая компьютеры в одном или нескольких соседних помещениях. Примерами локальных сетей являются кабинеты учебных компьютеров в школах, вузах, офисах и лабораториях.<br />
<br />
Ведущую роль в организации вычислительных систем и сетей играют серверы. Серверы - это мощные компьютеры с большой дисковой памятью, используемые для хранения файлов и программ. Серверы применяются для накопления и передачи общедоступной информации в вычислительных сетях и работают обычно 24 часа в сутки.<br />
<br />
При этом на уровне локальных сетей возникают вопросы организации надежного хранения информации и ее защиты от несанкционированного доступа. Для ведения, надежного хранения и защиты информации в сети привлекаются специалисты, профессия которых получила название - сетевые администраторы.<br />
<br />
Региональная вычислительная сеть объединяет компьютеры в пределах определенного региона. Примерами региональных сетей являются корпоративные сети ЭВМ в банках и корпорациях, а также в промышленных и коммерческих предприятиях.<br />
<br />
Для подключения к региональной сети персональных компьютеров необходимы специальные средства связи - каналы связи, модемы и сетевое программное обеспечение. В качестве средств телекоммуникаций между компьютерами используются обычные телефонные каналы, а также специальные оптоволоконные линии связи либо спутниковые каналы радиосвязи.<br />
<br />
Модемы - это устройства связи ЭВМ с другими компьютерами с использованием каналов связи. Функции модемов состоят в преобразовании данных, представляемых в ЭВМ в виде 0 и 1, в телефонные сигналы с двумя несущими частотами. Основной характеристикой модема является скорость передачи данных, измеряемой в бодах.<br />
<br />
Скорость, наиболее распространенных современных модемов составляет 2400, 9600, 14400, 19200, 22800 и 33600 Бод. Для электронной почты можно использовать любой из этих модемов. Для работы в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> требуются модемы со скоростью передачи не ниже 19200 Бод.<br />
<br />
На уровне регионов и крупных корпораций вопросы защиты и надежного ведения информации, образующей корпоративные информационные ресурсы, является серьезной проблемой. Ошибки в проектировании и эксплуатации корпоративных информационно-вычислительных сетей могут привести к серьезному экономическому ущербу.<br />
<br />
Глобальная сеть объединяет компьютеры, расположенные в различных странах на различных континентах земного шара. Пример глобальной сети ЭВМ - международная компьютерная сеть <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Для подключения к сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> используются специальные сетевые <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>.<br />
<br />
Сетевые <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> - это <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> получения доступа к информации, информационным ресурсам и информационным системам, используемым в вычислительной сети. Примерами таких программ является сетевые пакеты Internet Explourer фирмы Microsoft и Netscape Navigator фирмы Netscape, созданные для рабаты на компьютерах IBM PC с операционной системой Windows.<br />
<br />
Применительно к сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> используется понятие глобальных информационных ресурсов, доступных из любой точки нашей планеты. Развитие сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> является базой для организации хранения и доступа ко всей информации, накапливаемой человеческим обществом.<br />
<br />
Основой современной информационной компьютерной индустрии и сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> является всемирная распределенная сеть электронных библиотек WWW - World Wide Web. Электронные библиотеки в этой сети размещены на специальных серверах.<br />
<br />
Электронные библиотеки в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> организуются с помощью гипертекстов. В форме гипертекстов могут храниться самые различные документы, газеты, журналы, каталоги, прейскуранты, а также всевозможные информационные и информационно-поисковые системы и сетевые <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> - сетевые компьютерные игры, сетевые электронные учебники, сетевые справочники и энциклопедии.<br />
<br />
Гипертекст - это совокупность страниц с текстами, картинками и ссылками на другие страницы. Ссылки могут делаться как на страницы данного гипертекста, так и на страницы любого другого гипертекста, хранящегося в данном компьютере либо даже на любом другом файл-сервере, зарегистрированном в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Для доступа к электронным библиотекам используются специальные гипертекстовые имена, выполняющие роль адреса сервера в сети. Коды, указываемые в адресах, утверждены международным стандартом. Пример - гипертекстовое имя в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> сервера виртуального учебного центра, в котором установлена электронная копия настоящего учебника по информатике вместе с системой контрольных тестов:<br /><br />
www. prometеy. ankey.ru<br /><br />
В рассматриваемом примере имя сервера состоит из четырех частей. Первое слово www - это признак подключения сервера к сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Второе имя prometey - это имя системы дистанционного обучения Прометей. Третье имя ankey - это имя корпорации Анкей, которой принадлежит данный сервер. Последнее четвертое слово ru - это идентификатор сектора России в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br />
<br />
Примерами электронных библиотек в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> могут служить серверы различных центральных газет, журналов - сервер газеты Известия, сервер журнала Итоги, сервер радиостанции Русское Радио.<br />
<br />
В <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>е Вы можете найти несколько игровых серверов, а также серверы Центров дистанционного обучения ведущих московских и российских вузов - МЭСИ (Московский государственный университет Экономики, Статистики и Информатики) и МИЭМ (Московский Институт Электроники и Математики).<br />
<br />
Электронная почта - это способ передачи писем с помощью персональных компьютеров и средств телекоммуникаций. В качестве писем по электронной почте могут пересылаться самые различные текстовые файлы, изображения, <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> и наборы данных.<br />
<br />
Текст письма для отправки его по электронной почте должен быть подготовлен на компьютере в виде текстового файла и оформлен в соответствии со стандартами <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>. Общепринятый формат послания состоит из заголовка и непосредственно сообщения, роль которого может играть любой текстовый файл, рисунок или программа.<br />
<br />
Стандартный заголовок электронного письма выглядит следующим образом:<br /><br />
From:   	адрес отправителя <br />
<br />
То:     		адрес получателя<br />
<br />
Сс:     		другие адреса отправки <br />
<br />
Subject: 	тема сообщения<br /><br />
Пример почтового адреса в сети Интерент:<br /><br />
vitkay@mail.ru<br /><br />
Первое имя vitkay - это идентификатор владельца электронного почтового ящика. Второе имя - адрес почтового сервера mail.ru. Здесь mail - идентификатор отечественной почтовой системы Mail-Ru, в которой любой из Вас может открыть себе бесплатный электронный почтовый ящик.<br />
<br />
Для поиска информации в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> в нашей стране и за рубежом используется несколько информационно-поисковых систем. Среди отечественных систем наиболее известны системы Апорт, Ремблер и Яндекс, зарубежных - Altavista, Infoseek, Yahoo.<br />
<br />
Поиск информации в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> этими системами производится по запросам. Простейшие запросы состоят из одного или нескольких слов на русском или английском языках, либо на другом языке, на котором записаны искомые документы.<br />
<br />
Результатом поиска в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> являются перечни названий и адресов гипертекстов, отвечающих заданным запросам. Например, на запрос «Кайман информатика» поисковые системы предоставят список всех гипертекстов, доступных в <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>е и в которых указаны слова «Каймин» и «информатика». В том числе в этом списке будут указаны адреса серверов, на которых размещены сетевые электронные учебники по информатике.<br />
<br />
Указанные поисковые системы еженедельно просматривают все серверы в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и индексируют все найденные гипертексты, запоминая их адреса и встречающиеся в них ключевые слова и словосочетания. По этой причине любая информация, выставленная в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, может быть найдена по интересующим нас запросам.<br /><br />
В о п р о с ы<br /><br />
1. Что такое <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>?<br />
<br />
2. Что такое вычислительная сеть?<br />
<br />
3. Какими бывают вычислительные сети?<br />
<br />
4. Что такое сервер?<br />
<br />
5. Что такое - информационные ресурсы?<br />
<br />
6. Что такое WWW?<br />
<br />
7. Что такое гипертекст?<br />
<br />
8. Что такое электронная почта?<br />
<br />
9. Как образуются адреса в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>?<br />
<br />
10. Как ищется информация в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>?<br /><br />
З а д а н и я<br /><br />
1. Найдите в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> сервер радиостанции «Русское радио».<br />
<br />
2. Найдите в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> сервер газеты Известия.<br />
<br />
3. Найдите в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> игровой сервер.<br />
<br />
4. Найдите в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> вузы, занимающиеся дистанционным обучением.<br />
<br />
5. Найдите в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> серверы с рефератами по истории и литературе.<br />
<br />
6. Откройте себе почтовый ящик в <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>.<br /><br />
2.2. Базы данных на ЭВМ<br /><br />
Одним из видов информационных технологии на основе ЭВМ являются базы данных. В отличии от обычных файлов базы данных допускают определенные процедуры поиска и выборки информации, хранящейся в памяти вычислительных машин.<br />
<br />
База данных - это совокупность данных, хранящихся в долговременной памяти ЭВМ и допускающих определенные способы поиска информации. В форме баз данных могут храниться различные сведения: расписание движения поездов, автобусов и самолетов, сведения о наличии товаров в магазине или на складе, сведения о студентах, преподавателях и сотрудниках, информация о книгах и многое, многое другое.<br />
<br />
Информация в базах данных может быть организована несколькими способами. Табличная форма - наиболее простая и распространенная форма организации баз данных, получившая название реляционной. Пример таблицы:<br /><br />
Фамилия 		Имя 		       Рост 		Вес 		          Глаза<br />
<br />
Иванов	Саша	180	85	синие<br />
<br />
Петрова	Оля	165	65	карие<br />
<br />
Сидоров	Миша	190	75	зеленые<br /><br />
Реляционные базы - это базы данных, в которых информация хранится в форме таблиц. Каждая из таблиц в такой базе данных имеет строго определенное число столбцов, снабженных именами.<br />
<br />
В рассматриваемом примере таблица имеет пять столбцов с именами фамилия, имя, рост, вес и глаза. В каждом из столбцов могут записываться данные определенного типа - числового или символьного. Так в столбцах вес и рост записываются числовые данные, а в столбцах фамилия, имя и глаза записывается символьная информация.<br />
<br />
Данные об объектах, людях или вещах в этих таблицах записываются в виде строк. В приведенном примере сведения о росте, весе и цвете глаз Петровой Оли записаны во второй строке.<br />
<br />
Порядок строк в таблицах задается при вводе данных. Однако во многих базах данных имеется возможность сортировки данных в таблицах. Наиболее распространенным видом сортировок в базах данных является упорядочение информации по одному из столбцов.<br />
<br />
Для числовых данных упорядочение проводится по возрастанию или убыванию значений. Например, упорядочение по росту:<br /><br />
Фамилия 		Имя 		         Рост 		         Вес 		    Глаза<br />
<br />
Петрова	Оля	165	65	карие<br />
<br />
Иванов	Саша	180	85	синие<br />
<br />
Сидоров	Миша	190	75	зеленые<br /><br />
Упорядочение символьных данных состоит в расположении их алфавитном порядке. Пример упорядочения по именам:  <br /><br />
Фамилия 		Имя 		         Рост 		         Вес 		    Глаза<br />
<br />
Сидоров	Миша	190	75	зеленые<br />
<br />
Петрова	Оля	165	65	карие<br />
<br />
Иванов	Саша	180	85	синие<br /><br />
Наиболее важной возможностью баз данных является автоматический поиск информации. Поиск данных - это отбор данных по четко определенной комбинации признаков.<br />
<br />
Основой для поиска информации в базах данных служат запросы. Совокупность запросов, по которым можно получить информацию, считается главной характеристикой баз данных.<br />
<br />
Запросы в базах данных подразделяются на простые и сложносоставные. В простых запросах указывается имя одного из столбцов и некоторое значение. Примеры простых запросов:<br /><br />
запрос:    	фамилия = Иванов <br />
<br />
запрос:    	имя = Оля<br /><br />
Ответами на запросы будут строки из таблицы приведенного типа. На первый запрос - строки, в которых в графе фамилия стоит «Иванов», а на второй запрос - строки со значением «Оля» в графе имя.<br />
<br />
Для числовых значений в запросах могут стоять знаки «больше» или «меньше». Примеры соответствующих запросов:<br /><br />
запрос:    	рост > 180 <br />
<br />
запрос:    	вес &#163; 50<br /><br />
Ответами на эти запросы также будут одна или несколько строк из таблицы, в которых рост или вес будут удовлетворять указанным условиям. Но возможно, что поиск окажется безрезультативным, если ни одна строка в таблице не удовлетворяет заданным условиям.<br />
<br />
Сложносоставные запросы образуются из простейших с использованием логических связок и и или. Примеры сложносоставных запросов:<br /><br />
запрос: вес < 80 и глаза = зеленые <br />
<br />
запрос: глаза = синие или глаза = голубые<br /><br />
Ответами на составные запросы со связкой и будут все строки таблицы, удовлетворяющие обоим условиям. Ответами на запросы со связкой или будут все строки таблицы, которые удовлетворяют первому или второму условию, либо и тому и другому одновременно.<br />
<br />
Отличие баз данных от информационно-справочных и информационно-поисковых систем состоит в следующем. В информационно-справочных системах допустим только поиск информации. А в базах данных можно выполнять не только поиск информации, но и обновлять их, а также создавать новые таблицы либо реорганизовать их.<br />
<br />
Обновление данных в таблицах баз данных проводится по элементам строк, а добавление информации - вводом новых строк. Для создания новой таблицы необходимо задать ее имя, число столбцов и указать типы значений в каждом из столбцов.<br /><br />
Задача 1. База данных об оценках.<br />
<br />
Составьте базу данных об оценках своих товарищей, выделив следующие предметы: математика, физика и информатика. Укажите фамилии товарищей, их имена и оценки по этим предметам. Приведите примеры простых и сложносоставных запросов.<br />
<br />
Р е ш е н и е. Пусть имеются три товарища: Иванов, Петрова и Сидоров со следующими оценками по физике, математике и информатике:<br /><br />
фамилия 	    имя 	матем 	физика    информ<br />
<br />
Иванов	Саша	5	4	5<br />
<br />
Петрова	Оля	4	4	5<br />
<br />
Сидоров	Миша	3	3	4<br /><br />
Примеры запросов:<br />
<br />
фамилия = Петрова <br />
<br />
имя = Миша <br />
<br />
физика > 3<br />
<br />
матем > 3 и физика > 3 <br />
<br />
матем = 5 или информ = 5<br /><br />
В о п р о с ы<br /><br />
1. Что такое база данных?<br />
<br />
2. Что такое реляционные базы данных?<br />
<br />
3. Что такое сортировка данных?<br />
<br />
4. Как упорядочивается информация в базах данных?<br />
<br />
5. Что такое запросы к базам данных?<br />
<br />
6. Как строятся сложносоставные запросы?<br />
<br />
7. Каковы основные возможности баз данных?<br /><br />
З а д а н и я<br /><br />
1. Составьте базу данных о кондитерских товарах, указав их название, вес, цену и вкус. Заполните базу данных на 5-6 наименований конфет. Приведите примеры сложно-составных и простых запросов с нетривиальными ответами.<br />
<br />
2. Составьте базу данных о своих родных: маме, папе, сестрах, братьях, дедушках и бабушках с указанием их дней рождения и месте работы или учебы. Упорядочите базу данных по возрасту и приведите примеры запросов.<br />
<br />
3. Составьте базу данных о своих друзьях с указанием их возраста, места учебы, профессий и любимых увлечений. Упорядочите базу данных в алфавитном порядке по именам друзей и приведите примеры запросов.<br />
<br />
4. Составьте базу данных о своих учителях с указанием фамилий, имен, отчеств, возраста и предмета преподавания. Упорядочите базу данных в алфавитном порядке по фамилиям преподавателей и приведите примеры запросов.<br />
<br />
5. Составьте базу данных по своей успеваемости с указанием оценок по литературе, физкультуре, математике, физике и информатике. Упорядочите базу данных в порядке убывания оценок по: а) литературе, б) физкультуре, в) математике.<br />
<br />
6. Составьте базу данных по лучшим спортсменам года по любимому виду спорта с указанием лучших результатов или мест на ведущих соревнованиях.<br />
<br />
7. Составьте по журналу успеваемости базу данных по следующим предметам: а) математике; б) информатике; в) физике; г) литературе.<br />
<br />
Укажите запросы на поиск учеников, не имеющих<br />
<br />
а) ни одной двойки;     	в) ни одной тройки;<br />
<br />
б) ни одной четверки;   	г) ни одной пятерки.<br />
<br />
8. Составьте базу данных «Телефонный справочник» с телефонами своих друзей и родных с указанием фамилий и имен. Упорядочите базу данных по фамилиям.<br /><br />
2.3. Выполнение расчетов на компьютерах<br /><br />
Персональные компьютеры служат удобным средством вычислений и расчетов экономического и математического содержания. В этом смысле компьютеры намного эффективнее бухгалтерских счетов и калькуляторов, которые требуют больших затрат ручного труда.<br />
<br />
Наиболее удобным средством проведения расчетов на персональных компьютерах являются электронные таблицы. В этих программах все исходные и расчетные данные отображаются на экране в форме таблиц.<br />
<br />
Электронные таблицы - <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> для выполнения и хранения различных расчетов и калькуляций на компьютерах. На персональных компьютерах IBM PC наибольшее распространение получили электронные таблицы Excel.<br />
<br />
Калькуляция - это таблица с определенным набором надписей, формул и данных, используемых для расчетов. В качестве примера рассмотрим калькуляцию закупки сладостей к дню рождения.<br />
<br />
Пусть к дню рождения принято решение купить шоколад и конфеты «Аленка», «Мишки», «Марс». Соответствующая калькуляция закупок конфет с учетом их цен, веса и количества имеет вид:<br />
<br />
	A	B	C	D	E	F<br />
<br />
1	конфеты	цена	вес	кол-во	масса	стоим<br />
<br />
2	Аленка	600	100	3	300	1800<br />
<br />
3	Мишки	200	40	10	400	2000<br />
<br />
4	Марс	500	100	5	500	2500<br />
<br />
5						<br />
<br />
6			итого:	18	сумма:	6300<br />
<br />
7	денег:	8000			остаток:	1700<br /><br />
С помощью приведенной калькуляции, меняя на экране количество конфет, можно оценить различные варианты закупок. В частности, можно решить следующие проблемы:<br />
<br />
купить на заданную сумму наибольшее число сладостей;<br />
<br />
купить на заданную сумму наибольшую массу конфет;<br />
<br />
купить все виды конфет для пяти гостей в рамках заданной суммы.<br />
<br />
Р е ш е н и е. Для выполнения расчетов в электронной таблице должна храниться следующая система формул:<br /><br />
Е2 = C2*D2 F2 = B2*D2 <br />
<br />
ЕЗ = C3*D3 F3 = B3*D3 <br />
<br />
E4 = C4*D4 F4 = B4*D4 <br />
<br />
D6 = D2 + D3 + D4 F7 = B7 - F6 <br />
<br />
F6 = Sum (F2 : F4)<br /><br />
Здесь B2, D3, E6, F7 - имена ячеек электронной таблицы; Sum (F2 : F4) - функция суммирования ячеек из столбца F от ячейки F2 до ячейки F4.<br /><br />
Основные возможности электронных таблиц на компьютерах:<br />
<br />
1) автоматический перерасчет калькуляций;<br />
<br />
2) хранение и поиск калькуляций в памяти ЭВМ;<br />
<br />
3) вывод калькуляций на печать;<br />
<br />
4) обновление и ввод новых калькуляций.<br /><br />
Перерасчет калькуляций в электронных таблицах производится автоматически сразу же после обновления на экране любых исходных данных. В этом заключается основное свойство и удобство электронных таблиц: один раз составленная калькуляция может использоваться многократно для выполнения расчетов при различных исходных данных.<br />
<br />
Хранение калькуляций в электронных таблицах обычно проводится на магнитных дисках. Это позволяет повторно использовать их для новых расчетов и перерасчетов. Бумажная копия любой из электронных таблиц со всеми ее исходными и расчетными данными может быть выведена на печать.<br />
<br />
Ввод калькуляций, состоящих из надписей, числовых данных и формул, проводится по ячейкам. Для этого к необходимой ячейке подводится курсор с помощью мышки или клавиш стрелок, а затем нажимается клавиша Enter на клавиатуре либо клавиша на мышке.<br />
<br />
Копирование и перенос надписей, данных, формул и целых блоков таблиц позволяет достаточно быстро создавать новые калькуляции из уже имеющихся в памяти компьютера. Многие электронные таблицы допускают изменение размеров строк или столбцов таблиц для их более наглядного и красивого расположения.<br />
<br />
Числовые данные могут быть целыми и вещественный числами. Примеры записи чисел в электронных таблицах:<br /><br />
0, 1, 2, 3, ... , -1, -2, -3, ...    		- целые числа;<br />
<br />
0.1, 1.5, 12.87, 0.002 , ...         	- вещественные числа.<br /><br />
Обратите внимание: для записи дробной части обычно применяется точка, а не запятая. Для записи десятичного порядка используется символ Е:<br /><br />
1.2Е6 &#186; 1200000<br />
<br />
-.5Е-4 &#186; -0.0005<br /><br />
Расчетные формулы в электронных таблицах образуются из числовых значений, обозначений элементарных и специальных функций и имен ячеек электронной таблицы: А1, А2, A3, В1, В2, С1 и т. д.<br />
<br />
Запись арифметических операций в формулах и числовых выражениях в электронных таблицах выполняется с помощью следующих знаков:<br /><br />
+   	- сложение            			2+2    		А2+В2+С2 <br />
<br />
-  	- вычитание           			6-8    		А1-В1<br />
<br />
* 	- умножение            			7*8     		2*А2*С2 <br />
<br />
/   	-деление               			2/3     		А1/(2/С2) <br />
<br />
&#217;   	- возведение в степень   		5&#217;3     		A3&#217;2<br /><br />
Математические функции в электронных таблицах имеют следующие обозначения:<br /><br />
sin(x) - синус              		cos(x) - косинус <br />
<br />
tan(x) - тангенс             		atan(x) - арктангенс <br />
<br />
ехр(х) - экспонента         		ln(x) - натуральный логарифм <br />
<br />
sqr(x) - квадратный корень<br /><br />
В о п р о с ы<br /><br />
1. Что такое калькуляция?<br />
<br />
2. Каковы основные возможности электронных таблиц?<br />
<br />
3. Какие электронные таблицы используются на IBM PC?<br />
<br />
4. Как записываются формулы в электронных таблицах?<br />
<br />
5. Какие математические функции есть в электронных таблицах? <br /><br />
З а д а н и я<br /><br />
1. Составьте систему формул для расчета заработной платы по следующей таблице:<br /><br />
A	B	C	D<br />
<br />
1	фамилия	часы	оплата	з/плата<br />
<br />
2	Иванов	20	1000	20000<br />
<br />
3	Петрова	25	800	20000<br />
<br />
4	Сидоров	10	600	6000<br />
<br />
5				<br />
<br />
6			итого:	46000<br /><br />
2. Составьте калькуляцию для закупок письменных принадлежностей:<br /><br />
A	B	C	D	E	F<br />
<br />
1	Закупки:	цена	колич	сумма		<br />
<br />
2	тетради	200	10	2000		<br />
<br />
3	карандаши	300	8	2400		<br />
<br />
4	ручки	3500	4	14000		<br />
<br />
5	ластики	400	2	800		<br />
<br />
6						<br />
<br />
7			всего:	19200		<br />
<br />
8						<br /><br />
3.Составьте калькуляцию закупок продуктов для похода на N дней и М человек.<br /><br />
2.4. Постановка и решение задач<br /><br />
Решение задач состоит в получении определенных результатов. Это относится к в работе, жизни или учебе: сдача экзаменов, написание сочинений, выполнение чертежей, изготовление приборов, инструментов и машин, сбор урожая, накопление капитала и т. п. - все это получение или достижение результатов.<br />
<br />
Ключом к любой задаче является способ решения, дающий необходимые результаты. Знание способов решения и умение их применять для решения практических задач - важнейшая характеристика профессиональной квалификации.<br />
<br />
Результаты правильные, если они отвечают требованиям решаемых задач. Однако, если требования сформулированы недостаточно четко, то нельзя однозначно судить о правильности полученных результатов.<br />
<br />
Результаты неправильные, если они противоречат заданным требованиям. Как однозначно определить правильность результатов? Ответ: для этого необходима точная постановка задач с четким выделением требований.<br />
<br />
Для решения задач необходимо определение:<br /><br />
1) что требуется?<br />
<br />
2) что дано?<br /><br />
Ответ на первый вопрос - что требуется? - точное определение требуемых результатов. При отсутствии требований к конечным целям оценка полученных результатов может быть неоднозначной.<br />
<br />
Ответ на второй вопрос - что дано? - определение исходных условий, при которых требуется получить результаты. Неоднозначность в определении исходных условий может привести к получению неправильных результатов.<br />
<br />
Рассмотрим задачу: «Добраться домой». Исходным будет место, где мы находимся, а требуемым - свой дом. Способов решения этой задачи может быть много, но правильные среди них только те, которые обеспечат достижение своего дома.<br />
<br />
Рассмотрим вторую задачу. «Решение уравнения 2&#215;х+1 = 0». Здесь требуемым является корень уравнения. В качестве решения уравнения можно рассмотреть два числа х1 = 1 и х2 = -1/2. Правильным из них является то решение, при подстановке которого уравнение превратится в тождество.<br />
<br />
Подстановка первого числа х1 = 1 в уравнение дает противоречие <br /><br />
2.(1) +1= 3 &#185; 0.<br /><br />
Следовательно, значение х1 = 1 - это неправильное решение, так как оно противоречит требованиям и не может быть корнем уравнения.<br />
<br />
Подстановка второго решения х2 = -1/2 в уравнение дает тождество<br /><br />
2.(-1/2) +1= 0.<br /><br />
Таким образом значение х2 = -1/2 удовлетворяет исходному уравнению и является правильным решением.<br />
<br />
Способ решения правильный, если он дает правильные результаты. Для определения правильности способов решения задач необходима четкая постановка решаемых задач, в которых должны быть строго определены требуемые результаты.<br />
<br />
Способ - неправильный, если его применение приводит к получению неправильных результатов либо вовсе не дает никаких результатов. Использование неправильных способов решения может вообще не давать результатов.<br />
<br />
Способы могут быть частными и общими. Частные способы дают конкретные решения частных задач. Частный способ может оказаться неприменимым для решения сходных задач, отличающихся деталями.<br />
<br />
Общий способ может давать решения для целого класса задач, отвечающих определенным исходным условиям и отличающихся друг от друга конкретными исходными данными.<br />
<br />
Так, для рассмотренной задачи решения уравнения 2-х + 1 = 0 можно использовать общий способ решения линейных уравнений вида а&#215;х + b = 0:<br /><br />
х0 = - b/а.<br /><br />
Применение этой формулы при а = 2, b = 1 дает решение х0 = - b/а = -1/2, которое нам уже известно как правильное.<br />
<br />
В правильности общего способа решения уравнений вида а&#215;х + b = 0 можно убедиться подстановкой формулы х0 = - b/а  в само уравнение:<br /><br />
а&#215;х + b &#186; а&#215;(- b/а) + b &#186; -b + b &#186; 0.<br /><br />
При постановке обобщенных задач кроме выделения требуемого необходимо определить исходные условия, при которых должно быть получено требуемое. В такой постановке задач должно быть определено, какие исходные условия будут считаться допустимыми, а какие нет.<br /><br />
Постановка задачи:<br />
<br />
1. Что дано?<br />
<br />
2. Что требуется?<br />
<br />
3. Что допустимо?<br /><br />
Приведем полное описание постановки рассмотренной выше задачи:<br /><br />
Задача: решить уравнение а-х + b = 0. <br />
<br />
Треб: х - корень уравнения. <br />
<br />
Дано: а, b - коэффициенты уравнения. <br />
<br />
При: а &#185; 0.<br /><br />
Уравнения данного типа можно решать в общем виде с помощью электронных таблиц, применяя описанный общий метод решения и следующую калькуляцию:<br /><br />
A	B	C	D<br />
<br />
1		уравнение:		<br />
<br />
2	2	* х +	1	= 0<br />
<br />
3	корень:	х = -0.5		<br /><br />
с расчетной формулой С3 = -С2/ А2.<br />
<br />
Особую ценность для решения задач представляют обобщенные методы решения. Метод - единый способ решения некоторого класса задач. Знание методов позволяет находить решения для любой конкретной задачи данного класса.<br />
<br />
Метод решения правильный, если он дает правильные результаты для любой задачи данного класса. Применение таких методов гарантирует правильность результатов для любой из задач данного класса.<br />
<br />
Метод решения неправильный, если можно указать конкретную задачу данного класса, для которой применение метода даст неправильные результаты либо не даст результатов вовсе.<br />
<br />
Например, для уравнения а&#215;х + b = 0 формула х = - b/а не дает результата при а = 0. Но при значении а = 0 уравнение превращается в соотношение b = 0, что говорит о недопустимости этого значения. Следовательно, условием допустимости данных в рассматриваемой задаче будут значения а &#185; 0.<br />
<br />
Правильность методов решения можно проверять на конкретных примерах. Достаточно привести хотя бы один контрпример, на котором способ или метод дает неправильный результат, чтобы утверждать о неправильности метода решения в целом.<br />
<br />
Однако демонстрация правильности результатов на двух-трех примерах не может служить достаточным основанием для утверждений о правильности метода или способа решения в целом.<br />
<br />
Полное обоснование правильности методов решения дает только исчерпывающий анализ результатов, получаемых с их помощью для любых задач данного класса. Пример - приведенное выше обоснование общего метода решения линейных уравнений.      <br />
<br />
В общем случае обоснование правильности обобщенных методов решения требует математического исследования получаемых результатов и математического доказательства их правильности для всех конкретных случаев.<br /><br />
В о п р о с ы<br /><br />
1. Когда результаты правильные?<br />
<br />
2. Когда результаты неправильные?<br />
<br />
3. Когда способ решения правильный?<br />
<br />
4. Что такое постановка задачи?<br />
<br />
4. Что такое метод решения?<br />
<br />
5. Когда метод решения правильный?<br />
<br />
6. Когда метод решения неправильный?<br /><br />
З а д а н и я<br /><br />
1. Приведите постановку задачи и общий метод решения квадратного уравнения.<br />
<br />
2. Приведите калькуляцию для решения квадратных уравнений на компьютере.<br />
<br />
3. Докажите правильность общего метода решения квадратного уравнения.<br />
<br />
4. Приведите калькуляцию для решения системы уравнений с двумя неизвестными:<br /><br />
а&#215;х + b&#215;у = е <br />
<br />
с&#215;х + d&#215;y = f<br /><br />
с помощью следующего общего метода:<br /><br />
х = Dx/D        		у = Dy/D <br />
<br />
Dx = e&#215;d - b&#215;f    	Dy = a&#215;f - b&#215;e <br />
<br />
D = a&#215;d - b&#215;c<br /><br />
Глава 3. ОСНОВЫ ИСКУССТВЕННОГО ИНТЕЛЛЕКТА<br /><br />
3.1. Элементы математической логики<br /><br />
Понятие «искусственный интеллект» возникло с появлением самых первых компьютерных программ, имитирующих интеллектуальную деятельность людей - игру в шахматы, шашки, доказательство теорем и решение задач на ЭВМ.<br />
<br />
Все компьютерные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, демонстрирующие интеллектуальное поведение, основаны на использовании определенного математического аппарата, опирающегося на законы математической логики. Без понимания этих законов невозможно понимание принципов работы вычислительных машин вообще и систем искусственного интеллекта в частности.<br />
<br />
Логика - это <A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>, изучающая правильность суждений, рассуждений и доказательств. Примеры суждений: «снег белый», «2&#180;2 = 5», «Земля круглая», «информатика - <A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>», «генетика - лже<A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>».<br />
<br />
Суждения могут быть истинными или ложными. Истинность или ложность суждений проверяется их соответствием действительности. Пример истинного суждения - «снег белый». Пример ложного суждения - «генетика - лже<A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>».<br />
<br />
Суждение истинно, если оно отражает действительное положение вещей. Примеры истинных суждений: «снег белый», «2&#180;2 = 4», «театр - это искусство».<br />
<br />
Суждение ложно, если оно противоречит истинному положению вещей. Примеры ложных утверждений - «2&#180;2 = 5», «снег - черный», «Земля плоская».<br />
<br />
Однако существуют суждения, об истинности или ложности которых нельзя судить однозначно. Пример таких суждений: «есть жизнь на Марсе», «машина может думать», «астрология - <A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>».<br />
<br />
Математическая логика - это дисциплина, изучающая технику математических доказательств. Отличие математических суждений от обычных разговорных высказываний состоит в том, что математические суждения всегда предполагают однозначную интерпретацию, в то время как наши обычные высказывания зачастую допускают многозначную трактовку.<br />
<br />
Математика - <A href="http://www.sunhome.ru/journal/33"><font class="normal">наука</font></A>, признающая исключительно только однозначные суждения, утверждения и допускающая только строгие доказательства. В то время как люди в своих рассуждениях и высказываниях допускают различного рода неточности и двусмысленности.<br />
<br />
Работа ЭВМ как автоматических устройств основана исключительно на математически строгих правилах выполнения команд, программ и интерпретации данных. Тем самым работа компьютеров допускает строгую однозначную проверку правильности своей работы в плане заложенных в них процедур и алгоритмов обработки информации.<br />
<br />
Фундаментом науки о вычислительных машинах является конструктивная математика, в основе которой лежит математическая логика и теория алгоритмов с их однозначностью в оценке суждений и процедур вывода. Математическая логика с самого начала использовалась для описания элементов и узлов ЭВМ, а теория алгоритмов - для описания компьютерных программ.<br />
<br />
Основными объектами в математической логике являются - высказывания и предикаты. Первые изучаются в исчислении высказываний, а вторые - в исчислении предикатов.<br />
<br />
Высказывания - это суждения, о которых может быть известно - что они истины или ложны. В исчислении высказываний не исследуется - о чем утверждается в этих суждениях.<br />
<br />
Высказывания обычно обозначаются отдельными буквами или буквами с возможными индексами. Примеры простых высказываний и их обозначений:<br /><br />
А = «снег белый» <br />
<br />
В1 = «вода теплая» <br />
<br />
В2 = «земля твердая»<br />
<br />
С математической точки зрения высказывания - это переменные, принимающие значения «истина» или «ложь». Эти два истинностных значения иногда заменяются словами «да», «нет», либо цифрами 1 и 0.<br />
<br />
В отличии от высказываний предикаты - это суждения о некоторых переменных объектах или их свойствах. Примеры предикатов:<br /><br />
А(х) = «цвет яблока - х» <br />
<br />
В(х, у) = «х < у»<br /><br />
где х, у - это некоторые переменные (объекты).<br />
<br />
Значениями переменных в предикатах могут быть числа, слова, вектора, списки, функции, процедуры, алгоритмы или даже <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>. Для математической логики существенно, чтобы эти переменные объекты имели конструктивную форму и были бы строго определены.<br />
<br />
С математической точки зрения предикаты - это функции, имеющие одну или несколько переменных и принимающие логические значения «истина» или «ложь». Обозначения предикатов в математической логике схожи с обозначениями обычных математических функций: Р(х), Q(x,y) и т. д.<br />
<br />
В информатике для обозначения переменных, функций и предикатов, а также их аргументов обычно используются осмысленные слова и словосочетания в целях простоты их ввода в ЭВМ. Например, предикаты, используемые для описания фактов в языке Пролог, обычно имеют обозначения, выражаемые в лексике родного языка:<br /><br />
любит (Маша, х);<br />
<br />
цена (конфеты, с).<br /><br />
В форме предикатов с конкретными аргументами-значениями могут быть описаны факты любой базы данных. Примеры описания фактов из базы данных в записи на языке Пролог:<br /><br />
любит (Маша, цветы)     			- Маша любит цветы <br />
<br />
любит (Саша, машины)   			- Саша любит машины <br />
<br />
цена (цветы, 1000)        			- цена цветов 1000 <br />
<br />
цена (мороженое, 2500)    			- цена морженого 2500<br /><br />
В этой же форме предикатов с переменными могут описываться и простейшие запросы к базам данных на языке Пролог. Примеры запросов к указанной базе данных на языке Пролог и соответствующие ответы ЭВМ:<br />
<br />
? любит (х, конфеты)     			- Кто любит конфеты? <br />
<br />
х = Маша<br />
<br />
? цена (конфеты, с)        			- Какова цена конфет? <br />
<br />
с = 1000 <br /><br />
В о п р о с ы<br /><br />
1. Что изучает математическая логика?<br />
<br />
2. Что изучает логика?<br />
<br />
3. Что такое высказывание?<br />
<br />
4. Что такое предикат?<br />
<br />
5. Когда суждения истинны?<br />
<br />
6. Когда суждения ложны?<br /><br />
З а д а ч и<br /><br />
1. Приведите примеры истинных и ложных утверждений<br />
<br />
а) из арифметики;<br />
<br />
б) из геометрии;<br />
<br />
в) из биологии;<br />
<br />
г) из жизни.<br />
<br />
2. Выразите отрицания для высказываний:<br />
<br />
а) «мы пойдем в кино»;<br />
<br />
б) «х = 0 или х = 1»;<br />
<br />
в) «х = 0 и у = 0»;<br />
<br />
г) «а = 0 и b = 0 и с = 0»;<br />
<br />
д) «х = 0 или у = 0 или z = 0». <br />
<br />
е) «мы не пойдем никуда»;<br />
<br />
ж) «а = 0 или b = 0»;<br />
<br />
з) «х > 0 и х < 100».<br /><br />
3.2. Основные логические операции<br /><br />
Суждения в математической логике могут быть простыми и сложносоставными. Примеры простых суждений:<br /><br />
х = 1    	рост < 160 <br />
<br />
А        		цена (х, у)<br /><br />
Сложносоставные суждения в математической логике образуются из простых с помощью логических связок и, или и не, выражающих три основных логических операции:<br /><br />
логическая связка не     		 - отрицание суждений;<br />
<br />
логическая связка или     		- конъюнкция суждений;<br />
<br />
логическая связка и       		- дизъюнкция суждений.<br /><br />
Примеры сложносоставных суждений:<br /><br />
не А                				- неверно суждение А <br />
<br />
С или В            			- истинно С или В <br />
<br />
(х > 0) и (у > 0)     			- (х больше 0) и (у больше 0) <br />
<br />
(глаза = синие) или (глаза = голубые)<br /><br />
Логическая связка не используется для выражения отрицаний. Примеры:<br /><br />
не (глаза = синие),           		- неверно, что глаза синие<br />
<br />
не (А или В),                		- неверно, что выполняется А или В<br />
<br />
не (любит (Саша, конфеты)) 	- неверно, что Саша любит конфеты<br /><br />
Наглядной иллюстрацией этих логических связок с предикатами служат следующие диаграммы:<br /><br />
Отрицание не А истинно или ложно в зависимости от истинности исходного суждения А. Свойства отрицания не как логической связки можно описать таблицей истинности:<br />
<br />
Таблица истинности:<br />
<br />
А 		не А<br />
<br />
да	нет<br />
<br />
нет	да<br /><br />
Свойства отрицаний:<br /><br />
НЕ1: Отрицание ложно, если суждение истинно. <br />
<br />
НЕ2: Отрицание истинно, если суждение ложно.<br /><br />
Для понимания отрицаний важно уметь выражать их в позитивной форме. Приведем примеры отрицания математических неравенств и их позитивные переформулировки:<br /><br />
не (х = 0)	&#186;	(х &#185; 0)<br />
<br />
не (х &#185; 0)	&#186;	(х = 0)<br />
<br />
не (х > 0)	&#186;	(х &#163; 0)<br />
<br />
не (х < 0)	&#186;	(х &#179; 0)<br />
<br />
не (х &#179; 0)	&#186;	(х < 0)<br />
<br />
не (х &#163; 0)	&#186;	(х > 0)<br /><br />
Свойства отрицаний, записанные в таблицу истинностности, могут быть описаны как факты на языке Пролог:<br /><br />
не (да, нет); <br />
<br />
не (нет, да);<br /><br />
После ввода этих фактов в ЭВМ с помощью запросов можно перепроверить свойства отрицаний:<br /><br />
? не (А, нет)<br />
<br />
А = да<br />
<br />
? не (А, да)<br />
<br />
А = нет<br /><br />
Логическая связка и в математической логике называется конъюнкцией. Таблица истинности конъюнкции:<br /><br />
А 		      В       		А и В<br />
<br />
да	да	да<br />
<br />
да	нет	нет<br />
<br />
нет	да	нет<br />
<br />
нет	нет	нет<br /><br />
Свойства конъюнкции:<br /><br />
И1: Конъюнкция А и В истинна, когда истинны оба суждения. <br />
<br />
И 2: Конъюнкция А и В ложна, когда ложно хотя бы одно из суждений А или В.<br /><br />
Логическая связка или в математической логике называется дизъюнкцией. Таблица истинности дизъюнкции:<br /><br />
А 		       В       		А или В<br />
<br />
да	да	да<br />
<br />
да	нет	да<br />
<br />
нет	да	да<br />
<br />
нет	нет	нет<br /><br />
Свойства дизъюнкции:<br /><br />
ИЛИ1: Дизъюнкция А или В истинна, когда истинно любое из суждений А или В.<br />
<br />
ИЛИ2: Дизъюнкция А или В ложна, когда ложны оба суждения А и В.<br /><br />
Свойства конъюнкции и дизъюнкции также можно описать в виде фактов на языке Пролог:<br /><br />
Дизъюнкция:  			Конъюнкция:<br />
<br />
или (да, да, да);        			и2 (да, да, да);<br />
<br />
или (да, нет, да);        		и2 (да, нет, нет);<br />
<br />
или (нет, да, да);       		и2 (нет, да, нет);<br />
<br />
или (нет, нет, нет);      		и2 (нет, нет, нет);<br /><br />
Опираясь на эти факты можно получить ответы на вопросы о свойствах дизъюнкции и конъюнкции с помощью ЭВМ:<br /><br />
? или (А, В, нет)       		? и 2 (А, В, да) <br />
<br />
А = нет В = нет       			А = да В = да<br />
<br />
? или (А, В, да)        			? и 2 (А, В, нет) <br />
<br />
А = да В = да         			А = да В = нет <br />
<br />
А = да В = нет        			А = нет В = да<br />
<br />
А = нет В = да         			А = нет В = нет<br /><br />
Одной из важнейших логических связок математической логики является импликация А ® В. Эта связка в математической логике используется для определения правил логического вывода.<br />
<br />
Импликация А ® В - это логическое следование. Импликация А ® В читается: «если А, то В». Первое суждение в импликации называется посылкой, а второе суждение - следствием.<br />
<br />
Приведем примеры правил логического вывода:<br />
<br />
а) с использованием высказываний:<br />
<br />
если «на улице дождь», то «на улице мокро»,<br />
<br />
б) с использованием предикатов:<br />
<br />
любит (х, конфеты) ® сластена (х).<br />
<br />
Таблица истинности импликации:<br /><br />
А 		    В       	      А ® В<br />
<br />
да	да	да<br />
<br />
да	нет	нет<br />
<br />
нет	да	да<br />
<br />
нет	нет	да<br /><br />
Свойства импликации:                        <br />
<br />
П1: «Импликация А ® В ложна,<br />
<br />
когда посылка А истинна, а следствие В - ложно». <br />
<br />
П2: «Импликация А ® В истинна,<br />
<br />
когда истинно следствие либо ложны и посылка и следствие».<br />
<br />
В языке Пролог импликации используются для описания правил вывода и определения новых логических понятий. Например, понятие «сластена» в языке .Пролог описывается следующим образом:<br />
<br />
сластена (х)  любит (х, конфеты);<br /><br />
Описание этого правила позволяет вводить в ЭВМ вопросы о «сластенах» и получать осмысленные ответы, исходя из сведений, хранящихся в базе данных:<br /><br />
? сластена (х)    - Кто сластена? <br />
<br />
х = Маша<br /><br />
С помощью таблиц истинности могут быть описаны и проверены свойства любых сложносоставных высказываний. Соответственно с помощью этих таблиц на ЭВМ средствами языка Пролог могут быть проверены любые сложносоставные высказывания и законы исчис-ления высказываний.<br />
<br />
Задача 1. Проверьте закон двойного отрицания в исчислении высказываний<br />
<br />
не (не А) &#186; А<br />
<br />
Р е ш е н и е . Рассмотрим объединенную таблицу истинности высказываний<br /><br />
А 	                не А 	   не (неА)<br />
<br />
да	нет	да<br />
<br />
нет	да	нет<br /><br />
Сравнение крайних столбцов показывает, что всюду, где высказывание А истинно, там же истинно и двойное отрицание не (не А). И наоборот, всюду, где ложно А, там ложно и двойное отрицание не (не А). Следовательно, двойное отрицание тождественно исходному высказыванию: не (не А) &#186; А.<br /><br />
Задача 2. Сравните с помощью таблиц истинности отрицание дизъюнкции и отрицание конъюнкции не (А и В) и не (А или В).<br /><br />
Р е ш е н и е .<br />
<br />
А 		   В 		  А и В 	     не (А и В)  	А или В 	 не (А или В)<br />
<br />
да	да	да	нет	да	нет<br />
<br />
да	нет	нет	да	да	нет<br />
<br />
нет	да	нет	да	да	нет<br />
<br />
нет	нет	нет	да	нет	да<br /><br />
В о п р о с ы<br /><br />
1. Когда истинно отрицание?<br />
<br />
2. Когда ложна дизъюнкция?<br />
<br />
3. Когда истинна конъюнкция?<br />
<br />
4. Когда ложна импликация?<br /><br />
З а д а н и е<br /><br />
1. Составьте таблицы истинности для утверждений:<br />
<br />
а) (не А) и (не В);       в) (не А) или (не В);<br />
<br />
б) А и (не В);               г) А или (не В).<br />
<br />
2. Сравните с помощью таблиц истинности логические выражения:<br />
<br />
а) не (А и В);               в) (не А) или (не В);<br />
<br />
б) не (А и В);               г) (не А) или (не В).<br />
<br />
3. Проверьте по таблицам истинности логические законы:<br />
<br />
а) отрицание конъюнкции:<br />
<br />
не (А и В) = (не А) или (не В);<br />
<br />
б) отрицание дизъюнкции:<br />
<br />
не (А или В) = (не А) и (не В);<br />
<br />
в) отрицание импликации:<br />
<br />
не (А ® В) &#186; (не В) ® (не А).<br /><br />
3.3. Элементы языка Пролог<br /><br />
Пролог - это одна из моделей систем искусственного интеллекта, способных воспроизводить логические умозаключения. Кроме того, Пролог - это язык для описания фактов, правил и процедур логического вывода. О языке Пролог обычно говорят, что он представляет язык логического программирования.<br />
<br />
Основной особенностью системы Пролог являются встроенные процедуры логического вывода, имитирующие способность человеческого интеллекта выполнять логические умозаключения. Какая лексика используется при этом - русского, английского или других языков - играет второстепенную роль, несущественную для ЭВМ, но важную для тех, кто будет работать и вести диалог с машиной.<br />
<br />
Основная идея Пролога как языка записи фактов, вопросов и правил заключается в том, что они записываются в форме предикатов математической логики. Все они интерпретируются ЭВМ строго в соответствии с законами математической логики и ни чем более.<br />
<br />
Основные конструкции языка Пролог - это факты, вопросы и правила. Все эти три конструкции записываются в форме предикатов и их комбинаций. Рассмотрим правила их записи на языке Пролог.<br />
<br />
Факты - это конкретные сведения о ком-то либо о чем-то. Факты на языке Пролог записываются в форме предикатов с конкретными аргументами-значениями. Примеры записи фактов на Прологе:<br /><br />
папа (Вова, Лена);        		- Вова - папа Лены <br />
<br />
любит (Лена, музыка);    		- Лена любит музыку <br />
<br />
оценка (Лена, русский, 5); 		- У Лены 5 по русскому языку<br /><br />
Вопросы на Прологе - это запросы к совокупности данных или процедурам, хранящимся, в ЭВМ. Запись вопросов начинается со знака ?, за которым записывается предикат или группа предикатов, разделяемых запятыми. Примеры записи простых вопросов на языке Пролог:<br /><br />
? папа (х, Лена)     			- Кто папы Лены?<br />
<br />
х = Вова<br />
<br />
? мама (х, у)        			- Кто у кого - мама ?<br />
<br />
НЕТ<br />
<br />
? оценка (х, _ , 5)   			- Кто имеет оценки 5?<br />
<br />
х = Лена<br /><br />
Здесь буквы х, у - обозначения переменных, а числа и слова - конкретные значения аргументов в соответствующих предикатах. Знак подчеркивания «_» представляет неопределенное значение, которое несущественно для ответа на вопросы.<br />
<br />
При записи сложносоставных вопросов в языке Пролог можно указывать несколько условий-предикатов, разделяемых запятыми. Запятая в этих сложносоставных вопросах играет роль логической  связки и. Примеры сложносоставных вопросов: <br /><br />
? мама (х, у), мама (у, Оля)    	- Кто мама у мамы Оли? <br />
<br />
х = Зина у = Люба<br />
<br />
? мама (х, у), папа (у, Оля)     	- Кто мама у папы Оли? <br />
<br />
НЕТ<br /><br />
Правила в Прологе - это правила логического вывода. Слева в правилах записывается следствие, а справа - предусловие. Предусловие может состоять из одного или нескольких предикатов, разделяемых запятыми. Примеры записи правил вывода на Прологе:<br /><br />
студент (х)  занятие (х, учеба);    		- Студент - тот, кто занят учебой;<br />
<br />
нумизмат (х)  собирает (х, монеты); 		- Нумизмат - тот, кто собирает монеты.<br /><br />
Примеры вопросов на использование этих правил:<br /><br />
? студент (х)     		- Кто - студент?<br />
<br />
х = Алеша     <br />
<br />
х = Лена<br />
<br />
? нумизмат (у)   		- Кто - нумизмат? <br />
<br />
у = Алеша<br /><br />
В правилах со сложносоставными определениями запятая также играет роль логической связки и, объединяя условия, образующие определение. Такого рода правила позволяют создавать самые сложные и изощренные базы знаний по самым различным предметным областям и применениям.<br />
<br />
Приведем пример составления базы знаний о друзьях. Будем различать друзей по их именам: Алеша, Оля и т. д. Включим в базу данных следующие сведения о друзьях:<br />
<br />
что им нравится;<br />
<br />
что они коллекционируют;<br />
<br />
чем они занимаются;<br />
<br />
какие оценки они имеют.<br />
<br />
При такой постановке проблемы и предметная область, и круг основных вопросов очерчены достаточно четко. Для записи фактов на Прологе примем следующие предикаты:<br /><br />
нравится (, );<br />
<br />
собирает (, );<br />
<br />
занимается (, );<br />
<br />
оценка (, , );<br /><br />
Вместо , , ,  при составлении базы знаний необходимо подставить конкретную информацию о конкретных друзьях. Записывать имена будем с большой буквы в именительном падеже. Далее,  и  - это существительные в именительном падеже,  - целое число от 1 до 5.<br />
<br />
Пусть об Оле и Алеше известно следующее:<br />
<br />
1. Оле нравится музыка. Она собирает фотографии любимых певцов. Занимается домоводством. Оля имеет 4 по русскому языку и  5 по алгебре.<br />
<br />
2. Алеше нравится история, он собирает монеты, естественно, имеет 5 по истории, занимается в археологическом кружке.<br />
<br />
Соответствующая база данных на языке Пролог:<br /><br />
нравится (Оля, музыка);     	- Оле нравится музыка <br />
<br />
нравится (Алеша, история);  	- Алеше нравится история <br />
<br />
собирает (Оля, фотографии); 	- Оля собирает фотографии <br />
<br />
собирает (Алеша, монеты);   	- Алеша собирает монеты <br />
<br />
собирает (Алеша, значки);    	- Алеша собирает значки <br />
<br />
оценка (Оля, русский, 4);    	- Оля имеет 4 по русскому языку <br />
<br />
занимается (Алеша, бизнес); 	- Алеша занимается бизнесом <br />
<br />
оценка (Оля, алгебра, 5);    	- Оля имеет оценку 5 по алгебре <br />
<br />
оценка (Алеша, история, 5); 	- Алеша имеет оценку 5 по истории<br /><br />
К составленной базе данных можно обращаться с самыми разными вопросами об интересах, занятиях, склонностях и успехах в учебе. Примеры самых простых вопросов и ответов, получаемых от ЭВМ:<br /><br />
? занимается (Алеша, футбол) - Занимается ли Алеша футболом?<br />
<br />
нет<br />
<br />
? нравится (Оля, музыка)     - Нравится ли Оле музыка?<br />
<br />
да<br /><br />
Использование в вопросах переменных позволяет получать от ЭВМ информацию, хранящуюся в базе данных. В ответ на такие вопросы выводятся все возможные варианты ответов. Например:<br /><br />
? нравится (х, у)             				- Кому что нравится?<br />
<br />
х = Оля      		у = музыка <br />
<br />
х = Алеша    		у = история<br /><br />
Если какая-то часть информации по той или иной причине не нужна, то вместо соответствующей переменной в вопросе ставится знак подчеркивания «_»:<br /><br />
? собирает (_ , х)      		- Что собирают друзья?<br />
<br />
 х = фотографии <br />
<br />
х = монеты <br />
<br />
х = значки<br /><br />
Наконец, в вопросах можно одновременно использовать как переменные, так и конкретные значения. Например:<br /><br />
? занимается (х, музыка)     	- Кто занимается музыкой ?<br />
<br />
нет<br />
<br />
? занимается (Алеша, у)    		 - Чем занимается Алеша ?<br />
<br />
у = бизнес<br />
<br />
? собирает (х, монеты)       		- Кто собирает монеты ?<br />
<br />
х = Алеша<br />
<br />
? оценка (х, _ , 5)           		- Кто имеет пятерки?<br />
<br />
х = Оля<br />
<br />
х = Алеша<br /><br />
Примеры сложносоставных вопросов:<br />
<br />
1. Кто занимается бизнесом и собирает монеты? <br /><br />
? занимается (х, бизнес), собирает (х, монеты) <br />
<br />
х = Алеша<br /><br />
2. Какие оценки имеет тот, кто собирает монеты?<br /><br />
? собирает (х, монеты), оценка (х, р, z) <br />
<br />
х = Алеша <br />
<br />
р = история<br />
<br />
z = 5<br /><br />
К составленной базе данных можно добавить следующие правила вывода:<br /><br />
книголюб (х)  нравится (х, <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>),		- Книголюб - тот, кто<br />
<br />
собирает (х, <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>)					любит и собирает <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A><br />
<br />
бизнесмен (х)  собирает (х, монеты),		- Бизнесмен - тот, кто<br />
<br />
занятие (х, бизнес)					собирает монеты и занима	ется бизнесом<br /><br />
Примеры использования правил-определений:<br /><br />
? книголюб (х)     		- Кто - книголюб?           <br />
<br />
НЕТ<br />
<br />
? бизнесмен (у)     		 - Кто - бизнесмен ?<br />
<br />
у = Алеша<br /><br />
В о п р о с ы<br /><br />
1. Как записываются факты на языке Пролог?<br />
<br />
2. Как записываются вопросы на языке Пролог?<br />
<br />
3. Как записываются правила в языке Пролог?<br /><br />
З а д а ч и<br /><br />
1. Опишите на языке Пролог данные о своей семье: о маме, папе, сестрах, братьях, дедушках и бабушках - кто кому приходится мамой и папой. Укажите вопросы для определения родственных отношений.<br />
<br />
2. Опишите данные о своих друзьях с указанием их увлечений (кто что любит), занятий (кто чем занимается). Подберите правила для определения понятий:<br />
<br />
а) сластена;            	д) спортсмен;<br />
<br />
б) филателист;         	е) бизнесмен;<br />
<br />
в) математик;          	ж) музыкант;<br />
<br />
г) программист;        	з) мусорщик.<br />
<br />
3. Опишите в форме фактов для себя и своих ближайших друзей-одноклассников данные об оценках по предметам:<br />
<br />
а) литература;          	г) физкультура;<br />
<br />
б) математика;         	д) информатика;<br />
<br />
в) физика;             	е) история.<br />
<br />
4. Подберите правила определения понятий:<br />
<br />
а) математик;          	д) физик;<br />
<br />
б) историк;            	е) лирик;<br />
<br />
в) двоечник;           	ж) троечник.<br />
<br />
г) отличник;<br /><br />
3.4. Базы знаний на ЭВМ<br /><br />
Экспертные системы и базы знаний на ЭВМ - одно из перспективных направлений в области искусственного интеллекта. Такие экспертные системы в ближайшем будущем станут интеллектуальными ассистентами людей во многих областях профессиональной деятельности.<br />
<br />
Базы знаний - это совокупность фактов и правил вывода, хранящихся в памяти ЭВМ. Содержание любой базы знаний составляют конкретные и обобщенные факты и сведения об определенной предметной области или сфере деятельности. Примеры предметных областей - семья, школа, вуз, магазин, рынок, ферма, фирма, завод, офис, банк и т.п.<br />
<br />
Конкретные сведения в базах знаний представляются фактами, которые записываются в виде предикатов с конкретными значениями. Примеры записи фактов в форме предикатов:<br /><br />
мама (Люба, Оля);        		- Люба - мама Оли <br />
<br />
оценка (Вова, физика, 5);  		- Вова имеет 5 по физике<br /><br />
Обобщенные сведения в базах знаний записываются в форме правил вывода, выражающих определения понятий. Примеры обобщенных сведений:<br /><br />
бабушка (х, z)  мама (х, у), мама (у, z) 	- бабушка - это мама мамы <br />
<br />
двоечник (х)  оценка (х, _ ,2)          		- двоечник - тот, у кого есть двойки<br /><br />
Используя совокупность конкретных и обобщенных фактов и правил, компьютеры могут давать ответы на широкий круг осмысленных вопросов. Для этого соответствующая база знаний с соответствующей системой понятий должна храниться в памяти ЭВМ.<br />
<br />
Базы знаний могут содержать правила вывода следующих видов:<br />
<br />
- правила определения понятий;<br />
<br />
- правила принятия решений;<br />
<br />
- способы решения задач;<br />
<br />
- правила поведения и т. п.<br />
<br />
При определении новых понятий необходимо различать их объем и содержание. Объем понятия - это совокупность вещей или явлений, отвечающих данному понятию. Объем понятий соотносит словам и терминам соответствующие объекты предметной области.<br />
<br />
Содержание понятия - это совокупность логических признаков, выделяющих объекты, отвечающие данному понятию, среди других объектов. С логической точки зрения определение понятия представляет описание совокупности признаков, характеризующих его содержание.<br /><br />
Приведем примеры определения понятий.<br />
<br />
1. Понятие «мама». Объем понятия - совокупность всех мам. Содержание понятия - женщина, имеющая детей. Формализация понятия на Прологе может выражаться конкретными фактами. Примеры:<br /><br />
мама (Люба, Оля); 		- Люба - мама Оли <br />
<br />
мама (Зина, Люба); 	- Зина - мама Любы<br /><br />
2. Понятие - «бабушка». Объем понятия - совокупность всех бабушек. Содержание понятия - «бабушка - это мама мамы или папы». Формализация этого понятия на Прологе:<br /><br />
бабушка (х, z)  мама (х, у), мама (у, z); 		- бабушка - это мама мамы <br />
<br />
бабушка (х, z)  мама (х, у), папа (у, z); 		- бабушка - это мама папы<br /><br />
3. Понятие «музыкант». Объем понятия - совокупность людей, занимающихся музыкой. Содержание понятия - «музыкант - человек, который любит музыку и занимается музыкой». Это понятие на языке Пролог можно записать в виде правила:<br /><br />
музыкант (х)  любит (х, музыка), занятие (х, музыка).<br /><br />
4. Понятие «студент». Объем и содержание понятия - учащиеся в вузах, университетах и колледжах. Определение этого понятия на Прологе можно записать в виде набора правил:<br /><br />
студент (х)  занятие (х, учеба), место (х, университет);<br />
<br />
студент (х)  занятие (х, учеба), место (х, институт);<br />
<br />
студент (х)  занятие (х, учеба), место (х, колледж);<br /><br />
Для создания сложных баз знаний может понадобиться целая система понятий, характеризующих объекты в заданной предметной области. Эта система определений базируется на наборе признаков, где каждый признак является характеристикой некоторого объекта.<br /><br />
Примеры признаков объектов и соответствующих значений:<br />
<br />
цвет - красный, белый, зеленый, черный и т.д.;<br />
<br />
вес - определяется в килограммах;<br />
<br />
возраст - определяется в годах: 1, 2, 3, ...<br /><br />
Примеры записи признаков на Прологе:<br /><br />
возраст (Иванов, 18);<br />
<br />
вес (Иванов, 85);<br />
<br />
цвет (Иванов, глаза, синий);<br />
<br />
цвет (Иванов, волосы, белый);<br /><br />
Основные возможности баз знаний:<br />
<br />
- поиск ответов на сложные вопросы;<br />
<br />
- логическая обработка данных;<br />
<br />
- моделирование процедур принятия решений;<br />
<br />
- обновление и ввод дополнительных данных;<br />
<br />
- вывод информации в естественно-языковой форме;<br />
<br />
- создание новых баз знаний.<br /><br />
В о п р о с ы<br /><br />
1. Что такое базы знаний?<br />
<br />
2. Как записываются факты на языке Пролог?<br />
<br />
3. Как записываются вопросы на языке Пролог?<br />
<br />
4. Как записываются правила на языке Пролог?<br />
<br />
5. Что такое содержание понятий?<br />
<br />
6. Каковы основные возможности баз знаний?<br /><br />
З а д а ч и<br /><br />
1. Составьте базу знаний о книгах в библиотеке. Включите следующие сведения: название <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>, жанр <A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>, автор, главный герой, страна.<br />
<br />
2. Составьте базу данных о собаках и кошках у ваших знакомых. В базу включите сведения об их породе, возрасте, кличках.<br />
<br />
3. Составьте базу знаний о соревнованиях. База должна содержать две группы фактов.<br />
<br />
Первая группа фактов - сведения о командах: названия команды, города, тренер.<br />
<br />
Вторая группа фактов - сведения о матчах: даты, команды и счет.<br /><br />
3.5. Законы логического вывода<br /><br />
Умение делать выводы - основная способность любого интеллекта. Основным признаком интеллекта являются знания и умения решать определенные задачи. Основой этих интеллектуальных умений являются законы и принципы логического вывода.<br />
<br />
Законы человеческого мышления изучаются логикой и психологией. Принципы искусственного интеллекта разрабатываются в математической логике и информатике на основе методов машинного доказательства теорем и постановки экспериментов на ЭВМ.<br />
<br />
Знание законов логического вывода позволяет выверять правильность рассуждений, доказательств, а также находить ошибочные утверждения. Незнание или нарушение этих законов и принципов приводит к логическим ошибкам и принятию неправильных решений.<br />
<br />
В качестве иллюстраций рассмотрим базу знаний о семье. Пусть в семье есть дочь Оля, сын Сережа, мама Надя, папа Коля, бабушка Зина и дедушка Миша:<br /><br />
Соответствующая база данных на языке Пролог:<br /><br />
мама (Зина, Надя);         		папа (Миша, Надя);<br />
<br />
мама (Надя, Оля);          		папа (Коля, Оля);<br />
<br />
мама (Надя, Сережа);       		папа (Коля, Сережа);<br /><br />
Система Пролог при наличии этих фактов в памяти ЭВМ даст следующие ответы на вопросы о «папах» и «мамах»:<br /><br />
? мама (Надя, Оля)			- Надя - мама Оли?<br />
<br />
да<br />
<br />
? папа (Сережа, Надя)		- Сережа - папа Нади?<br />
<br />
нет<br /><br />
Машина, использующая систему Пролог, дает ответы строго в соответствии с определенными логическими законами и принципами логического вывода. Разберем эти законы и принципы.<br />
<br />
Законы логики - это общие законы логического вывода, используемые для вывода различных умозаключений. Наличие интеллекта и у компьютеров и у людей определяется прежде всего способностями делать выводы и умозаключения в различных ситуациях.<br />
<br />
Закон противоречия - первый общий закон логики. Этот закон впервые высказал Аристотель - основатель логики как научной дисциплины:<br /><br />
А и не А     		- Не могут быть истинны одновременно <br />
<br />
  ложь         		суждение и его отрицание<br /><br />
Примеры противоречивых утверждений:<br />
<br />
1) «яблоко - спелое»;<br />
<br />
     «яблоко - неспелое»;<br />
<br />
2) «треугольник АВС - прямоугольный»;<br />
<br />
     «стороны треугольника равны друг другу».<br />
<br />
Высказывание противоречивых суждений и утверждений является примером серьезных логических ошибок. Наличие противоречий говорит о некотором умысле либо о нарушениях в сознании.<br />
<br />
В системе Пролог закон противоречия лежит в основе механизмов вывода ответов на вопросы. А именно, система Пролог для каждого вопроса формирует его отрицание и для этого отрицания ищет противоречие по отношению к фактам и правилам в базе знаний, хранящейся в памяти.<br />
<br />
Так, вопрос ? мама (Надя, Оля) ЭВМ преобразует в отрицание не мама (Надя, Оля) и временно присоединяет его к базе знаний. При этом получившаяся база становится противоречивой и система Пролог объявляет отрицание ложным и выводит ответ ДА.<br />
<br />
Закон исключения третьего - второй общий закон логики, указанный Аристотелем:<br />
<br />
А или не А      	- Истинно суждение либо его отрицание, <br />
<br />
истина           		  третьего не дано.<br /><br />
Примеры взаимоисключающих утверждений:<br />
<br />
1) «Сегодня будет дождь» или «Сегодня дождя не будет».<br />
<br />
2) «Любой треугольник правильный либо в нем есть разные стороны».<br />
<br />
Принципы логического вывода в системе Пролог отличаются от законов Аристотеля, поскольку его законы выражаются на языке высказываний, а работа системы Пролог основана на использовании предикатов.<br />
<br />
Соответствующая запись законов логики на языке исчисления предикатов представляет конструктивные процедуры, позволяющие осуществлять конкретные логические выводы из общих правил и конкретных фактов.<br />
<br />
Закон противоречия в записи на языке исчисления предикатов преобразуется в процедуру вывода ответов на простейшие вопросы вида ? А(с):<br /><br />
А(х) и не А(с)     		- При противоречии А(х) и не А(с) <br />
<br />
ложь, при х = с       		контрпримером служит х = с.<br /><br />
Содержательный смысл: При противоречии А(х) и не А(с) контрпримером служит х = с. Здесь х - переменная, а с - конкретное значение, при котором отрицание ответа оказывается ложным. Это значение х = с выводится системой Пролог в качестве ответа на поставленный вопрос. Примеры такого рода вопросов и ответов:<br /><br />
? папа (х, Коля)       		- Кто папа у Коли ?<br />
<br />
нет<br />
<br />
? папа (х, Оля)        		- Кто папа у Оли ?<br />
<br />
х = Коля<br />
<br />
? мама (х, у)          		- Что известно о мамах?<br />
<br />
х = Зина 	у = Надя<br />
<br />
х = Надя 	у = Оля<br /><br />
Закон двойного отрицания - третий общий закон логики. Этот закон также был высказан Аристотелем:<br /><br />
не (не А)     			- Если неверно отрицание,<br />
<br />
       А           			то суждение – истинно<br /><br />
Примеры рассуждений.<br />
<br />
1) Неверно, что «Вчера не было дождя». <br />
<br />
Следовательно, «Вчера был дождь».<br />
<br />
2) Неправда, что «это сделал не Саша». <br />
<br />
Следовательно, «это сделал Саша». (?)<br /><br />
Из второго примера видно, что закон двойного отрицания является косвенным доказательством, поскольку оно не опирается на факты или аргументы. По этим причинам закон двойного отрицания может оказаться ошибочным и этот закон не является общезначимым (верным для всех случаев и ситуаций).<br />
<br />
Правильность утверждений и рассуждений даже при безупречной логике доказательств зависит от достоверности исходных фактов и положений. Эту идею выражает четвертый общий логический закон - закон достаточных оснований, впервые сформулированный Лейбницем - создателем одной из самых первых механических вычислительных машин и основателем исчисления предикатов.<br /><br />
Закон достаточных оснований:<br />
<br />
Всякое утверждение должно предполагать существование аргументов и фактов, достаточных для его обоснования.<br /><br />
Иными словами, любое утверждение должно предполагать наличие набора конкретных фактов и правил, из которых должно вытекать утверждаемое. Нарушениями это закона являются рассуждения, опирающиеся на недостоверные факты или положения, истинность которых не проверяется, а принимается на веру.<br />
<br />
Пример рассуждений, не имеющих достаточных оснований:<br />
<br />
1. «Если дорогу перебежала черная кошка, то быть неприятностям».<br />
<br />
2. «Это верно, потому что это - справедливо».<br />
<br />
Экспертные системы на ЭВМ с этой точки зрения должны создаваться исключительно на основе достоверных данных и общих правил вывода, проверенных практикой. Включение в базу знаний недостоверных данных или неподтвержденных обобщений и правил может привести к появлению ошибок и получению неправильных решений.<br />
<br />
Причина такой работы экспертных систем состоит в том, что компьютеры могут делать выводы и умозаключения только исходя из фактов и правил, имеющихся в базе знаний, и только из этих данных - и ничего другого. Практическую ценность для систем машинного интеллекта представляют принципы логического вывода на основе не только фактов, но и правил.<br /><br />
Закон логического вывода modus ponens - первый закон, указанный Аристотелем:<br />
<br />
А ® В, А   		- Если из А следует В и посылка А истинна, <br />
<br />
       В         		то выполняется и следствие В.<br /><br />
Примеры применения правила логического вывода.<br />
<br />
1. «Если идет дождь, то на улице мокро». <br />
<br />
«Пошел дождь». <br />
<br />
Следовательно, «на улице мокро».<br />
<br />
2. «Если кому-то весело, то он улыбается». <br />
<br />
«Маша развеселилась». <br />
<br />
Следовательно, «Маша улыбается».<br /><br />
В предикатной форме закон логического вывода превращается в процедуру вывода новых сведений из имеющихся общих правил и конкретных фактов:<br />
<br />
А(х) ® В(х), А(с) 		- Если из А(х) следует В(х) и А(х) выполнено <br />
<br />
В(с)          		для х = с, то выполняется В (с).<br />
<br />
Данная процедура из конкретного факта А(с) и общего правила логического вывода А(х) ® В(х) позволяет вывести новое конкретное утверждение В(с). Иными словами, эта процедура вывода позволяет выводить новые конкретные сведения из общих правил и уже известных конкретных фактов.<br />
<br />
Следовательно, знание и применение законов логического вывода позволяет порождать новые сведения, являющиеся логическим следствием уже известных сведений. Этим свойством и этими законами могут пользоваться не только люди - они применяются в системах машинного интеллекта.<br /><br />
Закон вывода отрицаний - второй закон логического вывода:<br />
<br />
А ® В, не В   		- Если из А следует В, но следствие В ложно, <br />
<br />
       не А         			то не выполняется посылка А.<br /><br />
Примеры логического вывода из отрицаний.<br />
<br />
1. «Если идет дождь, то на улице мокро». <br />
<br />
«На улице сухо». <br />
<br />
Следовательно, «На улице не было дождя».<br />
<br />
2. «Если кому-то весело, то он улыбается». <br />
<br />
«Вова не улыбается». <br />
<br />
Следовательно, «Вове не весело».<br /><br />
В предикатной форме закон вывода отрицаний превращается в конструктивную процедуру вывода отрицаний:<br />
<br />
А(х) ® В(х), не В(с) 	- Если из А(х) следует В(х), но В не выполнено <br />
<br />
не А(с)           		для х = с, то не выполняется и А(с). <br /><br />
Данная процедура из конкретного отрицания следствия не В(с) и общего правила А(х) ® В(х) выводит конкретное отрицание не А(с) предпосылки при х = с. Эта процедура используется в системе Пролог как основной механизм поиска ответов на сложные вопросы, в которых участвуют определяемые предикаты.<br />
<br />
В качестве иллюстраций дополним рассмотренную базу знаний о семье набором правил на языке Пролог, выражающих понятие «родитель»:<br /><br />
родитель (х, у)  мама (х, у);    		- Мама - родитель <br />
<br />
родитель (х, у)  папа (х, у);     		- Папа – родитель<br /><br />
После ввода этих правил в ЭВМ система Пролог на вопросы о родителях выдаст такие ответы при указанной выше базе данных:<br /><br />
? родитель (Надя, х)    		- Кому родитель Надя ? <br />
<br />
х = Оля <br />
<br />
х = Сережа<br /><br />
Вывод ответов на эти вопросы система Пролог проводит следующим образом. Во-первых, вопрос ? родитель (Надя, х) будет заменен на отрицание не родитель (Надя, х). Далее это отрицание будет сопоставлено с правилом вывода родитель (х, у)  мама (х, у), а затем с правилом родитель (х, у)  папа (х, у).<br />
<br />
Применение этой же процедуры вывода ко второму определению родитель (х, у)  папа (х, у) даст отрицание не папа (Надя, х), означающее утверждение «Надя не является папой никому». Для этого утверждения компьютер не имеет в базе данных никаких соответствующих фактов и после просмотра базы знаний по этому варианту выдает ответ НЕТ.<br />
<br />
Применение к отрицанию не родитель (Надя, х) и определению родитель (х, у)  мама (х, у) рассматриваемой процедуры приводит к выводу утверждения не мама (Надя, х), означающему «Надя не является мамой никому». Для этого отрицания машина найдет два конкретных противоречащих ему факта мама (Надя, Оля) и мама (Надя, Сережа). Используя конструктивную процедуру вывода ответов из отрицаний, компьютер даст два конкретных ответа - х = Оля и х = Сережа.<br /><br />
Закон тождества - четвертый общий логический закон, указанный Аристотелем:<br /><br />
«Предмет рассмотрения должен быть определен <br />
<br />
и не должен меняться до конца обсуждения»<br /><br />
Данный закон носит фундаментальный характер для работы экспертных систем - правильные выводы и решения могут быть получены от экспертных систем только при строгом совпадении определений вещей из рассматриваемой предметной области.<br />
<br />
Расхождения в понимании и определении предметных понятий могут приводить и, как правило, приводят к логическим ошибкам и получению неправильных выводов и результатов, что наблюдается среди людей, не обладающих необходимыми профессиональными знаниями.                                        <br />
<br />
Примером нарушения закона тождества является подмена предмета, когда два собеседника осознанно или неосознанно говорят о разных вещах, что приводит их к непониманию, спорам и разногласиям. Классический пример нарушения - ситуация: «я - про Фому, а он - про Ерему».<br />
<br />
В системе Пролог и в системах искусственного интеллекта вывод ответов на сложные вопросы основан на принципе унификации (взаимосогласования) ответов. По этой причине экспертные системы на ЭВМ в отличии от людей могут производить вывод ответов на сложные вопросы только в соответствии с принципом унификации.<br />
<br />
Принцип унификации ответов состоит в том, что общие переменные во взаимосвязанных вопросах должны получать одинаковые значения. Пример ответа на сложносоставной вопрос, состоящий из двух подвопросов:<br />
<br />
? мама (z, у), мама (у, Оля)     		- Кто мама у мамы Оли? <br />
<br />
z = Зина <br />
<br />
у = Надя<br />
<br />
Вывод ответов на сложносоставные вопросы состоит в выделении подвопросов и поиске на них ответов по частям:<br />
<br />
? мама (z, у),  мама (у, Оля)<br />
<br />
            ¤                   \<br />
<br />
 ? мама (z, у)   ?мама (у, Оля)<br />
<br />
              ¤      \                 ¤<br />
<br />
z = Зина      у = Надя<br /><br />
В данном примере общим элементом в выделяемых подвопросах ? мама (z, у) и ? мама (у, Оля) является переменная «у». Ответом на первый подвопрос ? мама (z, у) будут значения z = Зина и у = Надя. Ответы на второй подвопрос ? мама (у, Оля) в соответствии с принципом взаимосогласования будет проводиться для значения у = Надя.<br />
<br />
Принцип вывода взаимосогласованных ответов в системе Пролог распространяется и на сложносоставные правила, включаемые в базы знаний и процедуры логического вывода. Приведем примеры сложных определений:<br /><br />
бабушка (z, х)  мама (z, у), мама (у, х);<br />
<br />
бабушка (z, х)  мама (z, у), папа (у, х);<br />
<br />
дедушка (z, х)  папа (z, у), мама (у, х);<br />
<br />
дедушка (z, х)  папа (z, у), папа (у, х);<br /><br />
При наличии этих правил в памяти ЭВМ можно получить следующие вопросы о бабушках и дедушках:<br />
<br />
? бабушка (z, Оля)     	- Кто бабушка у Оли? <br />
<br />
z = Зина<br />
<br />
? дедушка (z, Надя)    	- Кто дедушка у Нади? <br />
<br />
нет<br />
<br />
Принцип унификации в системе и языке Пролог является общим механизмом логического вывода ответов на сложные вопросы в базах знаний на Прологе и тем самым - конструктивной реализацией закона тождества для машинных систем искусственного интеллекта. Таким образом работа экспертных систем на ЭВМ основана строго на выполнении требований законов логики - закона тождества и закона достаточных оснований.<br /><br />
В о п р о с ы<br /><br />
1. В чем состоит закон противоречия?<br />
<br />
2. В чем заключается закон исключения третьего?<br />
<br />
3. Как используется закон вывода следствий?<br />
<br />
4. Как используется закон отрицания следствий?<br />
<br />
5. В чем недостатки закона двойного отрицания?<br />
<br />
6. В чем состоит закон достаточных оснований?<br />
<br />
7. В чем заключается закон тождества?<br />
<br />
8. В чем состоит принцип унификации?<br />
<br />
9. Как согласуются ответы на сложные вопросы?<br /><br />
3 а д а н и я<br /><br />
1. Укажите примеры двойного отрицания для утверждений:<br />
<br />
а) «сегодня был дождь»;      	в) «х = 2» и «х = 3»;<br />
<br />
б) «х = 0» или «у = 0»;        	г) «5 не делится на 2 и на 3».<br />
<br />
2. Пусть утверждение А «прошел дождь», а утверждение В «на улице сыро». Истинны ли следующие суждения?<br />
<br />
а) А &#222; В         	(прямое доказательство);<br />
<br />
б) В &#222; А         	(обратное доказательство);        <br />
<br />
в) не А &#222; не В    	(противоположное доказательство);<br />
<br />
г) не В &#222; не А    	(противоположное обратному).<br />
<br />
3. Предложите систему признаков и понятий для описаний <br />
<br />
а) класса «Млекопитающие»;    	в) класса «Рыбы»;<br />
<br />
б) класса «Птицы»;            	г) класса «Насекомые».<br />
<br />
В систему понятий введите следующие признаки: окрас, продолжительность жизни, умения ползать, летать, ходить и т. д.<br />
<br />
4. Составьте базу знаний по всемирной географии. В базу знаний включите сведения о странах: название столицы, число жителей, тип государства, размеры страны, континент.<br />
<br />
5. Составьте базу знаний по городам своей страны. В базу знаний включите сведения о размерах городов, числе жителей, расстоянии от столицы, названии самых крупных заводов, фабрик, музеев, стадионов и т. п.<br />
<br />
6. Составьте базы данных<br />
<br />
а) по литературе;          	г) по истории;<br />
<br />
б) по зоологии;           	д) по ботанике;<br />
<br />
в) об автомобилях;        	е) по кулинарии.<br /><br />
Глава 4. ОСНОВЫ АЛГОРИТМИЗАЦИИ И ПРОГРАММИРОВАНИЯ<br /><br />
4.1. Основные свойства алгоритмов<br /><br />
Алгоритм относится к фундаментальным понятиям информатики. На понятии алгоритма построено все основные принципы программирования - составления программ для вычислительных машин.<br />
<br />
Алгоритм - это совокупность действий со строго определенными правилами выполнения. В информатике изучаются различного рода алгоритмы - диалоговые алгоритмы, алгоритмы обработки данных, вычислительные алгоритмы, алгоритмы управления роботами, станками и другими техническими устройствами.<br />
<br />
Пример диалогового алгоритма:<br /><br />
Алгоритм                          			Блок-схема <br />
<br />
алг «приветствие»                                                             &#175;<br />
<br />
нач                           				запрос («Ваше имя=», NN)<br />
<br />
запрос («Ваше имя=», NN)                                                 &#175;<br />
<br />
вывод («Добрый день», NN)		вывод («Добрый день», NN)      <br />
<br />
кон                          						&#175;<br /><br />
Для описания алгоритмов используются блок-схемы, изображенные справа, или структурированная запись, приведенная слева. Блок-схемы наглядны. Однако блок-схемы трудно рисовать, в них сложно вносить изменения и исправления из-за сложности перерисовки рамок и стрелок. Однако блок-схемы до сих пор требуются отечественными стандартами на документирование программ.<br />
<br />
Достоинство записи алгоритмов и программ в структурированной форме заключается в простоте их чтения и ввода с экрана ЭВМ, а также в простоте внесения изменений и исправлений с использованием даже самых простейших редакторов тестов. По этим причинам зарубежом блок-схемы уже давно не используются ни для документирования, ни для обучения, а все современные языки построены на принципах структурного программирования.<br />
<br />
Приведем примеры описания алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> в структурированной записи:<br /><br />
Алгоритм                     			Программа      <br />
<br />
алг «приветствие»             			' приветствие<br />
<br />
нач                         				сls <br />
<br />
запрос («Ваше имя=», NN)     		   input «Ваше имя=», NN$ <br />
<br />
вывод («Добрый день», NN)    		   print «Добрый день», NN$<br />
<br />
кон                           				end<br /><br />
Алгоритм, приведенный слева, записан на псевдокоде. Псевдокод - это язык записи структурированных алгоритмов в качестве документации к программам для ЭВМ. Особенность псевдокода заключается в том, что описания на нем выполняются на родном языке — русском, английском, украинском, казахском, немецком и т. п.<br />
<br />
Программа, приведенная справа, записана на языке Бейсик - языке программирования персональных ЭВМ. Языками программирования называются формализованные языки, используемые для записи программ на ЭВМ. Одним из них является язык Бейсик.<br />
<br />
Достоинства псевдокода заключаются в том, что описания алгоритмов, записанные на родном языке, намного проще читать и понимать, чем запись программ на языке с иностранной лексикой. По этим причинам псевдокод используется как основное средство документирования программ во всех ведущих фирмах, занимающихся разработкой программ.<br />
<br />
С точки зрения информатики алгоритмы, записанные в такой обобщенной записи, позволяют выразить общую логику работы программ, независимо от используемых языков программирования и типов ЭВМ. При этом алгоритмы, записанные в такой обобщенной форме, могут быть реализованы с помощью различных языков программирования для самых различных типов ЭВМ.<br />
<br />
В качестве примера приведем реализацию этого же диалогового алгоритма на самой ранней версии языка Бейсик, использовавшегося на самых первых персональных компьютерах:<br /><br />
Алгоритм					Программа<br />
<br />
алг «приветствие»				10 ' приветствие<br />
<br />
нач						20 сls<br />
<br />
запрос («Ваше имя=», NN)		30   input «Ваше имя=», NN$<br />
<br />
вывод («Добрый день», NN)		40   print «Добрый день», NNS<br />
<br />
кон						50 end<br /><br />
Основные свойства алгоритмов и программ для вычислительных машин - однозначность, результативность, правильность и массовость. Этими свойствами алгоритмы отличаются от различного рода расплывчатых и неоднозначных предписаний, инструкций и кулинарных рецептов, которые могут толковаться и исполняться многими способами.<br />
<br />
Однозначность алгоритмов - это однозначность правил их выполнения. Следствием этого свойства алгоритмов является однозначность результатов их выполнения в одинаковых начальных условиях. Это не всегда верно для кулинарных рецептов, когда разные исполнители в одних и тех же условиях могут придавать различный вкус и пикантность одним и тем же блюдам.<br />
<br />
Результативность - это завершение выполнения алгоритмов определенными результатами. Результативность - наиболее важное свойство алгоритмов и программ, предназначенных для решения прикладных задач. Алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, не дающие результатов или ведущие к сбоям и отказам, никому не нужны.<br />
<br />
Массовость - это возможность применения алгоритмов в различных конкретных исходных условиях. Массовые алгоритмы особенно важны для решения прикладных задач, когда алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> должны обеспечить решение целого класса задач, различающихся исходными данными.<br />
<br />
Правильность алгоритмов определяется правильностью результатов, получаемых с их помощью. По этой причине правильность алгоритмов и программ является относительным понятием. Оценка правильности может проводиться только при наличии требований к конечным результатам.<br />
<br />
Алгоритм считается правильным, если он дает правильные результаты для любых допустимых начальных условиях. Правильность алгоритмов гарантирует правильность результатов их выполнения.<br />
<br />
Алгоритм содержит ошибки, если его выполнение может привести  к отказам, сбоям или неправильным результатам, либо вовсе не дает никаких результатов. Эти ошибки называются алгоритмическими. Алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, содержащие такие ошибки, могут нанести вред или ущерб тем, кто захочет ими воспользоваться.<br />
<br />
Для оценки правильности алгоритмов и программ необходимо уметь оценивать результаты выполнения составляющих их действий  и конечные результаты их выполнения в целом.<br />
<br />
Простейшие виды машинных операций - операции присваивания. С помощью присваивании в алгоритмах описываются вычисления в программах для ЭВМ. Рассмотрим примеры операций присваивания и описания результатов их выполнения.<br /><br />
Присваивания:              			Результаты:<br />
<br />
а := 0                      				а = 0                  <br />
<br />
b := а + 1 					b ' = а + 1 = 1 <br />
<br />
b := b + 1 					b " = b' + 1 = 2<br /><br />
Запись присваиваний читается:<br />
<br />
а := 0        			- «переменной а присвоить значение 0»;<br />
<br />
b := b + 1    			- «переменной b присвоить значение b + 1».<br />
<br />
Записи в колонке результатов читаются так:<br />
<br />
а = 0         			- «значение а равно 0»;<br />
<br />
b' = b + 1    			- «значение b' равно b + 1».<br /><br />
Здесь а и b - программные переменные - область машинной памяти, в которой хранятся их значения а и b. В отличии от обычных математических переменных программные переменные могут получать новые значения. В частности, присваивание b: = b + 1 записывает в программную переменную b новое значение b', равное величине b + 1, где b - прежнее значение переменной b.<br />
<br />
Для описания результатов выполнения алгоритмов и программ могут и должны использоваться спецификации. Спецификации - это точные, математически строгие описания. Примерами спецификаций могут служить сценарии диалоговых программ.<br />
<br />
Сценарии диалоговых алгоритмов и программ - это совокупность текстов, картинок и сообщений, появляющихся на экранах ЭВМ. Рассмотрим в качестве примера сценарий алгоритма рисования домика на экране ЭВМ.<br /><br />
Сценарий «Домик»<br /><br />
Решение - следующие алгоритм и программа, результатом работы которых должен быть приведенный выше рисунок:<br /><br />
Алгоритм                         			Программа<br />
<br />
алг «Домик»                     			' Домик<br />
<br />
нач                                 			screen 2,0 <br />
<br />
линия (130,40)-( 100,100), красная    	   line (150,40)-(100,100),8 <br />
<br />
линия (130,40)-(200,100), красная    	   line (150,40)-(200,100),8 <br />
<br />
рамка(100,100)-(200,200), белая     	   line (100,100)-(200,200),15,b <br />
<br />
рамка(130,120)-(170,160), синяя     	   line (130,120)-(170,160),3,b<br />
<br />
кон                                			end<br /><br />
Однако результатом выполнения приведенных алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> будет следующий рисунок:<br /><br />
Экран ЭВМ<br /><br />
Причиной того, что на этом рисунке крыша «поехала» влево, являются алгоритмические ошибки - неправильный расчет координат крыши в алгоритме, из-за чего составленная программа дает не тот рисунок, который указан в сценарии.<br />
<br />
Примером прикладного алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> может служить следующий алгоритм расчета прибыли:<br /><br />
Алгоритм                     			Программа<br />
<br />
алг «расчет прибыли»          		' расчет прибыли<br />
<br />
нач                            				сls <br />
<br />
запрос («доходы =», d)         		   input «доходы =», d <br />
<br />
запрос («расходы =», r)         		   input «расходы =», r <br />
<br />
р: = d - r 					   р = d - r <br />
<br />
вывод («прибыль =», р)          		   print «прибыль =», р<br />
<br />
кон                           				end<br /><br />
Сценарий диалога            			Протокол диалога<br />
<br />
доходы =?               			доходы =? 1000 <br />
<br />
расходы =?                			расходы =? 700 <br />
<br />
прибыль =                 			прибыль = 300<br /><br />
Для проверки правильности алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> необходима постановка задачи. Приведем строгую постановку решаемой задачи.<br /><br />
Задача: 	расчет прибыли. <br />
<br />
Треб.:   	р - прибыль. <br />
<br />
Дано:   	r - расходы;<br />
<br />
d - доходы. <br />
<br />
Где:    		d = r + р. <br />
<br />
При:   		d > 0.    <br /><br />
Для оценки правильности полученных результатов нужно сверить расходы и прибыль с доходами. В нашем случае это должно быть 700 + 300 = 1000, что выражает правильный конечный результат при указанных данных.<br />
<br />
Для оценки правильности алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> необходимо рассмотреть конечные результаты их выполнения при произвольных значениях данных d и г. Вычисляемая величина р по алгоритму будет равна<br /><br />
Операция       		Результат <br />
<br />
р := d - r      		р = d – r<br /><br />
Подставляя в условие постановки задачи это значение, получаем:<br />
<br />
d = r + p = r + (d - r) = d  	- верное тождество.<br />
<br />
Таким образом, при любых значениях исходных данных результаты выполнения приведенного алгоритма будут правильными.<br /><br />
В о п р о с ы<br /><br />
1. Что такое алгоритм?<br />
<br />
2. Каковы основные виды алгоритмов?<br />
<br />
3. Что такое однозначность алгоритмов?<br />
<br />
4. Что такое результативность алгоритмов?<br />
<br />
5. Что такое правильность алгоритмов?<br />
<br />
6. Что такое массовость алгоритмов?<br />
<br />
7. Что такое алгоритмические ошибки?<br /><br />
З а д а ч и<br /><br />
1. Составьте сценарий, алгоритм и программу:<br />
<br />
а) поздравления с Новым годом;<br />
<br />
б) поздравления с Днем рождения;<br />
<br />
в) регистрации даты рождения;<br />
<br />
г) регистрации фамилии и имени.<br />
<br />
2. Составьте сценарии диалога, алгоритм и программу:<br />
<br />
а) расчета сдачи за товар;<br />
<br />
б) расчета остатка от прибыли;<br />
<br />
в) пересчета рубль/доллар;<br />
<br />
г) расчета остатка времени до 18.00.<br />
<br />
3. Составьте сценарий, алгоритм и программу вычислений:<br />
<br />
а) времени движения по длине пути и скорости;<br />
<br />
б) длины пути по времени и скорости движения;<br />
<br />
в) средней скорости по времени и длине пути.<br />
<br />
4. Составьте <A href="http://www.sunhome.ru/image"><font class="normal">картинки</font></A>, алгоритмы и программу рисования:<br />
<br />
а) российского флага;      	г) украинского флага;<br />
<br />
б) шведского флага;        	д) французского флага;<br />
<br />
в) японского флага;        	е) британского флага.<br />
<br />
5. Составьте сценарий, алгоритмы и программу на Бейсике вывода изображений:<br />
<br />
а) яхты;                   	д) автомобиля;<br />
<br />
б) трактора;                	е) усадьбы;<br />
<br />
в) дерева;                  	ж) цветка;<br />
<br />
г) рыбы;                		з) птицы.<br /><br />
4.2. Базовые средства программирования<br /><br />
Базовыми средствами программирования для персональных компьютеров считаются языки семейства Basic (Бейсик). Эти языки программирования имеются на всех персональных компьютерах и широко используются для обучения началам программирования в школах и вузах.<br />
<br />
Бейсик является примером одного из лучших языков диалогового программирования для ЭВМ. По этой причине Бейсик оказался самым первым языком программирования самых первых персональных компьютеров, созданных фирмой Microsoft.<br />
<br />
На персональных компьютерах IBM PC язык Бейсик имеет три версии, связанные с операционными системами для этих компьютеров, созданных и развиваемых фирмой Microsoft:<br />
<br />
1) традиционный Бейсик (без ОС),<br />
<br />
2) структурный Бейсик(МS DOS),<br />
<br />
3) графический Бейсик (Windows).<br />
<br />
Традиционный Бейсик полностью воспроизводит язык программирования самых первых персональных компьютеров, на которых отсутствовали операционные системы. В связи с прекращением производства этих компьютеров данная версия языка Бейсик потеряла свое прежнее значение и не используется на современных ЭВМ.<br />
<br />
Структурный Бейсик под именем Quick Basic был создан вместе с первыми моделями персональных компьютеров IBM PC как базовое средство программирования в операционной системе MS DOS. Интерпретатор этой версии Бейсика имеется на всех персональных компьютерах IBM PC в качестве стандартной компоненты операционной системы MS DOS.<br />
<br />
Графический Бейсик под именем язык Visual Basic был создан фирмой Microsoft в качестве базового средства программирования для новейших моделей компьютеров IBM PC с операционной системой Windows. Этот язык может использоваться только в среде Windows и только на старших моделях IBM PC.<br />
<br />
Пример <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на традиционном языке Бейсик с комментариями, в которых записан реализованный в ней алгоритм.<br /><br />
Программа                     		Алгоритм<br />
<br />
10 ' поздравление                 	' алг «поздравление»<br />
<br />
20 сls                              		' нач<br />
<br />
30 nm$ = «Оля» 			' пт$ = «Оля»<br />
<br />
40 dn$ = «с днем рождения»      	' dn$ = «с днем рождения»<br />
<br />
50 print «Дорогая» + nm$         	' вывод «Дорогая» + пт$<br />
<br />
60 print «Поздравляю тебя» 	' вывод «Поздравляю тебя»<br />
<br />
70 print dn$                      		' вывод dn$<br />
<br />
80 print «Желаю счастья»         	' вывод «Желаю счастья»<br />
<br />
90 print «Твой папа»              	' вывод «Твой папа»<br />
<br />
100 end                          		' кон<br /><br />
<A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A> на Бейсике состоят из операторов и комментариев. Каждый оператор соответствует некоторой операции, которую может выполнить компьютер. Комментарии включаются в тексты программ для их документирования.<br />
<br />
Та же самая программа на структурном Бейсике:<br /><br />
Программа				Алгоритм<br />
<br />
' поздравление			' алг «поздравление»<br />
<br />
сls					' нач<br />
<br />
nm$ = «Оля»				' пт$ = «Оля»<br />
<br />
dn$ = «с днем рождения»		' dn$ = «с днем рождения»<br />
<br />
print «Дорогая» + nm$		' вывод «Дорогая» + пт$<br />
<br />
print «Поздравляю тебя»		' вывод «Поздравляю тебя»<br />
<br />
print dn$				' вывод dn$<br />
<br />
print «Желаю счастья»		' вывод «Желаю счастья»<br />
<br />
print «Твой папа»			' вывод «Твой папа»<br />
<br />
end					' кон<br /><br />
Результатом выполнения на компьютере и той и другой <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> будет появление на экране одного и того же текста:<br /><br />
Дорогая Оля<br />
<br />
Поздравляю тебя<br />
<br />
с днем рождения <br />
<br />
Желаю счастья.<br />
<br />
Твой папа.<br /><br />
В системе программирования QBasic на IBM PC <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> могут записываться в обоих формах - с нумерацией и без нумерации строк. В версиях Бейсика для ЭВМ, не имеющих операционных систем, строки должны быть пронумерованы.<br />
<br />
Основными свойствами программ для ЭВМ как одной из форм описания и разновидностей машинных алгоритмов является их выполнимость, мобильность, эффективность и правильность.<br />
<br />
Выполнимость программ - возможность их выполнения на данном типе компьютеров. Возможность выполнения зависит от типа ЭВМ, наличия внешних устройств, надлежащего объема оперативной и внешней памяти, операционной системы и системы программирования.<br />
<br />
Мобильность программ - возможность переноса <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на другой тип ЭВМ. Примером мобильности является возможность выполнения в системе структурного программирования Qbasic программ, записанных на традиционном Бейсике.<br />
<br />
Эффективность программ - обычно это минимальность времени их выполнения на ЭВМ. Однако, если созданные <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> содержат ошибки, то утверждения об их эффективности не имеют никакого смысла.<br />
<br />
Правильность программ - правильность результатов, получаемых с их помощью.<br />
<br />
Правильность результатов определяется соответствием документации или другими описаниями программ.<br />
<br />
<A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A> содержат ошибки, если их выполнение на ЭВМ приводит к возникновению отказов, сбоев или неправильных результатов. От использования программ, содержащих ошибки, следует отказываться.                                    <br />
<br />
Основные типы операторов языка Бейсик:<br />
<br />
- операторы ввода-вывода;<br />
<br />
- графические операторы;<br />
<br />
- присваивания;<br />
<br />
- обращения к функциям;<br />
<br />
- описания данных;<br />
<br />
- управляющие операторы;<br />
<br />
- обращения к подпрограммам.<br /><br />
Примеры операторов ввода-вывода на экран.<br />
<br />
Оператор               				Действие<br />
<br />
print «привет»             			вывод («привет») <br />
<br />
print «корень=»; х         			вывод («корень =», х) <br />
<br />
input «a=»; а              			запрос («а=», а) <br />
<br />
input n                    				ввод (п) <br />
<br />
locate st, ps                				позиция (st,ps)<br /><br />
Примеры графических операторов:<br />
<br />
Оператор              				Действие<br />
<br />
pset(x,y),c                 				точка(х,у),с<br />
<br />
line(x,y)-(u,v),c            			линия(х,у)-(и, v), с<br />
<br />
line(x,y)-(u,v),c,b          			рамка(х,у)-(и,у),с <br />
<br />
circle(x,y),r,c              			окружность(х,у), r,с <br />
<br />
circle(x,y),r,c,al,a2         			дуга(х,у), r,с,а1,а2 <br />
<br />
paint(x,y),c                				закраска(х,у),с <br />
<br />
сls                        				очистка_экрана <br />
<br />
screen 0,0                 				текстовый_экран <br />
<br />
screen 1,0                 				графический_экран1<br />
<br />
screen 2,0                 				графический_экран2<br /><br />
Примеры операторов присваивания.<br />
<br />
Присваивания     		Действие			Результат<br />
<br />
а = 0               			а := 0				а = 0<br />
<br />
b = а + 1           		b := a + 1			b = а + 1 = 1<br />
<br />
с = 2*b + 3         		с := 2b + 3			с = 2 b + 3 = 5<br />
<br />
d = b/c             		d := b/c				d = -b/c = 0.2<br />
<br />
b = b + 1           		b := b + 1			b' = b + 1 = 2<br />
<br />
b = b + 1           		b := b + 1			b" = b' + 1 = 3<br /><br />
Математические функции с примерами обращения.<br />
<br />
Функция	Смысл					Пример  		Результат   <br />
<br />
rnd       	- случайное число от 0 до 1    	rnd <br />
<br />
int (x)     	- целая часть числа х          		int (5/3)       			1 <br />
<br />
abs (x)    	- абсолютное значение числа   	abs (-2)      			2 <br />
<br />
sqr (x)    	- квадратный корень числа    	sqr (16)       			4 <br />
<br />
sin (x)    	- синус                       			sin (0)        			0 <br />
<br />
cos (x)    	- косинус                     		cos (0)        			1 <br />
<br />
tan (x)    	- тангенс                     		tan (0)        			0 <br />
<br />
atn (x)    	- арктангенс                  		atn (0)        			0 <br />
<br />
exp (x)    	- экспонента                  		ехр (0)        			1 <br />
<br />
log (x)    	- логарифм натуральный       	log (1)        			0<br /><br />
К числу управляющих операторов можно отнести условные операторы, имеющие следующие форму записи и смысл:<br />
<br />
Условный оператор:          			Действия ЭВМ:<br />
<br />
if  then    		если  то <br /><br />
где  - это один или несколько операторов, разделяемых двоеточием, а  - это некоторое логическое условие, при соблюдении которого будут выполняться указанные операторы.<br />
<br />
Примеры записи условии - простых и сложносоставных:<br />
<br />
Условие:                 			Запись:<br />
<br />
х = у                     			х = у <br />
<br />
х &#185; у                     			х  у <br />
<br />
х > у                     			х > у <br />
<br />
х < у                     			х < у <br />
<br />
х &#163; у                     			х = у <br />
<br />
не (х = 1)                 			not (x = 1) <br />
<br />
(х > 0) и (у > 0)           		(х > 0) and (у > 0) <br />
<br />
(а = 0) или (b = 0)        		(а = 0) or (b = 0)<br /><br />
Простейшим примером <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> с условными операторами является реализация алгоритма «выбор из меню»:<br /><br />
Сценарий «Выбор из меню»<br /><br />
Меню:					:<br /><br />
1. Новый год				1 января<br />
<br />
2. День рождения			1 декабря<br />
<br />
3. День знаний			1 сентября <br />
<br />
выбор=?  <br />
<br />
<br /><br />
Алгоритм и программа выбора по меню, соответствующие этому сценарию:<br /><br />
Алгоритм					Программа<br />
<br />
алг «выбор по меню» 			' выбор по меню<br />
<br />
нач						cls<br />
<br />
вывод («Меню»)				   print «Меню:»<br />
<br />
вывод («I. Новый год»)			   print («1. Новый год»)<br />
<br />
вывод («2. День рождения»)		   print («1. День рождения») <br />
<br />
вывод («З. День знаний») print      	   («3. День знаний»)<br />
<br />
запрос («выбор=», п)			   input «выбор=», n<br />
<br />
если п = 1 то				   if n = I then<br />
<br />
вывод («1 января»)			     print «1 января»<br />
<br />
если п = 2 то				   if n = 2 then<br />
<br />
вывод («1 декабря»)			     print «1 декабря»<br />
<br />
если п = 3 то				   if n = 3 then<br />
<br />
вывод («1 сентября»)			     print «1 сентября»<br />
<br />
кон						end<br /><br />
Правильность диалоговых алгоритмов и программ можно оценить сопоставлением их со сценарием диалога. Любое отклонение результатов выполнения алгоритмов и программ от сценария диалога - это ошибка. Диалоговый алгоритм - правильный, если результаты их выполнения строго соответствуют сценарию.<br />
<br />
Сравнение текста <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> с описанием алгоритма, а затем алгоритма со сценарием диалога подтверждает полное соответствие <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> заданному сценарию «выбор по меню». Таким образом, правильность программ может проверяться через правильность реализованных в них алгоритмов. <br /><br />
В о п р о с ы<br /><br />
1. Что такое программа?<br />
<br />
2. Что такое язык программирования?<br />
<br />
3. Каковы основные свойства программ?<br />
<br />
4. Какие есть графические операторы?<br />
<br />
5. Какие есть операторы ввода- вывода?<br />
<br />
6. Какие есть математические функции?<br />
<br />
7. Как записываются логические условия?<br /><br />
З а д а ч и<br /><br />
1. Составьте сценарий, алгоритм и программу с выбором из меню:<br />
<br />
а) поздравления с Новым годом;<br />
<br />
б) поздравления с Днем рождения;<br />
<br />
в) регистрации даты рождения;<br />
<br />
г) регистрации фамилии и имени.<br />
<br />
2. Составьте сценарий, алгоритм и программу для следующих вычислений с выбором из меню:<br />
<br />
а) расчета сдачи за товар;<br />
<br />
б) расчета остатка от прибыли;<br />
<br />
в) пересчета рубль/доллар;<br />
<br />
г) расчета остатка времени до 18.00.<br />
<br />
3. Составьте сценарий, алгоритм и программу рисования с выбором из меню изображений:<br />
<br />
а) российского флага;      	г) украинского флага;<br />
<br />
б) шведского флага;       	д) французского флага;<br />
<br />
в) японского флага;        	е) британского флага.<br />
<br />
4. Составьте сценарий, алгоритм и программу с выбором из меню следующих вычислений:<br />
<br />
а) времени движения по длине пути и скорости;<br />
<br />
б) длины пути по времени и скорости движения;<br />
<br />
в) средней скорости по времени и длине пути.<br />
<br />
5. Составьте сценарий, алгоритм и программу рисования следующих изображений с выбором из меню:<br />
<br />
а) домика;          	г) автомобиля;<br />
<br />
б) дерева;            	д) цветка;<br />
<br />
в) рыбы;           	е) птицы.<br /><br />
4.3. Основы структурного программирования<br /><br />
Алгоритмизация - это составление алгоритмов для последующей реализации в виде программ для ЭВМ. Знание и использование систематических методов превращают алгоритмизацию - в строгую дисциплину, позволяющую составлять <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ без ошибок.<br /><br />
Порядок составления программ:                  <br />
<br />
задача &#190;<br />
<br />
алгоритмы <br />
<br />
программа <br />
<br />
ЭВМ<br /><br />
На практике широко используются два подхода к алгоритмизации:<br />
<br />
1) традиционный подход (с использованием блок-схем);<br />
<br />
2) структурный подход (с использованием структурной записи);<br />
<br />
Традиционный подход к составлению алгоритмов с применением блок-схем грешит большим числом ошибок в программах из-за их громоздкости и запутанности. Из-за этого традиционный подход к составлению программ чреват большим числом ошибок в создаваемых программах.<br />
<br />
Структурный подход к программированию заключается в обязательном предварительном составлении структурированных алгоритмов с записью их на псевдокоде. Простота чтения, понимания и исправления структурированных описаний позволяет существенно уменьшить количество ошибок в алгоритмах и программах и сократить время их отладки на ЭВМ.<br />
<br />
При структурном подходе к составлению алгоритмов и программ используются три основных правила композиции:<br />
<br />
1) альтернативный выбор;<br />
<br />
2) циклический повтор;<br />
<br />
3) вспомогательные алгоритмы (под<A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>).<br />
<br />
Структурированными считаются алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> составленными только с использованием указанных трех правил структурной композиции. Неструктурированными считаются алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, в которых используются операторы goto ... или отсутствует ступенчатая запись циклов и альтернатив.<br />
<br />
Основные правила структурной композиции алгоритмов с примерами записи их на языке структурированного Бейсика:<br /><br />
1. Альтернативный выбор:<br />
<br />
Алгоритм          		Запись<br />
<br />
если х > 0 то       		if х > 0 then<br />
<br />
у := х              		   у = х <br />
<br />
иначе               		else<br />
<br />
у := -х            		   у = -х<br />
<br />
 кесли              		end if<br /><br />
2. Циклический повтор:<br />
<br />
Алгоритм          		Запись<br />
<br />
пока х > 1 цикл     		do while х > 1<br />
<br />
х: = х/2           		   х = х/2 <br />
<br />
кцикл               		loop<br /><br />
3. Вспомогательные алгоритмы (под<A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>).<br />
<br />
 	Алгоритм          		Подпрограмма<br />
<br />
алг «у = |х|»         		mod: 'у = |х|<br />
<br />
нач                  		' <br />
<br />
если х > 0 то      		   if х > 0 then<br />
<br />
у := х              		       у = х <br />
<br />
иначе              		   else<br />
<br />
у := -х            		      у = -х <br />
<br />
все                 		   end if <br />
<br />
кон                			return<br /><br />
Обращение к алгоритму     	Обращение к подпрограмме <br />
<br />
«у = |х|»                   		gosub mod<br /><br />
В качестве иллюстрации приведем пример структурированного алгоритма «Галерея картинок» и соответствующей структурированной <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>:<br /><br />
Сценарий «Галерея картинок» <br /><br />
Список картинок:<br />
<br />
1. треугольник<br />
<br />
2. прямоугольник<br />
<br />
3. кольцо<br />
<br />
номер =? «N»<br /><br />
n = 1			  n =2 		      n = 3<br /><br />
В соответствии с этими четырьмя картинками построим три вспомогательных алгоритма рисования отдельных картинок из «Галереи» и общий алгоритм выбора картинок в соответствии с приведенным выше сценарием:<br /><br />
алг «Галерея картинок»<br />
<br />
нач						алг «рисунок_треугольника»<br />
<br />
вывод («Список картинок:»)		нач<br />
<br />
вывод («1. треугольник»)		    линия (150,50)-(100,100)<br />
<br />
вывод («2. прямоугольник»)		    линия (150,50)-(200,100)<br />
<br />
вывод («3. кольцо»)			    линия (100,100)-(200,100)<br />
<br />
запрос(«номер =», n)			кон <br />
<br />
графический_экран<br />
<br />
если n = 1 то				алг «рисунок_прямоугольника»<br />
<br />
рисунок_треугольника		нач<br />
<br />
инес n = 2 то 				    рамка (50,50)-( 150,100)<br />
<br />
рисунок_прямоугольника		кон <br />
<br />
инес n = 3 то<br />
<br />
рисунок_кольца			алг «рисунок_кольца»<br />
<br />
иначе					нач<br />
<br />
вывод («нет такого рисунка»)	   окружность (100,100), 20<br />
<br />
все						   окружность (100,100),50<br />
<br />
кон						кон<br /><br />
Реализация данного алгоритма в виде структурированной <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>:<br /><br />
Алгоритмы:					Программа:<br />
<br />
алг «Галерея картинок»	 		'Галерея картинок<br />
<br />
нач						cls<br />
<br />
вывод («Список картинок:»)	   	   print «Список картинок:»<br />
<br />
вывод («1. треугольник»)	   	  print «1. треугольник»<br />
<br />
вывод («2. прямоугольник»)	   	  print «2. прямоугольник»<br />
<br />
вывод («З. кольцо»)		   	  print «3. кольцо»<br />
<br />
запрос(«номер =», n)		   	  input «номер =», n<br />
<br />
если n = 1 то			   	  if n = 1 then<br />
<br />
рисунок_треугольника	     	     gosub treug<br />
<br />
инеc n = 2 то			  	  if n = 2 then<br />
<br />
рисунок_прямоугольника	     	     gosub box<br />
<br />
инеc n = 3 то			  	  if n = 3 then<br />
<br />
рисунок_кольца		     	     gosub ring<br />
<br />
инеc п < 1 или n > 3 то		  	  if n < 1 or n >3 then<br />
<br />
вывод («нет такого рисунка»)  	     print «нет такого рисунка»<br />
<br />
все					  	  'все<br />
<br />
кон					           end<br /><br />
алг «рисунок треугольника»		treug: 'рисунок треугольника<br />
<br />
нач						cls<br />
<br />
графический_экран			   screen 2,0<br />
<br />
линия (150,50)-( 100,100)			   line (150,50)-(100,100),3<br />
<br />
линия (150,50)-(200,100)			   line (150,50)-(200,100),3<br />
<br />
линия (100,100)-(200,100)		   line (100,100)-(200,100),3<br />
<br />
кон						return<br /><br />
алг «рисунок прямоугольника»		box: 'рисунок прямоугольника<br />
<br />
нач						cls<br />
<br />
графический_экран			   screen 2,0<br />
<br />
рамка (50,50)-(150,100)			   line (50,50)-(150,100),3,b<br />
<br />
кон						return<br /><br />
алг «рисунок кольца»			ring: 'рисунок кольца<br />
<br />
нач						cls<br />
<br />
графический_экран			   screen 2,0<br />
<br />
окружность (100,100),20		   circle (100,100),20<br />
<br />
окружность (100,100),50		   circle (100,100),50<br />
<br />
кон						return<br /><br />
Данный подход - составление структурированных алгоритмов может применяться к составлению структурированных программ для любых ЭВМ на любых языках программирования - Паскаль, Си, Ада, Модула и т. д.<br />
<br />
На практике используется более широкий набор правил структурной композиции алгоритмов и программ, принятых в современных языках программирования, ~ правила альтернативного выбора, а также циклы с выходами и со счетчиками.<br /><br />
1. Условные действия.<br />
<br />
если у < 0 то                		if у < 0 then<br />
<br />
вывод («недопустим»)        	   print «недопустим» <br />
<br />
кесли                      			end if<br /><br />
2. Многоальтернативный выбор.<br />
<br />
если х > 1 то                		if х > 1 then<br />
<br />
у: = 1                       		   у = 1 <br />
<br />
инес х < -1 то              		elseif х < -1 then<br />
<br />
у: = -1                    			   у = -1 <br />
<br />
иначе                      			else<br />
<br />
у: = х                         		   у = х <br />
<br />
кесли                          			end if<br /><br />
3. Циклы со счетчиком:<br />
<br />
от k = 1 до п цикл           		for k = 1 to n<br />
<br />
вывод (k&#215;k)                  		print k*k <br />
<br />
кцикл                        			next k<br /><br />
4. Циклы с выходами. <br />
<br />
цикл                     			do<br />
<br />
s: = s + x                             	   s = s + x<br />
<br />
при х < 1 выход            		if х < 1 then exit do<br />
<br />
х: = x/2                     		   x = x/2 <br />
<br />
кцикл                       			loop<br /><br />
В циклах в общем случае возможны несколько выходов. Дополнительные выходы считаются допустимыми даже для циклов со счетчиками. Приведем примеры решения задач с использованием дополнительных правил структурирования алгоритмов и программ.<br />
<br />
Пример записи структурированных алгоритмов и программ с использованием циклов для алгоритма игры-эксперимента «звездное небо»:<br /><br />
Алгоритм					Программа<br />
<br />
алг «звездное небо»				' звездное небо»<br />
<br />
нач						сls<br />
<br />
цикл						   do<br />
<br />
запрос(«звезд=», п)			      input «звезд=», n<br />
<br />
при п <br />
<br />
*<br />
<br />
мало<br /><br />
много	<br />
<br />
молодец, умница	<br /><br />
Для реализации этого сценария воспользуемся циклом с выходом, в котором задается вопрос число=? и проверяются числа, вводимые человеком. Выход из цикла происходит после совпадения ответа с числом, задуманным ЭВМ:<br /><br />
Алгоритм                      		Программа <br />
<br />
алг «угадай-ка»                		' угадай-ка <br />
<br />
нач                           			сls <br />
<br />
вывод («Угадай число»)          	   print «Угадай число» <br />
<br />
вывод («от 1 до 100»)           	   print «от 1 до 100» <br />
<br />
z: = случайное [0:100]          	   z = int (rnd* 100) <br />
<br />
цикл                           		   do<br />
<br />
запрос( «число=», х)             	      input «число=», х <br />
<br />
при х = z вых                   		   if х = z then exit do <br />
<br />
если х < z то                   		  if х < z then<br />
<br />
вывод («мало»)                 	     print «мало» <br />
<br />
инеc х > z то                   		  elseif х > z then<br />
<br />
вывод («много»)                	     print «много» <br />
<br />
все                            		  end if <br />
<br />
кцикл                         		  loop <br />
<br />
вывод («молодец, умница»)      	  print «молодец, умница» <br />
<br />
кон                           			end<br /><br />
Сравнение алгоритма со сценарием показывает их полное соответствие друг другу.<br /><br />
В о п р о с ы<br /><br />
1. Сколько ошибок содержится в программах?<br />
<br />
2. Как долго длится отладка программ?<br />
<br />
3. Что такое спецификации программ?<br />
<br />
4. Зачем нужны спецификации?<br />
<br />
5. Можно ли гарантировать отсутствие ошибок в программах?<br />
<br />
6. Что такое систематический подход к алгоритмизации?<br /><br />
З а д а ч и<br /><br />
1. Составьте сценарий и алгоритм диалога «Распорядок дня», с помощью которого можно узнать, что запланировано на заданный час дня.<br />
<br />
2. Составьте сценарий и алгоритм диалога с выбором по меню;<br />
<br />
а) национальных флагов;<br />
<br />
б) каталога строительных блоков;<br />
<br />
в) набора рисунков;<br />
<br />
г) каталога строений.<br />
<br />
3. Предложите сценарии и алгоритмы рисования на экране абстрактных рисунков:<br />
<br />
а) из случайных разноцветных точек;<br />
<br />
б) из случайных разноцветных отрезков;<br />
<br />
в) из случайных разноцветных рамок;<br />
<br />
г) из случайных разноцветных окружностей;<br />
<br />
д) из случайных разноцветных кругов;<br />
<br />
е) из случайных разноцветных окошек.<br />
<br />
4. Составьте сценарий и алгоритм, моделирующий на экране броуновское движение частиц.<br /><br />
4.5. Средства обработки данных<br /><br />
Автоматизированная обработка данных - одна из основных массовых проблем, решаемых с помощью ЭВМ. На персональных компьютерах IBM PC базовым средством обработки данных является язык программирования Basic. В операционной системе Windows это язык считается основным языком разработки программ для компьютеров IBM PC.                           <br />
<br />
Основной особенностью языков структурного и графического программирования Бейсика как языка обработки данных являются операторы данных data, позволяющие описывать данные непосредственно в текстах программ. Пример и реализация алгоритма обработки данных:<br /><br />
алг «день рождения»           	' день рождения <br />
<br />
нач                          			cls <br />
<br />
вывод («день рождения»)       	   print «день рождения:» <br />
<br />
чтение пт$, dn, ms, gd         	   read nm$, dn, ins, gd <br />
<br />
вывод nm$; dn; ms; gd          	   print nm$; dn; ms; gd <br />
<br />
кон                          			end <br />
<br />
дано: Саша, 18, 10, 1980       	data «Саша», 18,10,1980<br /><br />
Выполнение <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на компьютере приведет к появлению на экране следующих строк:<br /><br />
день рождения:<br />
<br />
Саша 18 10 1980<br /><br />
Для решения этой задачи для других данных необходимо внести изменения в оператор данных data и вновь запустить программу на выполнение. Пример изменения данных:<br /><br />
дано: Оля, 1, 12, 1974    		data «Оля», 1,12,1974<br /><br />
В традиционных версиях языка Бейсик с нумерацией строк операторы data выделяются в отдельные группы и нумеруются обычно с числа 1000. Это позволяет четко отделить в программах описание данных от операторов их обработки:<br /><br />
алг «дни рождения»              		10 ' дни рождения<br />
<br />
нач                                			20 cls<br />
<br />
вывод («день рождения:»)          		30 print «день рождения:»<br />
<br />
чтение nт$, dn, ms, gd           		40 read nm$, dn, ms, gd<br />
<br />
вывод nm$; dn; ms; gd             		50 print nm$; dn; ms; gd<br />
<br />
кон                              			60 end<br />
<br />
дано: Иванов, Саша, 18,10,1980    		1000 data «Саша», 18,10,1980<br /><br />
При размещении нескольких таблиц или других групп данных в программах на Бейсике полезным средством являются операторы restore (операторы чтения данных с заданного номера или метки):<br />
<br />
1) оператор чтения данных после метки test:<br />
<br />
restore test - чтение данных после метки test;<br />
<br />
2) оператор чтения данных с оператора 1000:<br />
<br />
restore 1000 - чтение данных, начиная с 1000-го оператора;<br />
<br />
3) оператор чтения данных с самого начала:<br />
<br />
restore - чтение данных сначала.<br />
<br />
В задачах обработки данных переработке подвергаются не только числовые данные, но и символьная информация. Для этих целей в программах используются символьные данные, переменные и массивы.<br />
<br />
Символьные данные - это последовательности символов. В текстах программ на Бейсике символьные данные заключаются в двойные кавычки. Примеры: «мама», «корень=», «2 + 1» и т.д. Во входных данных символьные данные записываются в соответствии с входными спецификациями.<br />
<br />
Символьные переменные - это переменные, значениями которых являются символьные данные. В программах на Бейсике символьными явлются те переменные, к имени которых справа приписан знак $. Примеры символьных переменных: s$, p$, sl$, pr$.<br />
<br />
Числовые данные и переменные в языке Бейсик могут быть трех основных типов - целочисленные, вещественные и вещественные двойной точности. В программах для этих типов переменных используются следующие обозначения:<br /><br />
n%, m%, nl%, m3%    		- целочисленные <br />
<br />
х, у, xl, y5           			- вещественные<br />
<br />
 а#, b#, al#, b8#       			- вещественные двойной точности<br /><br />
В качестве примера решения задач обработки данных рассмотрим алгоритм и программу вывода списка дней рождения членов семьи по данным, представленным в следующей таблице:<br /><br />
Дни рождения:<br />
<br />
Мама	26	6	1949<br />
<br />
Папа	22	5	1946<br />
<br />
Сережа	25	10	1973<br />
<br />
Оля	1	12	1974<br /><br />
Для представления данных из этой таблицы в программе воспользуемся следующей последовательностью операторов data:<br /><br />
Дни рождения: <br /><br />
Мама	26	6	1949<br />
<br />
Папа	22	5	1946<br />
<br />
Сережа	25	10	1973<br />
<br />
Оля	1	12	1974<br /><br />
dni: ' дни рождения<br />
<br />
data «мама», 26, 6, 1949<br />
<br />
data «папа», 22,5, 1946<br />
<br />
data «Сережа», 25, 10, 1973<br />
<br />
data «Оля», 1, 12, 1974<br />
<br />
data «», 0, 0, 0<br /><br />
Обратите внимание!<br />
<br />
1. Каждый оператор data здесь отвечает одной строке таблицы.<br />
<br />
2. Последний оператор data содержит пустую «запись» - пустое имя «» и три нуля, означающие конец данных.<br />
<br />
Такая форма представления данных позволяет достаточно просто вносить изменения, исправления и добавления в данные. Эти изменения в таблице переносятся в соответствующие операторы data, а добавление или удаление строк в таблице отображается добавлением или удалением соответствующих операторов в программе.<br />
<br />
Рассмотрим алгоритм и программу вывода списка дней рождения в семье, составленные в соответствии с выбранным представлением данных:<br /><br />
алг «дни рождения»         		' дни рождения <br />
<br />
нач                        			сls <br />
<br />
вывод («дни рождения»)      	   print «дни рождения» <br />
<br />
чтение таблицы dni         	   restore dni <br />
<br />
цикл                       		   do<br />
<br />
чтение (пп, d, т, g)          	      read nn$, d, m, g <br />
<br />
при пп = «» вых             		   if nn$ = «» exit then do<br />
<br />
вывод (пп, d, m, g)            	      print nn$, d, m, g <br />
<br />
кцикл                       		   loop <br />
<br />
кон                         			end<br /><br />
Для формирования и обработки новых групп данных в программах используются массивы. Массив в программе - это область оперативной памяти ЭВМ, используемая для размещения некоторой совокупности данных.<br />
<br />
Использование массивов в программах на Бейсике требует описания их с помощью операторов dim. В операторах dim для каждого массива указывается его имя и размеры. Массивы в программах могут быть одномерными, двумерными, трехмерными и т. д.<br />
<br />
Примеры описаний массивов:<br />
<br />
одномерные массивы из 20 элементов -<br />
<br />
dim nm$(20), d(20), m(20)<br />
<br />
двумерные массивы из 2х10 и 10х10 элементов – <br />
<br />
dim fm$(2,10), tb(10,10)<br />
<br />
Обращения к элементам массивов записываются в зависимости от размерности, указанной в их описаниях. Примеры обращений к одномерным и двумерным массивам:<br /><br />
nm$(4) = «Костя» <br />
<br />
d(4) = 10<br />
<br />
fm$(l,10) = «Петров» <br />
<br />
tb(3,4) = 3*4<br />
<br />
В программах на Бейсике операторы dim являются выполняемыми. Результатом их выполнения является выделение участков памяти для хранения соответствующих массивов. По этой причине в качестве размеров массивов могут указываться переменные, которые должны получить конкретные положительные значения до выполнения оператора dim.<br />
<br />
Описание двумерного массива с переменной n в качестве его размеров:<br /><br />
n = 5          		' n = 5 <br />
<br />
dim tb(n,n) ,   	' массив tb[1:n, 1:n]<br /><br />
В качестве примера использования массивов с переменными размерами приведем алгоритм и программу формирования «Таблицы умножения n&#180;n».<br /><br />
Таблица умножения<br /><br />
1	2	3	4	5<br />
<br />
2	4	6	8	10<br />
<br />
3	6	9	12	15<br />
<br />
4	8	12	16	20<br />
<br />
5	10	15	20	25<br /><br />
В приведенных ниже алгоритме и программе расчета и вывода таблицы умножения для ее размещения используется двумерный массив tb(n, n) c n = 5:<br /><br />
алг «таблица умножения»    		' таблица умножения<br />
<br />
п=5						n=5<br />
<br />
массив tb[1:n, 1:n]			dim tb(n,n)<br />
<br />
нач						сls<br />
<br />
от k = 1 до п цикл			for k = 1 to n<br />
<br />
от 1 = 1 до п цикл			   for l = 1 to п<br />
<br />
tb[k,l]: = k*l				        tb(k,l) = k*l<br />
<br />
вывод tb[k,l]				        print tb(k,l);<br />
<br />
кцикл					    next 1           <br />
<br />
нов_строка				    print<br />
<br />
кцикл					next k<br />
<br />
кон					          end<br /><br />
Запуск этой <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ приведет к получению приведенной выше <A href="http://www.sunhome.ru/image"><font class="normal">картинки</font></A> с таблицей умножения размера 5х5. Для получения таблицы умножения размера 8х8 или 10 х 10 достаточно изменить в программе значение n =5 на n = 8 или n = 10.<br />
<br />
Перечисленных базовых средств достаточно для решения большого числа задач обработки данных: экономических, статистических, инженерных, научных и т.п. Однако при постановке решения задач обработки данных важно четко различать место размещения и виды обрабатываемых данных.<br />
<br />
По способу использования при решении задач различаются следующие данные:<br />
<br />
исходные;<br />
<br />
результирующие.<br />
<br />
Исходные данные - конкретные данные решаемых задач, отвечающие принятой постановке. Исходные данные могут оказаться как допустимыми, так и недопустимыми по постановке решаемых задач.<br />
<br />
Результирующие данные - это результаты решения поставленных задач при введенных исходных данных. Сообщения о невозможности решения задачи также считаются результирующими данными.<br />
<br />
По способу размещения и использования в обрабатывающих алгоритмах и программах данные подразделяются на:<br />
<br />
•	входные;<br />
<br />
•	выходные;<br />
<br />
•	сохраняемые.<br />
<br />
Входные данные - это данные, вводимые в ЭВМ во время работы <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>. Входные данные могут вводиться с клавиатуры, магнитных дисков или с помощью других устройств ввода информации.<br />
<br />
Выходные данные - данные, выводимые ЭВМ как результат работы программ. Выходные данные могут выводиться на экран, на печать, на магнитные диски или другой носитель информации.<br />
<br />
Сохраняемые данные - данные, которые хранятся в долговременной памяти ЭВМ и могут обновляться как результат работы программ. Эти данные могут храниться и многократно обновляться на магнитных дисках в течении длительного промежутка времени.<br />
<br />
В качестве примера рассмотрим задачу поиска номеров телефонов по телефонному справочнику. Исходной информацией в этой задаче является «Телефонный справочник», который можно представить следующей таблицей:<br /><br />
Телефонный справочник<br />
<br />
Вова	125-14-70<br />
<br />
Саша	222-01-02<br />
<br />
Маша	102-99-00<br /><br />
Результирующая информация - номера телефонов и сообщения об отсутствии таких сведений. Информация о результатах поиска информации может выводиться на экран ЭВМ. Диалог с компьютером может проходить по следующему сценарию, в котором отражаются исходные и выходные данные:<br />
<br />
Сценарий:<br />
<br />
поиск номера телефона<br />
<br />
имя = ? <br />
<br />
телефон:  нет такого<br /><br />
Для хранения таблицы «Телефонного справочника» в программе можно воспользоваться следующими операторами data:<br /><br />
tel: 'номера телефонов:<br />
<br />
data  «Вова», «125-14-80» <br />
<br />
data «Саша», «222-01 -02» <br />
<br />
data «Маша», «102-99-00» <br />
<br />
data «», «»<br /><br />
При выбранных представлении данных и сценарии диалога решением могут служить следующие алгоритм и программа:<br /><br />
Алгоритм					Программа<br />
<br />
алг «Телефонный справочник»		' Телефонный справочник<br />
<br />
нач						сls<br />
<br />
вывод («поиск номера телефона»)	    print «поиск номера телефона»<br />
<br />
запрос(«имя=», NN)			    input «имя=», NN$<br />
<br />
чтение-таблицы tel			    restore tel      <br />
<br />
цикл					    do<br />
<br />
чтение (имя, пот)			       read im$, nm$<br />
<br />
если имя = NN то			       if im$ = NN$ then<br />
<br />
вывод («номер:»,пот)		          print «номер:»,nm$<br />
<br />
выход [из цикла]			          exit do<br />
<br />
инес имя = «» то			       elseif im$ = «» then<br />
<br />
вывод («нет такого»)		          print «нет такого»<br />
<br />
выход [из цикла]			          exit do<br />
<br />
все					       end if<br />
<br />
кцикл					   loop<br />
<br />
кон						end<br /><br />
Из приведенного примера видно, что при составлении алгоритмов и программ обработки данных важную роль играют не только сценарии ввода-вывода данных в ЭВМ, но и представление данных. От выбора этих представлений существенно зависят способы доступа к данным и процедуры обработки.<br />
<br />
Однако наиболее важным при составлении алгоритмов и программ обработки данных прежде всего является четкое определение исходных и результирующих данных, а уже затем - подбор представлений входных, выходных и сохраняемых данных на ЭВМ.<br />
<br />
Систематические методы разработки алгоритмов и программ обработки данных состоят в том, что постановка решаемых задач, выбор представлений данных и составление спецификаций диалога проводятся до составления детальных алгоритмов и программ обработки данных.<br />
<br />
Подобный подход к составлению алгоритмов и программ обработки данных позволяет проверять правильность составляемых алгоритмов и программ по отношению к этим спецификациям и обеспечить в них полное устранение ошибок.<br />
<br />
Приведем пример систематического составления алгоритмов и программ обработки данных с использованием спецификаций для решения задачи «Выбор друзей по росту». Допустим, что исходные данные этой задачи представлены следующей таблицей:<br /><br />
фамилия	имя	рост<br />
<br />
Иванов	Саша	180<br />
<br />
Петров	Вова	160<br />
<br />
Сидоров	Миша	190<br /><br />
Примем, что запросы на поиск друзей по росту и результаты поиска будут выводиться на экран по следующему сценарию:<br /><br />
Сценарий «Поиск друзей»<br /><br />
выбор друзей по росту<br />
<br />
мин_рост = ? <br />
<br />
макс_рост = ? <br />
<br />
  нет таких<br /><br />
Для представления данных о друзьях в программе воспользуемся следующими операторами data:<br />
<br />
dan: 'данные о друзьях <br />
<br />
data «Иванов», «Саша», 180 <br />
<br />
data «Петров», «Вова», 160 <br />
<br />
data «Сидоров», «Миша», 190 <br />
<br />
data «», «», 0<br />
<br />
Тогда в качестве решения на ЭВМ поставленной задачи в соответствии с выбранными сценарием и представлением сохраняемых данных, могут быть приняты следующие алгоритм и программа обработки данных.<br /><br />
Алгоритм					Программа<br />
<br />
алг «выбор друзей»				' выбор друзей<br />
<br />
нач						сls<br />
<br />
вывод («выбор друзей по росту»)	   print «выбор друзей по росту»<br />
<br />
запрос («мин_рост =>», min)		   input «мин_рост =>», mn<br />
<br />
запрос («макс_рост = 0.									 <br /><br />
Метод решения								самый легкий:<br />
<br />
Min (V1,.. Vn):								Fam m > <br />
<br />
min = V1<br />
<br />
от k = 1 до п цикл							Представление данных<br />
<br />
если Vk < min то							dan: 'данные учеников:<br />
<br />
min: = Vk								data «Иванов», «Вова», 180,80<br />
<br />
кцикл									data «»,»»,0 ,0<br /><br />
Выбранному сценарию, методу решения и представлению данных соответствуют следующие алгоритм и программа на Бейсике.<br /><br />
Алгоритм							Программа<br />
<br />
алг «самый легкий ученик»					' самый легкий ученик<br />
<br />
нач								cls<br />
<br />
вывод («Данные об учениках»)				   ? «Данные об учениках»<br />
<br />
вывод («фамилия вес»)					   ? «фамилия вес»<br />
<br />
N: = 0							   n = 0<br />
<br />
цикл							   do<br />
<br />
чтение (Fam, r, v)					      read famS, r, v<br />
<br />
при Fam = «» выход					   if fam$ = «» then exit do<br />
<br />
вывод (Fam, v)						     ? fam$, v, r<br />
<br />
N:=N+1							     n = n+1<br />
<br />
если N == 1 или V < Vmin то				     if n=l or v < vmin then<br />
<br />
Vmin: = V						        vmin = v<br />
<br />
Fmin: = Fam						        fmin$ = fam$<br />
<br />
все							      end if<br />
<br />
кцикл							   loop<br />
<br />
вывод («самый легкий:»)				   ? «самый легкий:»<br />
<br />
вывод (Fmin, Vmin)					   ? fmin$, vmin<br />
<br />
кон								end<br /><br />
В общем случае систематический подход к решению задач на ЭВМ требует для проверки правильности алгоритмов и программ не только математической постановки задач, но и обязательного описания выбранных методов решения.<br /><br />
Систематический подход:<br />
<br />
задача   	  ®    	способы<br />
<br />
&#175;                               &#175;<br />
<br />
постановка    ®     методы<br />
<br />
&#175;                               &#175;<br />
<br />
сценарий          ®     алгоритмы<br />
<br />
&#175;                                &#175;<br />
<br />
ЭВМ       	       программа<br /><br />
Рассмотрим пример систематического составления алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> для решения на ЭВМ достаточно сложной задачи обработки данных.<br />
<br />
Четвертая задача: Определить суммы элементов столбцов в матрице Anxm:<br /><br />
Приведем обобщенную постановку задачи и описание соответствующих общего метода решения и сценария диалога.<br />
<br />
Постановка задачи                       				Сценарий<br /><br />
Дано:                            				Матрица &#180;<br />
<br />
(a11 … a1N)                                 			< a11> ... < a1N > <br />
<br />
(... ... ... ) - матрица Anxm                   		     ... ... ...<br />
<br />
(aMl … aMN)                                  			< aMl > … < aMN ><br />
<br />
Треб.:                               				Суммы элементов:<br />
<br />
(S1 ..., SN) - суммы столбцов            		   	 ...  <br />
<br />
Где:                               <br />
<br />
      Si = аi1 + ...+ аiM<br />
<br />
      [i = (1… N)]<br />
<br />
При: N > 0, М > 0.<br /><br />
Метод вычислений				Представление данных<br />
<br />
   sk0 = 0 matr:				' матрица Anm:<br />
<br />
       sk1 = ak1 + sk1-1				data 3, 4<br />
<br />
       [1 = (1 ... M)]				data I, 2, 3, 4<br />
<br />
   Sk = SkN					data 0, 1, 2, 3<br />
<br />
  [k = (1 ... N)]					data 0, 0, 1, 2<br /><br />
В предлагаемой ниже программе для представления матриц используются операторы data. В первом из этих операторов записаны размеры, а в каждом последующем операторе - строки матрицы:<br />
<br />
Алгоритм						Программа<br />
<br />
алг «сумма строк матрицы»			' сумма строк матрицы<br />
<br />
нач							cls<br />
<br />
чтение (п, т) .					   read n, m<br />
<br />
если п > 0 и т > 0 то				   if N > 0 and М > 0 then<br />
<br />
массив А[1:п,1:т]				     dim A (N,M)<br />
<br />
массив S[1:n]					     dim S(n)<br />
<br />
ввод-вывод_матрицы				      gosub vvod 'ввод-матрицы<br />
<br />
суммирование_строк				      gosub sum 'суммирование<br />
<br />
от k = 1 до п цикл				      for k= 1 to n<br />
<br />
выв (s[k])					        ? s[k]<br />
<br />
кцикл						      next k<br />
<br />
все 							   end if<br />
<br />
кон							end<br /><br />
алг «суммирование строк»				sum: 'суммирование строк<br />
<br />
нач							' нач<br />
<br />
от k = 1 до N цикл				    for k = 1 to n<br />
<br />
s[k] := 0						       s[k] = 0<br />
<br />
от l = 1 до М цикл				    for I = 1 to m<br />
<br />
s[k] := s[k] + A[k,l]				       s[k] = s[k] + a[k,l]<br />
<br />
кцикл						    next I<br />
<br />
кцикл						  next k<br />
<br />
кон							return<br /><br />
алг «ввод-вывод_матрицы»			vvod: 'ввод-вывод_матрицы<br />
<br />
нач							' нач<br />
<br />
вывод («Матрица», N, «х», М)			     ? «Матрица»; m; «х»; m<br />
<br />
от k = 1 до N цикл				     for k = 1 to n<br />
<br />
от I = 1 до М цикл				        for l = 1 to m<br />
<br />
чтение (A [k,l])				           read A (k,l)<br />
<br />
вывод (A [k,l])					           ? A (k,l)<br />
<br />
кцикл						        next 1	<br />
<br />
нов_строка					        ?<br />
<br />
кцикл						    next k<br />
<br />
кон							return<br /><br />
В о п р о с ы<br /><br />
1. Что такое постановка задачи?<br />
<br />
2. Что включается в постановку задач?<br />
<br />
3. Что такое способ решения?<br />
<br />
4. Что такое метод решения?<br />
<br />
5. Каков порядок решения новых задач?<br />
<br />
6. Что такое систематическая разработка алгоритмов и программ?<br /><br />
З а д а ч и<br /><br />
1. Приведите постановку задачи, сценарий, алгоритм и программу подсчета сумм:<br />
<br />
а) нечетных чисел;<br />
<br />
б) квадратов целых чисел;<br />
<br />
в) кубов целых чисел.<br />
<br />
2. Приведите постановку задачи, сценарий, алгоритм и программу подсчета сумм:<br />
<br />
а) членов арифметической прогрессии;<br />
<br />
б) членов геометрической прогрессии.<br />
<br />
3. Для последовательности чисел х1, х2 ..., хN приведите постановку задачи, составьте сценарий, алгоритм решения и программу:<br />
<br />
а) подсчета суммы всех чисел;<br />
<br />
б) вычисления среднего арифметического чисел;<br />
<br />
в) определения наибольшего из чисел;<br />
<br />
г) определения наименьшего из чисел.<br />
<br />
4. Для данных об учениках, содержащих сведения об их росте и весе, приведите постановку задачи, составьте сценарий, алгоритм и программу определения:<br />
<br />
а) самого высокого ученика;   		г) самого легкого ученика;<br />
<br />
б) самого низкого ученика;    		д) средний рост учеников;<br />
<br />
в) самого тяжелого ученика;   		е) средний вес учеников.<br />
<br />
5. Для данных о днях рождения своих друзей и родных приведите постановку задачи, составьте сценарий, алгоритм решения и программу:<br />
<br />
а) определения ровесников;<br />
<br />
б) определения людей, родившихся в один день;<br />
<br />
в) самого молодого из своих друзей и родных;<br />
<br />
г) самого старшего из своих родных и друзей.<br /><br />
5.2. Анализ правильности алгоритмов<br /><br />
На практике часто приходится встречаться с программами, содержащими ошибки. Например, в самой последней операционной системе Windows специалистами обнаружено много ошибок, которые время от времени выявляются на ЭВМ.<br />[/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k]
<br />
Программа содержит ошибки, если ее выполнение на ЭВМ приводит к получению сбоев, отказов или неправильных результатов. Программу в таком состоянии нельзя использовать для решения практических задач.<br />
<br />
Проявления ошибок:<br />
<br />
Программа<br />
<br />
&#175;<br />
<br />
данные  ® ЭВМ  ® { отказ | сбой | ошибка }<br /><br />
Отказ - это ситуация, когда выполнение <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> прекращается вообще. <A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A>, содержащие такого рода ошибки считаются неработоспособными, и от их использования следует отказываться.<br />
<br />
Сбой - это потеря части данных либо получение непредусмотренных данных. Такого рода ошибки говорят о их частичной неработоспособности программ либо об их недостаточной надежности.<br />
<br />
Результат неправильный, если он не соответствует требованиям, предъявляемым к работе программ. <A href="http://www.sunhome.ru/download"><font class="normal">Программы</font></A>, содержащие такие ошибки, считаются работоспособными, но их применение может приводить к получению ошибочных результатов.<br /><br />
Оценка программ:<br /><br />
Задача<br /><br />
исходное   требуемое<br /><br />
данные  ® программа  ® результаты<br /><br />
О правильности программ нельзя утверждать ничего если неизвестны предъявляемые к ним требования. Только при наличии строгих, четких спецификаций можно судить о правильности работы программ.<br />
<br />
В качестве примера рассмотрим решение квадратного уравнения:<br />
<br />
х2 + 3&#215;х + 2 = 0.<br />
<br />
Исходные данные - коэффициенты – а = 1, b = 3, с = 2. Требуемые результаты - пара чисел х1 и x2, являющихся корнями уравнения. Посмотрим, будут ли корнями уравнения пары чисел:<br />
<br />
а) х1 = 2, x2 = 3;       б) x1 = -2, x2 = -3.<br />
<br />
Решением уравнений являются числа, подстановка которых превращает уравнение в тождество. В первом случае подстановка чисел х1 = 2, х2 = 3 в уравнение дает:<br />
<br />
22 + 3&#215;2 + 2 = 12 &#185; 0  - неправильно,<br />
<br />
32 +3&#215;3+2 = 20  &#185; 0  - неправильно.<br />
<br />
Следовательно, числа х1 = 2, х2 = 3 не являются правильными результатами.<br />
<br />
Подстановка в уравнение чисел х1 = -2, х2 = -3:<br />
<br />
(-2)2 + 3&#215;(-2) +2 = 0- правильно;<br />
<br />
(-3)2 + 3&#215;(-3) +2 = 0- правильно.<br />
<br />
Следовательно, числа х1 = -2, х2= -3 являются правильными результатами.<br />
<br />
Приведем формальную постановку задачи решения квадратных уравнений.<br />
<br />
Постановка задачи <br />
[/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k]<br />
Решение квадратного уравнения<br />
<br />
а&#215;х2 + b&#215;x + с = 0.<br />
<br />
Дано:	a, b, с - коэффициенты.<br />
<br />
Треб.:	х1, х2 - корни.<br />
<br />
Где:	а&#215;х12 + b&#215;х1 + с = 0.<br />
<br />
	а&#215;х22 + b&#215;х2 + с = 0. <br />
<br />
При:	а &#185; 0.<br />
<br />
Наличие точной постановки задач позволяет говорить о правильности не только конечных результатов, но и различных способов и методов их решения.<br />
<br />
Способ правильный, если он дает правильные результаты. Способ неправильный, если он дает неправильные результаты или не дает результатов вообще.<br />
<br />
Метод неправильный, если существуют допустимые данные, для которых он дает неправильные результаты либо не дает результатов вообще.<br />
<br />
Метод правильный, если он дает правильные результаты для любой задачи данного класса. Использование правильных методов служит основой для составления алгоритмов и программ, не содержащих ошибок.<br />
<br />
В рассматриваемом примере решения квадратных уравнений общим методом является вычисление корней с помощью дискриминанта.<br />
<br />
Метод решения<br />
<br />
    x1 = (-b +  )/(2&#215;а),<br />
<br />
    x2 = (-b -  )/(2&#215;a), <br />
<br />
где<br />
<br />
{ D = b2 - 4&#215;а&#215;с.<br />
<br />
Правильность общих методов проверяется подстановкой расчетных формул в исходное уравнение. Получение тождеств в результате подстановок говорит о правильности выбранных расчетных формул.<br />
<br />
Для первого корня х1 = (-b +  )/(2&#215;a) подстановка и тождественные преобразования формул дадут:<br />
<br />
а&#215;х12 + b&#215;х1 + с = а&#215;[(-b + )/(2&#215;а)]2 + b&#215; (-b + )/(2&#215;a) + с = <br />
<br />
= (-b +  )2/(4&#215;а) + b&#215; (-b + )/(2&#215;a) + с = (b + ) &#215; (-b + )/(4&#215;а) + с =<br />
<br />
= (-b2 + D)/(4&#215;a) + с = (-b2 + b2 - 4&#215;а&#215;с)/(4&#215;а) + с = -4&#215;а&#215;с/(4&#215;а) + с = 0.<br />
<br />
Аналогичные результаты получаются и при подстановке формулы второго корня <br />
<br />
х2 = (-b -  )/(2&#215;a). После выполнения аналогичных преобразований будет получено такое же тождество. И на основании этих проверок можно сделать заключение, что рассмотренный метод дает правильные результаты для любык допустимых данных.<br />
<br />
Однако саму постановку задачи необходимо дополнить условием: b2 - 4&#215;а&#215;с &#179; 0. При нарушении этого условия не только уравнение не имеет решений, но и метод решения также не дает результатов из-за необходимости вычисления корней от отрицательного дискриминанта: D < 0.<br />
<br />
В силу выбранного метода решения и принятой постановки алгоритм решения квадратных уравнений приобретает следующий вид:<br /><br />
алг «квадратное уравнение»  		 Результаты вычислений<br />
<br />
нач<br />
<br />
если а &#185; О то              			при а &#185; 0<br />
<br />
D: = b*b - 4*а*с            			D = b2 - 4&#215;а&#215;с<br />
<br />
если D > = 0 то            			     при D >= 0<br />
<br />
х1: = (-b + )/(2*a)      		     х1 = (-b +  )/(2&#215;a)<br />
<br />
х2: = (-b -  )/(2*a)      		     х2 = (-b -  )/(2&#215;a)<br />
<br />
 все<br />
<br />
инеc а = 0 то               			при а = 0 <br />
<br />
если b &#185; 0                  			       при b &#185; 0<br />
<br />
х 1: = -c/b                			       xl = -c/b <br />
<br />
все <br />
<br />
кон<br /><br />
Результаты выполнения алгоритма приведены справа. Можно заметить, что результаты выполнения совпадают с описанием выбранного метода решения с помощью дискриминанта. Это позволяет утверждать, что алгоритм - правильный.<br />
<br />
Алгоритм содержит ошибки, если можно указать допустимые исходные данные, при которых либо будут получены неправильные результаты, либо результаты не будут получены вовсе. Использование алгоритмов, содержащих ошибки, приводит к созданию программ, также содержащих ошибки. <br />
<br />
Алгоритм считается правильным, если он дает правильные результаты для любых допустимых исходных данных. Правильность алгоритмов решения прикладных задач и наличие в них ошибок можно проверять двумя основными способами.<br />
<br />
Первый способ - проверка основных этапов построения алгоритма:<br />
<br />
задача ® постановка ® метод ® алгоритм<br />
<br />
Второй способ - анализ результатов выполнения алгоритмов и их сравнение с выбранными методами решения и постановкой задачи:<br />
<br />
задача  постановка  метод  алгоритм<br />
<br />
Приведем пример построения алгоритма с одновременным анализом его правильности.<br />
<br />
Задача: Определить периметр треугольника, заданного на плоскости координатами вершин.<br />
<br />
XС,УС<br /><br />
XА,УА		 	Xв,Ув<br /><br />
Постановка задачи<br />
<br />
Определение периметра треугольника, заданного на плоскости.<br />
<br />
Дано:  А = (ХА, УА) <br />
<br />
В = (ХВ, УВ)     - координаты вершин треугольника<br />
<br />
С = (XС,УС)  <br />
<br />
Треб.: Р - периметр<br />
<br />
Метод решения <br />
<br />
    Р = LАВ +LВС+LСА<br />
<br />
    LАВ =  <br />
<br />
    LВС =  <br />
<br />
    LСА =   <br />
<br />
Где: Р = L(A,B) + L(B,C) + L(C,A);<br />
<br />
здесь L[(x,y),(u,v)] =   .<br /><br />
Приведем алгоритм, полученный из описания метода упорядочением операций вычисления длин сторон треугольника с завершающим вычислением периметра. Результаты выполнения алгоритма приведены справа.<br />
<br />
алг «периметр треугольника» <br />
<br />
нач<br />
<br />
LAB: =                 <br />
<br />
LBC : =  <br />
<br />
LCA : =  <br />
<br />
Р := LAB + LBC + LCA <br />
<br />
кон<br /><br />
Результаты<br /><br />
Р = LAB + LBC + LCA<br />
<br />
Сравнение результатов выполнения алгоритма с описанием метода решения показывает, что это одна и та же система формул, что подтверждает правильность алгоритма.<br />
<br />
Систематические методы анализа правильности алгоритмов и программ опираются на сопоставление тех же самых описаний, которые используются при их систематическом составлении.<br />
<br />
Анализ правильности:<br />
<br />
задача  	    способ<br />
<br />
&#175;                              &#175;<br />
<br />
постановка 	  методы<br />
<br />
&#175;                              &#175;<br />
<br />
сценарий       алгоритмы<br />
<br />
&#175;                              &#175;<br />
<br />
ЭВМ      ®       программа<br /><br />
Основные типы алгоритмических ошибок в программах:<br />[/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k]
<br />
•	ошибки в выбранных методах решения;<br />
<br />
•	ошибки в постановке решаемых задач;<br />
<br />
•	 дефекты в сценариях диалога с ЭВМ;<br />
<br />
•	 ошибки организации ввода данных;<br />
<br />
•	 неправильная реализация методов решения.<br />
<br />
Исчерпывающий анализ правильности алгоритмов и устранение из программ ошибок всех перечисленных типов возможны только при наличии соответствующих спецификаций: постановок задач, описаний методов решения и спецификаций ввода-вывода данных.<br />
<br />
Будем считать, что программа правильная, если она дает правильные результаты для любых допустимых исходных данных. Такого рода <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> вполне можно использовать для решения прикладных задач.<br />
<br />
Программа считается надежной, если она не дает сбоев и отказов ни при каких исходных данных. Надежность - обязательное условие для всех программ, которые используются людьми для решения практических задач на ЭВМ.<br />
<br />
В качестве иллюстрации приведем пример систематического составления алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> задачи определения суммарного веса учеников по данным из таблицы:<br /><br />
фамилия    		рост    		вес<br />
<br />
Иванов	185	85<br />
<br />
Петрова	165	65<br />
<br />
Сидоров	170	80<br /><br />
Рассмотрим постановку задачи и метод вычисления суммарного веса.<br />
<br />
Постановка задачи<br />
<br />
Определение суммарного веса. <br />
<br />
Дано:                                 				Метод вычисления<br />
<br />
(D1,.., DN) - данные об учениках, 			S0 = 0 <br />
<br />
где D = [Fam,R,V] - состав данных,       		  Sk = Sk-1 + vk <br />
<br />
Fam - фамилия, R - рост, V - вес.       		  [k = (1 ... N)] <br />
<br />
Треб.: Vsum - суммарный вес.             		Vsum = SN <br />
<br />
Vsum = v1 + v2 + ... + vN <br />
<br />
При: N > 0.<br /><br />
Правильность метода вычислений можно доказать по индукции. Рассмотрим результаты вычислений на 1-м, 2-м и k-м шагах. Отметим, что начальное значение S0 = 0.<br />
<br />
На первом шаге при k = 1 результат вычисления<br />
<br />
S1 = S0 +v1 = v1 <br />
<br />
На следующем втором шаге при k = 2 результат<br />
<br />
S2 = S1 + v2  = v1 + v2. <br />
<br />
На третьем шаге при k = 3 результат<br />
<br />
S3= S2 + v3 = v1 + v2 + v3.<br />
<br />
В общем случае можно предположить, что к k-му шагу результат вычисления<br />
<br />
Sk-1=v1+...+vk-1.<br />
<br />
Тогда результат вычислений после k-го шага (исходя из описания метода)<br />
<br />
Sk = Sk-1 +vk = v1 + … + vk-1 + vk.<br />
<br />
В силу принципа математической индукции утверждение верно для всех k = 1, 2,.... N. Следовательно, на последнем шаге при k = N конечный результат:<br />
<br />
SN = v1 + ... + vN.<br />
<br />
Что и требовалось. Следовательно, метод правильный.<br /><br />
Приведем сценарий диалога решения поставленной задачи на ЭВМ. Для представления данных в программе примем последовательность операторов data.<br />
<br />
Сценарий                 				Представление данных<br /><br />
Данные об учениках <br />
<br />
фамилия   вес    рост<br />
<br />
dano:'данные учеников <br />
<br />
                			data «Иванов», 185, 85<br />
<br />
…  …  …					data «Петрова», 165, 65 <br />
<br />
               			data «Сидоров», 170, 80<br />
<br />
           								data «», 0, 0<br />
[/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k]<br />
суммарный вес =  <br /><br />
Алгоритм обработки данных и программа, соответствующие выбранному сценарию и методу вычисления:<br /><br />
Алгоритм						Программа<br />
<br />
алг «суммарный вес»				' суммарный вес<br />
<br />
нач							cls<br />
<br />
вывод («Данные об учениках»)			   ? «Данные об учениках»<br />
<br />
вывод («фамилия вес рост»)			   ? «фамилия вес рост»<br />
<br />
s := 0						   s = 0<br />
<br />
цикл						   do<br />
<br />
чтение famS, r, v				      read fam$, r, v<br />
<br />
при fam$=«» выход				   if fam$=«» then exit do<br />
<br />
вывод (fam$, v, r)				     ? fam$; v; r<br />
<br />
s := s + v					      s = s + v<br />
<br />
кцикл						   loop<br />
<br />
vsum = s						   vsum = s<br />
<br />
вывод («суммарный вec=»,vsum)		   ? «суммарный вес=»; vsum<br />
<br />
кон							end<br /><br />
Правильность приведенного алгоритма можно увидеть из описания результатов его выполнения.<br />
<br />
Алгоритм						Результаты выполнения<br />
<br />
алг «суммарный вес»				на экране и в памяти ЭВМ <br />
<br />
нач<br />
<br />
вывод («Данные об учениках»)			Данные об учениках<br />
<br />
вывод («фамилия вес рост»)			фамилия вес рост<br />
<br />
s: = 0						  S0 = 0 <br />
<br />
цикл<br />
<br />
чтение fam$, r, v <br />
<br />
при fam$=«» выход<br />
<br />
вывод (fam$, v, r)			               <br />
<br />
 s: = s + v				              sk = sk-1 + vk<br />
<br />
кцикл						  [k = (1...n)]<br />
<br />
vsum = s						  vsum = sn<br />
<br />
  вывод («суммарный вec=»,vsum)			суммарный вес=  <br />
<br />
кон<br /><br />
Сопоставление описания результатов выполнения с описаниями сценария и выбранного метода говорит об их полном соответствии. Следовательно, составленные алгоритм и программа правильные.<br /><br />
В о п р о с ы<br /><br />
1. Когда <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> содержат ошибки?          <br />
<br />
2. Что такое правильный способ решения?<br />
<br />
3. Когда способ решения неправильный?<br />
<br />
4. Что такое правильный метод решения?<br />
<br />
5. Когда метод решения неправильный?<br />
<br />
6. Что такое правильный алгоритм?<br />
<br />
7. Когда алгоритм содержит ошибки?<br />
<br />
8. Каковы основные типы ошибок в программах?<br /><br />
З а д а ч и<br /><br />
1. Приведите постановку задачи, сценарий, алгоритм и программу решения линейного уравнения а&#215;х + b = 0, с помощью формулы х = -b/а (при а &#185; 0).<br />
<br />
2. Приведите постановку задачи, сценарий, алгоритм и программу решения квадратного уравнения а&#215;х2 + b&#215;x + с = 0 с помощью формулы дискриминанта.<br />
<br />
3. Приведите постановку задачи, сценарий, алгоритм и программу решения системы из двух уравнений с двумя неизвестными:<br />
<br />
 а&#215;х + Ь&#215;у = е, <br />
<br />
 с&#215;х + d&#215;y = f.<br />
<br />
Примените для этой задачи вычисление корней с помощью определителей:<br />
<br />
 х = Dx/D, <br />
<br />
 y = Dy/D. <br />
<br />
Определители D, Dx и Dy вычисляются по формулам:<br />
<br />
 D = a&#215;d - b&#215;c, <br />
<br />
 Dx = e&#215;d - f&#215;b, <br />
<br />
 Dy = a&#215;f - c&#215;e.<br />
<br />
4. Приведите постановку, сценарии, алгоритм и программу решения следующих задач:<br />
<br />
а) определение площади треугольника по длине сторон а, Ь, с по формуле Герона:<br /><br />
S =  , <br />
<br />
р = (а + b + с)/2.<br />
<br />
б) определение площади треугольника, заданного на плоскости координатами своих вершин: (х1, у1), (х2, у2), (х3, у3); для вычисления длин сторон треугольника воспользуйтесь формулой определения длин отрезков на плоскости, задаваемых координатами концов:<br />
<br />
l =  <br />
<br />
5. Приведите постановку, метод, сценарий, алгоритм и программу решения следующих задач:<br />
<br />
а) определение времени встречи пешеходов, двигающихся навстречу друг другу;<br />
<br />
б) определение времени, которое требуется пешеходу, чтобы догнать другого пешехода;<br />
<br />
в) определение времени движения парохода по течению и против течения реки;<br />
<br />
г) определение времени движения пешеходов навстречу друг другу, если один из них движется с замедлением;<br />
<br />
д) определение времени падения тела с заданной высоты;<br />
<br />
е) определение времени полета тела, брошенного вверх;<br />
<br />
ж) определение расстояния, на которое улетит мяч, брошенный под углом к горизонту.<br />
<br />
6. Дана прямоугольная матрица АNM - прямоугольная числовая таблица размера N &#180; М. Приведите постановку, метод решения, сценарий, алгоритм и программу для решения следующих задач:<br />
<br />
а) подсчет сумм элементов матрицы по столбцам,<br />
<br />
б) подсчет сумм элементов матрицы по строкам,<br />
<br />
в) нахождение минимального значения в каждом столбце,<br />
<br />
г) нахождение минимального значения в каждой строке,<br />
<br />
д) нахождение максимального значения в каждом столбце, <br />
<br />
е) нахождение максимального значения в каждой строке, <br />
<br />
ж) нахождение наибольшего из минимальных значений в столбцах, <br />
<br />
з) нахождение наименьшего из максимальных значений в строках. <br /><br />
5.3. Решение прикладных задач<br /><br />
Решение задач на ЭВМ является одним из основных источников для создания алгоритмов и программ. Экономические задачи и проблемы обработки данных - один из важнейших классов прикладных задач, решаемых на ЭВМ.<br />
<br />
Применение компьютеров для решения экономических задач существенно упрощает работу по подготовке и обработке данных. Одной из причин в использовании ЭВМ для решения этих задач - снижение трудоемкости и уменьшение числа ошибок при обработке данных.<br />[/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k]
<br />
Для решения многих экономических задач на ЭВМ используются электронные таблицы и специальные пакеты программ. Однако решение любых новых прикладных задач на ЭВМ предполагает необходимость создания новых алгоритмов и программ на основе определенных математических методов решения и обработки данных.<br />
<br />
Особое значение правильность алгоритмов имеет для экономических задач, поскольку ошибки в их решении могут дорого стоить. Неправильные экономические расчеты могут нанести материальный ущерб или даже привести к банкротству целую организацию.<br />
<br />
Для предотвращения ошибок можно использовать систематические методы конструирования алгоритмов и программ с одновременным анализом их правильности. Последовательное применение этих методов обеспечивает составление прикладных алгоритмов и программ с гарантиями их правильности.<br />
<br />
Общий принцип систематического подхода к составлению алгоритмов и программ заключается в последовательной разработке спецификаций: постановок задач, способов и методов их решения, а также сценариев работы в процессе решения задач.<br /><br />
Составление программ<br />
<br />
задача          ®    способы<br />
<br />
&#175;                         &#175;<br />
<br />
постановка ®   методы<br />
<br />
&#175;                          &#175;<br />
<br />
сценарий         ®   алгоритмы<br />
<br />
&#175;                          &#175;<br />
<br />
         ЭВМ          <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A><br /><br />
Систематический анализ правильности алгоритмов и программ сводится к сопоставлению этих спецификаций друг с другом: программ - с алгоритмами, алгоритмов - со сценариями и описаниями методов, а методы решения - с постановками задач.<br /><br />
Анализ правильности<br />
<br />
задача			способ<br />
<br />
­                                  ­<br />
<br />
постановка		методы<br />
<br />
­                                  ­<br />
<br />
сценарий		алгоритмы<br />
<br />
­                                  ­<br />
<br />
ЭВМ		®	<A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A><br /><br />
Приведем примеры систематической разработки алгоритмов и программ решения экономических задач на ЭВМ с обоснованием их правильности. Главной особенностью этих задач является то, что все они относятся к задачам обработки данных.<br />
<br />
Первый пример экономической задачи - определение средней зарплаты в организации. Допустим, что данные о зарплате представлены таблицей:<br /><br />
фамилия   	должность   	зарплата<br />
<br />
Иванов	директор	300000<br />
<br />
Петров	менеджер	240000<br />
<br />
Сидорова	секретарь	120000<br /><br />
Приведем постановку задачи и описание метода вычисления средней зарплаты.<br />
<br />
Постановка задачи                    			Метод расчета<br />
<br />
Определение средней зарплаты. <br />
<br />
Дано:<br />
<br />
(D1, ..., DN) - данные о сотрудниках,<br />
<br />
где D = [Fam, Т, Z] - состав данных,<br />
<br />
Fam - фамилия, D1- должность,        		  S0 = 0<br />
<br />
Z - зарплата.                             			     Sk = Sk-1*(k-l )/k + Zk/k<br />
<br />
Треб: Zcpeдн - средняя зарплата.        		     [k=(l...N)]<br />
<br />
Где: Zcpeдн = (Z1 + Z2 + ... + ZN)/N.    		  Zcpeдн = SN<br />
<br />
При: N > 0.<br /><br />
Прежде всего убедимся, что выбранный метод вычисления правилен. Для этого воспользуемся индукцией. Рассмотрим результаты вычислений на первых трех шагах.<br />
<br />
При k = 1 результат<br />
<br />
S1=S0(1 - 1)/1 +Z1/1 =Z1/1.<br />
<br />
При k = 2 результат<br />
<br />
S2 = S1(2 - 1)/2 + Z2/2 = Z1/2 + Z2/2. <br />
<br />
При k = 3 результат<br />
<br />
 S3 = S2(3 - 1)/3 + Z3/3 = (Z1 + Z2)/3 + Z3/3.<br />
<br />
По этим трем результатам можно утверждать, что в общем случае результатом k-го шага вычислений будет<br />
<br />
Sk = (Z1 + ... + Zk-1)/k.<br />
<br />
Справедливость этого утверждения можно доказать по индукции. Допустим, что оно справедливо для (k-l)-ro шага:<br />
<br />
Sk-1 = (Z1 + ... + Zk-1)/(k-l).<br />
<br />
Тогда из описания метода вычислений очередное k-e значение будет равно<br />
[/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k]<br />
Sk = Sk-1(k-l)/k + Zk/k =<br />
<br />
= (Z1 + ... + Zk-1)/(k-l)&#215;(k-l)/k + Zk/k =  (Z1 + ... + Zk-1)/k + Zk/k.<br />
<br />
Что и требовалось показать. Следовательно, в силу математической индукции это утверждение справедливо для всех k = 1, 2,..., N. В частности, для последнего шага вычислений при k = N конечным результатом будет<br />
<br />
SN = (Z1 + ... + ZN-1)/N + ZN/N =  (Z1 + ... + ZN)/N.<br />
<br />
Таким образом, выбранный метод дает правильный результат для любой последовательности величин Z1, Z2, ..., ZN.<br />
<br />
Для конструирования алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> решения задачи на ЭВМ примем следующий сценарий, а для представления данных воспользуемся операторами data.<br /><br />
Сценарий					Представление данных<br />
<br />
список сотрудников:			dan: 'данные сотрудников<br />
<br />
{  }*		data «Иванов»,«директор», 300000<br />
<br />
{...................}					data «Петров»,«менеджер», 240000<br />
<br />
средняя з/плата= 			data «Сидорова»,«секретарь», 120000<br />
<br />
						data «», «», 0<br /><br />
При выбранных сценарии,	методе расчета и представлении данных систематическое конструирование приводит к следующим алгоритму и программе.<br />
<br />
Алгоритм					Программа<br />
<br />
алг «средняя зарплата»			' средняя зарплата<br />
<br />
нач						cls<br />
<br />
вывод («список сотрудников:»)		   ? «список сотрудников:»<br />
<br />
s := 0: k := 0				   s = 0: k = 0<br />
<br />
цикл					   do<br />
<br />
чтение (fam$, dl$, zpl)		       read fam$, dl$, zpl<br />
<br />
при fam$ = «» выход			   if fam$ = «» then exit do<br />
<br />
вывод (fam$, dl$, z)			      ? fam$; dl$; z<br />
<br />
k := k + 1				      k = k + 1<br />
<br />
s := s*(k - 1)/k + z/k			      s = s*(k - 1)/k + z/k<br />
<br />
кцикл					   loop<br />
<br />
zsr = s					   zsr = s <br />
<br />
вывод («средняя 3/nлama=»,zsr) 	   ? «средняя з/плата=»; zsr<br />
<br />
кон						end<br /><br />
Для полного обоснования отсутствия ошибок в приведенном алгоритме и программе приведем описание результатов их выполнения на ЭВМ.<br />
<br />
Алгоритм					Результаты выполнения<br />
<br />
алг «средняя зарплата» <br />
<br />
нач<br />
<br />
вывод («список сотрудников:»)		список сотрудников:<br />
<br />
s := 0: k := 0				S0 = 0 [ k = 0 ]<br />
<br />
цикл<br />
<br />
 чтение (fam$, dl$, z)<br />
<br />
при fam$ = «» выход<br />
<br />
вывод (fam$, dl$, z)			   }*<br />
<br />
k:=k + 1					    [ k= (1...N) ]<br />
<br />
s := s*(k - 1)/k + z/k			    sk = sk - 1&#215;(k - 1)/k + zk/k<br />
<br />
кцикл<br />
<br />
zsr = s					    zsr = sN<br />
<br />
вывод («средняя з/nлama=»,zsr) 	средняя з/плата=  <br />
<br />
кон<br /><br />
Сравнение результатов выполнения <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> с описанием метода вычисления и выбранного сценария подтверждает их соответствие друг другу и как следствие правильности выбранного метода вычислений - правильность составленных алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> расчета средней зарплаты.<br />
<br />
В качестве второго примера рассмотрим решение типичной задачи подсчета суммарной стоимости товаров с выделением товаров наибольшей стоимости. Допустим, что исходные данные представлены следующей таблицей:   <br /><br />
товар    	           цена  	        кол-во<br />
<br />
яблоки	8000	3<br />
<br />
бананы	4000	2<br />
<br />
арбузы	1000	20<br /><br />
Приведем постановку задачи и описание способа ее решения.<br /><br />
Постановка задачи                   			Способ решения<br />
<br />
Определение суммарной <br />
<br />
и максимальной стоимости товаров.<br />
<br />
Дано:<br />
<br />
(D1, ..., DN) - данные о товарах,<br />
<br />
где D = [Tov, C, M] - состав данных,     		s0 = 0<br />
<br />
Tov - товар, С - цена товара,          			от k = 1 до N цикл<br />
<br />
М - количество товара,                			sk = sk-1 + СkМk<br />
<br />
Треб:                                 				если k = 1 то<br />
<br />
Sum - суммарная стоимость товаров,      		mах1 = С11М11<br />
<br />
TovMax - товар максимальной          		инеc СkМk > mахk-1 то<br />
<br />
стоимости.<br />
<br />
Где:                                    				mахk = СkМk<br />
<br />
Sum = C1M1 + С2М2 + ... + СNМN,      		все<br />
<br />
TovMax: C&#215;M = Мах(С1М1, ... ,СNМN).   		кцикл<br />
<br />
При: N > 0.<br />
<br />
Прежде чем приступить к составлению алгоритмов и программ, убедимся в правильности выбранного способа решения. Для этого проверим результаты на первых шагах, в середине и в конце вычислений. На первом шаге при k = 1 результат<br />
<br />
s1 = s0 + С1М1 = С1M1,<br />
<br />
max1 = С1М1.<br />
<br />
На втором шаге вычислений будут получены следующие значения:<br />
<br />
s2 = s1 + С2М2 = C1M1 + С2М2,<br />[/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k]
<br />
max2 =    С2М2, при С2М2 > max1  	= Мах(mах1, С2М2), <br />
<br />
    max1, при С2М2 &#163; max1 	= Мах(mах1, С2М2).<br />
<br />
На третьем и последующих шагах в общем случае будут получаться результаты:<br />
<br />
sk = sk-1 + CkMk = C1M1 + … + CkMk,<br />
<br />
maxk = Max(maxk-1, СkМk) = Мах(С1М1, ..., СkМk).<br />
<br />
Для доказательства этих утверждений необходимо предположить, что они выполняются для случая k-1:<br />
<br />
sk-1 =C1M1 +...+ Ck-1Mk-1, <br />
<br />
maxk-1 =  Max (C1M1, …,Ck-1Mk-1), <br />
<br />
и подставить эти выражения в соотношения для sk и mахk:<br />
<br />
sk = sk-1 + CkMk = C1M1 + … Ck-1Mk-1 + CkMk,<br />
<br />
maxk = Max(maxk-1, СkМk) = Мах(С1М1, ..., СkМk).<br />
<br />
В силу математической индукции эти утверждения верны для всех k = 1, 2, ..., N. Поэтому на последнем шаге вычислений при k = N будут получены окончательные результаты:<br />
<br />
sN = sN-1 + CNMN = C1M1 + … + CNMN,<br />
<br />
maxN = Max(maxN-1, СNМN) = Max(C1M1, ... , СNМN).<br />
<br />
Что и требовалось в постановке задачи. Следовательно, выбранный способ решения поставленной задачи правилен и на его основе можно приступать к составлению соответствующих алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>. <br />
<br />
Для систематичности разработки примем следующий сценарий диалога и представление исходных данных в операторах data.<br /><br />
Сценарий					Представление данных<br /><br />
список товаров <br />
<br />
товар      цена       кол-во<br />
<br />
       *				dan: 'сведения о товарах<br />
<br />
… .... ... 					data яблоки, 8000, 3<br />
<br />
   сумма = 					data бананы, 4000, 2<br />
<br />
Максимум					data арбузы, 1000, 20<br />
<br />
   					data «», 0, 0<br /><br />
Приведем алгоритм и программу решения поставленной задачи в соответствии с выбранным сценарием и представлением данных.<br />
<br />
Алгоритм 						Программа<br />
<br />
алг «сумма и максимум»				' сумма и максимум<br />
<br />
нач							сls<br />
<br />
вывод («список товаров»)				? «список товаров»<br />
<br />
вывод («товар цена кол-во»)			? «товар цена кол-во»<br />
<br />
s := 0; k = 0						s = 0: k = 0<br />
<br />
цикл							do<br />
<br />
чтение (тов, с, т)				    read tv$, с, m<br />
<br />
при тов = «» выход					if tv$ = «» then exit do<br />
<br />
k := k + 1						    k = k + 1<br />
<br />
вывод (тов, с, т)					    ? fv$; с; m<br />
<br />
s :=s + cm						    s= s + c(m<br />
<br />
если k = 1 то					    if k = 1 then<br />
<br />
max := c&#215;m					      max = c&#215;m<br />
<br />
ToвMax := тов					      ТМ$ = tv$<br />
<br />
инес c(m > max то				       elseif c(m > max then<br />
<br />
max := c&#215;m					          max = c&#215;m<br />
<br />
ToвMax := тов				         TM = tv$<br />
<br />
кесли						       end if<br />
<br />
кцикл						    loop<br />
<br />
вывод («cyммa=»,s)				    ? «cyммa=»,s<br />
<br />
вывод («Максимум»)				    ? «Максимум»<br />
<br />
вывод (ToвMax, max)				    ? TM$, max<br />
<br />
кон							end<br /><br />
Сравнение результатов выполнения представленных алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> с описанием выбранного способа решения показывает их полное соответствие друг другу.<br /><br />
Алгоритм					Результаты выполнения<br />
<br />
алг «сумма и максимум»<br />
<br />
нач<br />
<br />
вывод («список товаров»)			список товаров<br />
<br />
вывод («товар цена кол-во»)      		товар цена кол-во<br />
<br />
s :=0; k = 0					 s0 =0 [k = 0]<br />
<br />
цикл <br />
<br />
чтение (тов, с, т)<br />
<br />
при тов = «» выход<br />
<br />
k:=k+1					[k= 1,2,...,N]<br />
<br />
вывод (тов, с, т)				{    }*<br />
<br />
s := s + с&#215;т					sk = sk-1 + ck&#215;mk<br />
<br />
если k =1 то				при k = 1<br />
<br />
тах := c&#215;m				max1 = c1&#215;m1,<br />
<br />
ТовМах := тов				ToвMaх1 = тов1<br />
<br />
uнес c&#215;m > тах то			при сk&#215;mk > mах<br />
<br />
тах := с&#215;т				mахk = сk&#215;mk<br />
<br />
ТовМах := тов				ТовМахk = товk <br />
<br />
кесли <br />
<br />
кцикл<br />
<br />
вывод («сумма=», s)			cуммa = <br />
<br />
вывод («Максимум»)			Максимум<br />
<br />
вывод (ТовМах, тах)			 <br />
<br />
кон<br /><br />
Из расмотренных примеров следует, что правильность алгоритмов и программ зависит прежде всего от правильности выбранных методов решения. Составление соответствующих им алгоритмов и программ сводится к решению технических проблем.<br />
<br />
Можно утверждать, что правильные алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> - это корректная реализация правильных методов решения. Ошибки в выбранных методах решения носят не алгоритмический, а принципиальный характер и их следует искать не с помощью отладки программ на ЭВМ, а исследованием самих методов.<br />
<br />
Рассмотрим самую популярную экономическую задачу - расчет семейного бюджета в целях анализа достатка семьи. Напомним, что достаток семьи - это остаток от разности доходов и расходов:<br />
<br />
достаток = доходы - расходы.<br /><br />
Допустим, что данные о семейном бюджете представлены двумя таблицами: - таблицей доходов и таблицей расходов:<br />
[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k]<br /><br />
Доходы          		Расходы    <br />
<br />
папа	3000	питание	200<br />
<br />
мама	1200	одежда	120<br />
<br />
брат	2000	транспорт	60<br />
<br />
я	600	отдых	30<br />
<br />
		разное	50<br /><br />
Приведем точную постановку задачи и опишем метод ее решения.<br />
<br />
Постановка задачи                   			Метод решения<br />
<br />
Определение достатка семьи.<br />
<br />
Дано:                                				S = Sd - Sr<br />
<br />
D = (дох1, ..., дох N) - доходы,           		Sd = сN<br />
<br />
R = (расх1, ..., расхМ) - расходы,          		   сk = сk-1 + dk<br />
<br />
где дох = (имя, d),                        			   [k = (1...N)]<br />
<br />
расх = (стат, r).                             			с0 = 0<br />
<br />
Треб.: S - достаток семьи.               			Sr = bM<br />
<br />
Где:                                               			   bi = bi-1 + ri<br />
<br />
S = Sum (d1, …, dN) - Sum (r1, .... rM).     		   [i = (1 ... M)]<br />
<br />
 При: N, M > 0.                       			b0 = 0<br /><br />
Для решения задачи на ЭВМ в качестве представления данных примем два списка операторов data, а для организации вывода результирующих данных - следующий сценарий.<br />
<br />
Сценарий					Представление данных<br /><br />
Подсчет достатка 					'doch: ' доходы<br />
<br />
Доходы семьи:					data «папа», 300000<br />
<br />
         *					data «мама», 120000<br />
<br />
 		... ... 						data «брат», 200000<br />
<br />
Доходов = 					data «», 0 <br />
<br />
Расходы семьи:<br />
<br />
       *					rash: ' расходы<br />
<br />
 		... ... 						data «питание», 200000<br />
<br />
Расходов = 					data «одежда», 120000<br />
<br />
Достаток = 					data «транспорт», 60000<br />
<br />
								data «», 0<br /><br />
Приведем соответствующие этому сценарию и выбранному методу представления данных алгоритмы и программу на Бейсике:<br /><br />
алг «достаток семьи»	 		'достаток семьи<br />
<br />
нач						cls <br />
<br />
вывод («Подсчет достатка») 		   ? «Подсчет достатка»<br />
<br />
вывод («Доходы семьи:»)		   ? «Доходы семьи:»<br />
<br />
подсчет_доходов				   gosub dchs 'доходы<br />
<br />
вывод («Доходов=», Sd)			   ? «Доходов=», Sd<br />
<br />
вывод («Расходы семьи:»)		   ? «Расходы семьи:»<br />
<br />
подсчет_расходов			   gosub rashs 'расходы<br />
<br />
вывод («Расходов =», Sr)			   ? «Расходов=», Sr<br />
<br />
S := Sd - Sr					   S = Sd - Sr<br />
<br />
вывод («Достаток=», S)			   ? «Достаток=», S<br />
<br />
кон						end<br /><br />
алг «подсчет доходов»			dchs: 'подсчет доходов»<br />
<br />
нач						'<br />
<br />
загрузка_доходов				   restore doch 'доходы<br />
<br />
Sd := 0					   Sd = 0 <br />
<br />
цикл					   do<br />
<br />
чтение (имя, d)			      read namS, d<br />
<br />
при имя = «» вых				   if nam$ = «» then exit do<br />
<br />
вывод (имя, d)				      ? nam$, d<br />
<br />
Sd = Sd + d				      Sd = Sd + d<br />
<br />
кцикл					   loop<br />
<br />
кон						return<br /><br />
алг «подсчет расходов»			rashs ' подсчет расходов<br />
<br />
нач						'<br />
<br />
загрузка_расходов			   restore rach 'расходы<br />
<br />
Sr := 0					   Sr = 0<br />
<br />
цикл					   do<br />
<br />
чтение (стат, r)			       read stat$, r<br />
<br />
при стат = «» вых			   if st$ = «» then exit do<br />
<br />
вывод (стат, r)			       ? st$, r<br />
<br />
Sr = Sr + r				       Sr = Sr + r<br />
<br />
кцикл					    loop<br />
<br />
кон						return <br /><br />
Правильность составленного комплекса алгоритмов и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> расчета достатка семьи можно проверить по описанию результатов их выполнения:<br />[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k]
<br />
«достаток семьи»     		«подсчет доходов»     	«подсчет расходов» <br />
<br />
Подсчет достатка<br />
<br />
Доходы семьи:      		Sd0 = 0 [k = 0]       		Sr0 = 0 [i = 0] <br />
<br />
 <br />
<br />
Доходов = <br />
<br />
Расходы семьи:       		   [k =(1...N)]           		   [i =(1...M)] <br />
<br />
   	              		     <br />
<br />
Расходов = < Sr>     		  Sdk = Sd/k-l/+dk     		  Sri == Sri-1 + ri <br />
<br />
{ S = Sd - Sr <br />
<br />
Достаток = <br /><br />
Для обоснования правильности всего комплекса алгоритмов и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> в целом необходимо показать правильность каждого из вспомогательных алгоритмов: «подсчет доходов» и «подсчет расходов».<br />
<br />
Для первого алгоритма для первых шагов вычисления получаем:<br />
<br />
Sd0 = 0,<br />
<br />
Sd1 = Sd0 + d1 = d1,<br />
<br />
Sd2 = Sd1 + d2 = d1 + d2.<br />
<br />
Для последующих шагов можно заключить, что<br />
<br />
Sdk = Sdk-1 + dk = d1 + d2 + ... + dk-1 + dk.<br />
<br />
Это доказывается с помощью математической индукции. В силу этого утверждения окончательным результатом вычислений станет сумма доходов<br />
<br />
SdN = d1 + d2 + ... + dN-1 +  dN. <br />
<br />
Следовательно, алгоритм подсчета доходов - правильный.<br />
<br />
Для второго алгоритма подсчета расходов получаются аналогичные оценки:<br />
<br />
Sr0 = 0,<br />
<br />
Sr1 = Sr0 + r1 = r1,<br />
<br />
Sr2 = Sr1 + r2 = r1 + r2<br />
<br />
и для последующих шагов вычислений:<br />
<br />
Sri = Sri-1 + ri = r1 + r2 +... + ri-1+ ri.<br />
<br />
Это доказывается также с помощью математической индукции. На основании этого утверждения можно сделать заключение о конечном результате выполнения алгоритма:<br />
<br />
SrM = r1 + r2 + ... + rM-1+ rM.<br />
<br />
Следовательно, алгоритм подсчет расходов правильный. Но в основном алгоритме содержится единственная расчетная формула<br />
<br />
S = Sd - Sr.<br />
<br />
В силу доказанных утверждений о результатах выполнения алгоритмов «подсчета доходов» и «подсчета расходов» конечным результатом вычислений станет величина<br />
<br />
S = Sd - Sr = (d1 + d2 + ... + dN) - (r1 + r2 + ... + rM).<br />
<br />
Что и требовалось доказать. Следовательно, весь комплекс алгоритмов и программа в целом правильны.<br /><br />
В о п р о с ы<br /><br />
1. К чему приводят ошибки в экономических программах?<br />
<br />
2. Кто отвечает за ошибки в экономических программах?<br />
<br />
3. Что дают постановки задач?<br />
<br />
4. Зачем нужны описания методов?<br />
<br />
5. Как проверяется правильность методов?<br />
<br />
6. Зачем нужны описания результатов?<br /><br />
З а д а ч и<br /><br />
1. В магазине имеются товары различных наименований. В течение дня каждый из М покупателей (М - заданное число) сообщил о своем намерении приобрести определенное количество товара одного из наименований. Требуется определить суммарный спрос на товары каждого наименования, расположив товары в порядке убывания дневного спроса на них.<br />
<br />
2. Каждый из N магазинов в течение месяца работал D дней (N и D - заданные числа 1, 2, .... N). Известна прибыль каждого магазина в каждый день его работы. Необходимо напечатать упорядоченный по месячным доходам список названий магазинов, имеющих прибыль в пересчете на один день работы выше средней дневной прибыли по всем магазинам.<br />
<br />
3. Каждое из N предприятий города выпускает М одинаковых наименований продукции (N и М, наименования продукции и названия предприятий известны). Заданы объем выпуска и стоимость единицы продукции каждого вида для каждого из предприятий. Необходимо для каждого вида продукции определить предприятия, выпускающие наибольший объем этой продукции.<br />
<br />
4. Из разных городов выбрали N семей (N - заданное число). Каждая семья характеризуется числом членов и доходом каждого из них. Для каждого города сформировать перечень семей с минимальным доходом в пересчете на отдельного члена семьи, указав порядковые номера семей из общего списка.<br />
<br />
5. Ассортимент N магазинов состоит из М товаров (N, М и названия товаров заданы). Каждый товар характеризуется наличием или отсутствием его в магазине, а также наличием или отсутствием на него спроса покупателей. Требуется перечислить названия ходовых (есть спрос и товар имеется хотя бы в одном магазине), неходовых (спрос отсутствует, а товар имеется хотя бы в одном магазине) и дефицитных (спрос есть, а товара нет ни в одном из магазинов) товаров.<br /><br />
5.4. Элементы доказательного программирования<br /><br />
Доказательное программирование - это составление программ с доказательством их правильности. Сложность составления и доказательства правильности алгоритмов и программ состоит в следующем.<br />
<br />
Для заключений о наличии ошибок в алгоритме или в программе достаточно указать тест, при котором произойдет сбой, отказ или будут получены неправильные результаты. Поиск и исправление ошибок в программах обычно проводится на ЭВМ.<br />
<br />
Для утверждений о правильности программ необходимо показать, что правильные результаты будут получаться для всех допустимых данных. Такие утверждения могут быть доказаны только путем исчерпывающего анализа результатов выполнения программ при любых допустимых данных.<br />
<br />
Существуют два подхода к проверке программ - прагматический и доказательный. При прагматическом подходе проверка программ выполняется на ЭВМ путем тестирования.<br />
<br />
Тестирование - это проверка программ на ЭВМ с помощью некоторого набора тестов. Ясно, что тестирование не дает гарантий правильности выполнения программ на всех допустимых данных. Следовательно, тестирование в общем случае не может дать и не дает полных гарантий отсутствия ошибок в программах.<br />
<br />
Напомним, что отладка программ - это процесс поиска и исправления ошибок в программах на ЭВМ. Однако поскольку поиск ошибок при отладке программ проводится с помощью тестов, то полных гарантий нахождения и исправления всех ошибок в программах отладка не дает и в принципе дать не может.<br />
[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k]<br />
По этой же причине не ясно, когда процесс отладки программ - процесс поиска и исправления ошибок на ЭВМ - может считаться завершенным. А выявлены или нет все ошибки в программе при ее отладке не может сказать никто.<br />
<br />
Таким образом, прагматический подход чреват созданием программ, содержащих ошибки даже после «завершения» отладки, что и наблюдается практически во всех больших программах для ЭВМ.<br />
<br />
Рассмотрим в качестве иллюстрации принципов тестирования алгоритм и программу вычисления максимума из трех чисел: а, b, с.<br /><br />
алг «максимум трех чисел»         			'максимум трех чисел <br />
<br />
нач                               				cls <br />
<br />
ввод (а, b, с)                      				    input a, b, с <br />
<br />
если а > b то                     			    if а > b then<br />
<br />
тах := a                         				       max = a <br />
<br />
инеc b > с то                     			    elseif b > с then<br />
<br />
тах := b                         				       mах = b <br />
<br />
инеc с > а то                     			    elseif с > a then<br />
<br />
тах:= с                        				       mах = с <br />
<br />
кесли                           				    end if <br />
<br />
вывод («тах=»,тах)             			    ? «mах=»; mах <br />
<br />
кон                            					end<br /><br />
Запуск этой <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ можно проверить на следующих данных:<br />
<br />
Tecт1       		Тест2       		Тест3<br />
<br />
? 1 1 2    		? 1 2 3    		? 3 2 1 <br />
<br />
max = 2 		max = 3   		max = 3<br />
<br />
Все три результата правильные. Отладку <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> после запуска этих примеров можно было бы считать завершенной. Однако есть контрпример:    <br /><br />
Контрпример1<br />
<br />
? 2 1 3<br />
<br />
max = 2<br /><br />
Но этот результат - неправильный. Следовательно, алгоритм и программа содержат ошибки. Но сколько этих ошибок - одна, две, а может быть больше?<br />
<br />
При доказательном подходе разработка алгоритмов и программ предполагает составление спецификаций и доказательство их правильности по отношению к этим спецификациям. Процесс разработки программ считается завершенным после проверки их на ЭВМ и предоставлении доказательств отсутствия ошибок.<br />
<br />
Доказательства правильности алгоритмов и программ, равно как и любые другие доказательства, строятся на основе суждений и рассуждений. В данном случае суждения и рассуждения касаются результатов выполнения алгоритмов и программ с теми или иными данными.<br />
<br />
Конструктивно, доказательства правильности алгоритмов и программ строятся на суждениях и утверждениях о результатах выполнения каждого из составляющих их действий и операций в соответствии с порядком их выполнения.<br />[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k]
<br />
В качестве примера проведем анализ результатов алгоритма, состоящего из трех присваиваний.<br />
<br />
алг «у = х5»   		Результаты       	Утверждения <br />
<br />
нач<br />
<br />
v := х&#215;х           		v1 = х&#215;х     	&#222;    	v1 = x2 <br />
<br />
v := v&#215;v           		v2 = v1&#215;v1     	&#222; 	v2 = x4<br />
<br />
у := v&#215;x          		у = v2&#215;x     	&#222;   	у = х5 <br />
<br />
кон<br />
<br />
Справа от алгоритма приведены результаты выполнения присваиваний. Результатом первого присваивания v := х&#215;х будет значение v1 = х&#215;х переменной v. Результат следующего присваивания v := v&#215;v - второе значение переменной v, равное v2 = v1&#215;v1 . Результатом третьего присваивания у := v&#215;x будет значение у = v2&#215;x .<br />
<br />
На основе приведенных рассуждений, можно сделать три утверждения о промежуточных и конечных результатах вычислений:<br />
<br />
Результаты        		Утверждения <br />
<br />
{ v1 = х&#215;х    		&#222;   	v1 = х2<br />
<br />
{ v2 = v1&#215;v1   		&#222;    	v2 = x4<br />
<br />
{ у = v2&#215;x    		&#222;   	у = х5 <br />
<br />
Таким образом можно высказать окончательное <br />
<br />
Утверждение. Конечным результатом выполнения будет <br />
<br />
у = х5 для любых значений х.<br />
<br />
Доказательство. Исходя из описания результатов выполнения присваиваний значение у будет равно<br />
<br />
у = v2&#215;x = (v1&#215;v,)&#215;x = ((х&#215;х).(х&#215;х))) &#215;х = x5.<br />
<br />
Что и требовалось доказать.<br />
<br />
Техника анализа и доказательства правильности алгоритмов и программ во многом совпадает с техникой доказательства любых других утверждений и состоит в применении следующих четырех приемов:<br />
<br />
•	разбор случаев;<br />
<br />
•	подбор контрпримеров;<br />
<br />
•	выделение лемм;<br />
<br />
•	индуктивный вывод.<br />
<br />
Разбор случаев применяется для анализа результатов выполнения конструкций альтернативного выбора. В качестве примера проведем анализ приведенного выше алгоритма «выбора» максимума трех чисел, содержащего выбор альтернатив. <br /><br />
алг «у = тах(а, b,с)»         			Результаты <br />
<br />
нач <br />
<br />
если а > b то         			при а > b<br />
<br />
у := а                				у = а <br />
<br />
инес b > с то            			при b > с<br />
<br />
у := b                				у = b <br />
<br />
инес с > а то            			при с > а<br />
<br />
у := с                  				у = с <br />
<br />
кесли                 				при не (b > с) <br />
<br />
кон<br /><br />
Справа от алгоритма приведены результаты вычислений с указанием условий, при которых они получаются. На основании этих фактов можно заключить, что конечные результаты вычисления имеют три варианта:<br />
<br />
а, при а > b, <br />
<br />
у =   	b, при b > с и b &#179; а, <br />
<br />
с, при с > а и с &#179; b.<br />
<br />
В то же время значение максимума должно быть равно:<br />
<br />
а, при а &#179; b и а &#179; с, <br />
<br />
mах =  b, при b &#179; с и b &#179; а,<br />
<br />
с, при с &#179; а и с &#179; b.<br />
<br />
Во всех трех случаях видны различия в условиях получения и определения максимальных значений. Покажем, что эти различия существенны и утверждение о том, что алгоритм дает правильные результаты для всех данных, неверно.<br />
<br />
Для опровержения общего утверждения достаточно указать хотя бы один контрпример. В данном случае утверждение о правильности алгоритма гласило бы: для любых значений переменных а, b, с конечным было бы значение mах (а, b, с).<br />
<br />
Контрпримером в данном случае будут значения: а = 2, b = 1, с = 3. Для этих данных по определению mах = 3, а по результатам выполнения алгоритма у = 2. Следовательно, в алгоритме содержится ошибка.<br />
<br />
Однако оказывается, что это не единственная ошибка. Более тонкие ошибки вскрывает второй контрпример: а = 1, b = 1, c = 1. Для этих данных в алгоритме вовсе не определен результат вычислений у = ? и конечный результат выполнения <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> будет непредсказуем!?<br />
<br />
Правильное решение этой задачи можно получить применением систематических методов, составив постановку и описание метода решения.<br /><br />
Постановка задачи            Метод решения <br />
<br />
Вычисление mах (а, b, с).<br />
<br />
Дано: а, b, с - три числа,      mх = mах(mах(а,b),с) <br />
<br />
Треб.: mх - максимум,         mах(х,у) =   х, при х &#179; у <br />
<br />
Где: mх = mах (а, b, с).                   	        у, при у &#179; х<br /><br />
Данный метод решения непосредственно состоит из формул определения максимумов из трех и двух чисел. Реализация этого метода в форме алгоритма может быть такой:<br /><br />
алг «тх = тах(а,b,с)»			Результаты<br />
<br />
нач<br />
<br />
если а &#179;  b то				при а &#179; b<br />
<br />
тх := а					mx = a<br />
<br />
иначе						при b > а<br />
<br />
mх := b					mх = b<br />
<br />
кесли { mх = mах(а,b) }		         при с < mх<br />
<br />
если с &#179; mх то			         при с &#179; mх<br />
<br />
mх := с				         mх' = с <br />
<br />
кесли <br />
<br />
кон<br /><br />
Доказательство правильности алгоритмов можно проводить двумя способами. Первый способ - анализ правильности при построении алгоритмов. Второй способ - анализ правильности после построения алгоритмов.<br />
<br />
Первый способ - показать, что алгоритм является корректной реализацией метода решения, и доказать, что метод - правильный. Для рассмотренного алгоритма это доказательство изложено выше.<br />
<br />
Привлечение для создания алгоритмов известных методов решения, для которых доказана их правильность, позволяет существенно упростить обоснование правильности программ. При этом центр тяжести проблем смещается к созданию и обоснованию гарантированно правильных методов решения задач.<br />
<br />
Второй способ - исчерпывающий анализ результатов выполнения алгоритма на соответствие постановке решаемых задач для любых допустимых данных. Это - доказательство путем исчерпывающего анализа результатов выполнения алгоритмов и программ.<br />
<br />
Результаты выполнения рассматриваемого алгоритма вычисления максимума трех чисел приведены справа от него. Анализ результатов алгоритмов, содержащих конструкцию выбора, требует разбора случаев. Отметим, что все эти случаи были уже указаны ранее при разборе ошибочной версии алгоритма.<br />
<br />
Для обоснования правильности алгоритма докажем вспомогательное утверждение о результатах выполнения конструкции альтернативного выбора<br />
<br />
Лемма: Конечными результатами выполнения алгоритма<br />
<br />
Алгоритм				Результаты<br />
<br />
если а > b то				при а &#179; b<br />
<br />
тх := а				mx = a<br />
<br />
иначе					при b > a<br />
<br />
тх := b				mx = b <br />
<br />
кесли<br /><br />
является значение mx = max(а, b) для любых значений а и b. <br />
[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k]<br />
Доказательство. Результатом вычислений здесь будут значения<br />
<br />
а при а &#179; b<br />
<br />
mx =  <br />
<br />
b при а < b<br />
<br />
что совпадает с определением max (а, b).<br />
<br />
С помощью этой леммы легко доказать правильность алгоритма в целом.<br />
<br />
{ mх = max (а, b) }        	Результаты<br />
<br />
если с &#179; mx то          	при с &#179; mx<br />
<br />
mx := с               		mx' = с <br />
<br />
кесли                  		mx' = mx <br />
<br />
при с < mx<br /><br />
Утверждение. Конечным результатом выполнения алгоритма вычисления максимума будет значение mx' = max (а, b, с) для любых значений а, b и с.<br />
<br />
Доказательство. В силу предположения предшествующее значение переменной mx = max(a,b). Отсюда получаем, что<br />
<br />
 с, при с &#179; mx         <br />
<br />
mx&#162; =     			 = max(a,b,c). <br />
<br />
 mx, при с < mx<br />
<br />
Что и требовалось доказать.<br />
<br />
Доказательство лемм - основной прием доказательства правильности сложных алгоритмов и программ. Напомним, что лемма — это вспомогательное утверждение, предполагающее отдельное доказательство.<br />
<br />
Одним из важнейших применений аппарата лемм является анализ результатов выполнения и доказательство правильности алгоритмов с циклами. Используемые для анализа циклов леммы называются индуктивными утверждениями. Эти леммы выражают утверждения о промежуточных результатах выполнения циклов.<br />
<br />
В качестве примера использования индуктивных рассуждений рассмотрим алгоритм вычисления среднего арифметического последовательности чисел. В приводимом алгоритме предполагается, что последовательность чисел размещена в массиве X[1:N].<br /><br />
алг «среднее значение»<br />
<br />
массив X[1:N]<br />
<br />
нач                            				Результаты:<br />
<br />
от k = 1 до N цикл<br />
<br />
S := S * (k-l)/k + X[k]/k     		Sk = Sk-1*(k-l)/k + X[k]/k <br />[/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k]
<br />
кцикл                          			[k = (1...N)] <br />
<br />
Xcp := S                       			Xcp = S <br />
<br />
кон<br /><br />
Этот алгоритм обычно считается ошибочным (?!). «Ошибкой» в этом алгоритме считается отсутствие присваивания S := 0 перед началом цикла.<br />
<br />
Разберем результаты выполнения алгоритма на первых трех шагах:<br />
<br />
S1 = S0&#215;(l - 1)/1 + Х[1]/1 = S0&#215;0/1 + Х[1]/1 = Х[1]/1;<br />
<br />
S2 = S1&#215;(2 - 1)/2 + Х[2]/2 = S1&#215;1/2 + Х[2]/2 = Х[1]/2 + Х[2]/2;<br />
<br />
S3 = S2&#215;(3 - 1)/3 + Х[3]/3 = S2&#215;2/3 + Х[3]/3 = Х[1]/3 + Х[2]/3 + Х[3]/3.<br />
<br />
Можно утверждать, что на первых трех шагах результатом является среднее арифметическое обрабатываемых чисел. На основе этих примеров можно сделать индуктивное утверждение - «на каждом очередном k-м шаге выполнения цикла результатом будет среднее арифметическое»<br />
<br />
Sk = Sk-1&#215;(k-l)/k + X[k]/k = X[l]/k + X[2]/k + ... + X[k]/k.<br />
<br />
Доказательство этого утверждения проводится с помощью математической индукции. На первом шаге при k = 1 оно уже доказано. Допустим, что оно справедливо на (k -1)-м шаге<br />
<br />
Sk-1 = X[l]/(k-l) + X[2]/(k-l) + ... + X[k-l]/(k-l). <br />
<br />
Подставим его в описание результатов цикла на k-м шаге <br />
<br />
Sk= Sk-1&#215;(k-l)/k +X[k]/k.<br />
<br />
Тогда результат выполнения цикла на k-м шаге оказывается равным<br />
<br />
Sk = X[l]/k + X[2]/k + ... + X[k-l]/k + X[k]/k,<br />
<br />
т. е. среднему арифметическому первых k чисел.<br />
<br />
Таким образом, индуктивное утверждение доказано. В силу математической индукции это утверждение верно для всех k = l, 2, ..., N. Следовательно, на последнем шаге конечным результатом выполнения цикла станет значение<br />
<br />
SN = SN-1&#215;(N-1) + X[N]/N = X[1]/N + ... + X[N]/N.<br />
<br />
Исходя из этого утверждения конечным результатом выполнения алгоритма в целом будет среднее арифметическое значение<br />
<br />
Xcp = SN = X[1]/N + ... + X[N]/N. <br />
<br />
Следовательно, приведенный алгоритм, несмотря на содержащуюся в нем «ошибку», является правильным. В целом анализ правильности алгоритмов с циклами во многом построен на использовании индукции.<br />
<br />
Индукция - это вывод общих суждений из частных примеров. При анализе циклов она используется для подбора индуктивных утверждений о промежуточных результатах выполнения циклов. Однако для доказательства правильности индуктивных утверждений о результатах выполнения циклов используется полная математическая индукция.<br />
<br />
Математическая индукция - это принцип доказательства последовательностей утверждений Р(1), Р(2), Р(3), ..., P(N), .... когда известно, что верны первые утверждения для n = 1, 2, 3 и из истинности (n - 1)-го утверждения следует истинность n-го утверждения:<br />
<br />
Принцип математической индукции: если первое утверждение Р(1) истинно и из утверждения Р(n - 1) следует утверждение Р(n), то истинны все утверждения Р(1), Р(2), Р(3), ..., Р(n), ... .<br />
<br />
Приведем примеры индуктивного анализа циклов для алгоритма нахождения минимального значения в последовательности чисел, который в этот раз действительно будет ошибочным.<br /><br />
алг «нахождение минимума»<br />
<br />
массив x[1:N]<br />
<br />
нач                       				Результаты:<br />
<br />
от k = 1 до N цикл <br />
<br />
если x[k] < min то<br />
<br />
тп := x[k]            			mnk = { x[k], при x[k] < mnk-1, <br />
<br />
все                      			{ mnk-1, в ином случае <br />
<br />
кцикл                     			[ k = (1 ... N)] <br />
<br />
Min := тп                  				Min = mnN <br />
<br />
кон<br /><br />
Утверждение. Приведенный алгоритм определения минимального значения последовательности чисел неправильный.<br />
<br />
Доказательство. Для демонстрации ошибок необходимо привести контрпример. Для построения контрпримера разберем результаты выполнения на первом шаге цикла.<br />
<br />
Результаты выполнения первого шага цикла при k = 1:<br /><br />
х[1] при х[1] < mn0<br />
<br />
mn1 =                    		= min (х[1], mn0). <br />
<br />
 	 mn0 при х[1] &#163; mn0    <br /><br />
Следовательно, результатом будет<br />
<br />
mn1 = min (x[l], mn0)<br />
<br />
Однако поскольку начальное значение mn0 неизвестно, то неопределено значение результата выполнения первого шага цикла. Аналогичное утверждение можно сделать о втором и всех последующих шагах выполнения цикла:<br />
<br />
mnk = min (x[k], Min(x[k-l], ..., х[1], mn0) =  Min (x[k], x[k-1], ..., х[1], mn0).<br />
<br />
В силу математической индукции это утверждение справедливо при k = N:<br />
<br />
mnN = Min (x[N], x[N - 1], ..., x[2], х[1], mn0),<br />
<br />
Таким образом на основании этого утверждения можно сделать заключение о конечном результате выполнения алгоритма в целом:<br />
<br />
Min = mnN = Min (x[N], x[N - 1], ..., x[2], х[1], mn0).<br />
<br />
Из этой формулы видно, что конечный результат равно как и результат первого присваивания зависит от начального значения mn0 переменной mn. Однако эта величина не имеет определенного значения, соответственнно неопределен и конечный результат выполнения алгоритма в целом, что и является ошибкой.<br />
<br />
В самом деле, если значение mn0 окажется меньше любого из значений последовательности х[1], .... x[N], то конечный результат вычислений будет неправильным. В частности, при реализации алгоритма на Бейсике неправильный результат будет получен, если последовательность будет состоять только из положительных чисел. Например, для последовательности чисел: 1, 2, 3, ..., N.<br />
<br />
Приведем правильную версию алгоритма с доказательством отсутствия ошибок, используя технику индуктивных утверждений.<br /><br />
алг «нахождение минимума»<br />
<br />
массив х[1:п]<br />
<br />
нач<br />
<br />
   тп := x[1]<br />
<br />
  от k = 1 до N цикл<br />
<br />
    если x[k] < тп то<br />
<br />
      тп = x[k]<br />
<br />
    все<br />
<br />
   кцикл<br />
<br />
  Min = тп<br />
<br />
кон	<br /><br />
Результаты:<br />
<br />
mn0 = х[1] <br />
<br />
[k = (1 ... N)]<br /><br />
Min = mnN<br /><br />
Утверждение. Для любой последовательности чисел x[l:N] конечным результатом вычислений будет значение Min = Min (х[1], ..., x[N]).<br />
<br />
Доказательство. Воспользуемся результатами анализа выполнения алгоритма, рассмотренного ранее. Различие между ними состоит в добавлении перед началом цикла присваивания mn := х[1], которое задает начальное значение переменной mn, равное mn0 = х[1].<br />
<br />
Тогда в силу приведенных ранее рассуждений и выкладок конечным результатом выполнения новой версии алгоритма будет значение<br />
<br />
Min = mnN = Min(x[N], x[N-l], ..., х[2], х[1], mn0) = <br />
<br />
        = Min(x[N], x[N-l], ..., x[2], x[l], x[l]) =  Min(x[N], .... х[1]).<br />
<br />
Что и требовалось.<br />
<br />
Рассмотренные примеры являются образцами доказательств правильности алгоритмов и программ, которые могут использоваться для анализа и доказательства правильности других новых алгоритмов и программ обработки данных.<br />
<br />
Общий вывод, который мы хотим сделать, состоит в том, что применение доказательных методов превращает программирование в научную дисциплину создания безошибочных алгоритмов и надежных программ для ЭВМ.<br /><br />
В о п р о с ы<br /><br />
1. Как показать наличие ошибок в алгоритме?<br />
<br />
2. Сколь долго может продолжаться отладка программ?<br />
<br />
3. Зачем нужны доказательства в анализе алгоритмов?<br />
<br />
4. Из чего состоит техника доказательств правильности?<br />
<br />
5. Когда применяется разбор случаев?<br />
[/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n]<br />
6. Что такое леммы?<br />
<br />
7. Что такое индуктивные рассуждения?<br /><br />
3 а д а ч и<br /><br />
1. Приведите постановку, алгоритм решения и разбор правильности для следующих задач:<br />
<br />
а) подсчет суммы целых чисел;<br />
<br />
б) подсчет суммы нечетных чисел;<br />
<br />
в) подсчет членов арифметической прогрессии;<br />
<br />
г) подсчет членов геометрической прогрессии. <br />
<br />
2. Для последовательности чисел х1, х2,..., хN, приведите постановку, алгоритм решения и разбор правильности следующих задач:<br />
<br />
а) подсчет суммы всех чисел;<br />
<br />
б) вычисление среднего арифметического чисел;<br />
<br />
в) определение наибольшего из чисел;<br />
<br />
г) определение наименьшего из чисел.<br />
<br />
3. Для данных о росте и весе учеников приведите постановку задачи, алгоритм решения и разбор правильности для следующих задач:<br />
<br />
а) нахождение самого высокого ученика;<br />[/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n]
<br />
г) нахождение самого легкого ученика;<br />
<br />
д) нахождение среднего роста учеников;<br />
<br />
е) нахождение суммарного веса учеников.<br />
<br />
4. Для прямоугольной матрицы Anm приведите постановку, алгоритм решения и разбор правильности следующих задач:<br />
<br />
а) подсчет сумм элементов матрицы по столбцам;<br />
<br />
в) нахождение минимального значения в каждом столбце;<br />
<br />
е) нахождение максимального значения в каждой строке;<br />
<br />
ж) нахождение наибольшего из минимальных значений в столбцах;<br />
<br />
з) нахождение наименьшего из максимальных значений в строках.<br />
<br />
5. Для N точек на плоскости, заданных случайным образом, приведите постановку, метод решения, сценарий, алгоритм и программу решения следующих задач:<br />
<br />
а) найти точку, наиболее удаленную от центра координат;<br />
<br />
б) соединить пару наиболее удаленных точек;<br />
<br />
в) найти три точки, образующие треугольник с наибольшим периметром;<br />
<br />
г) найти три точки, образующие треугольник с наибольшей площадью.<br /><br />
5.5. Решение сложных задач<br /><br />
Большинство практических задач обработки данных относится к числу сложных. Сложность задач оценивается сложностью обрабатываемых данных и сложностью алгоритмов их решения. Сложность данных обычно оценивается их количеством. Сложность алгоритмов оценивается объемом вычислений, необходимых для получения требуемых результатов.<br />
<br />
При решении сложных задач, требующих составления сложных алгоритмов, особенно сказываются преимущества доказательного программирования. Для этого <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> решения сложных задач составляются из вспомогательных алгоритмов и подпрограмм, решающих более простые подзадачи.<br />
<br />
Анализ правильности сложных алгоритмов и программ распадается на анализ правильности каждого из вспомогательных алгоритмов и на анализ правильности программ в целом. Необходимым условием для этого является составление спецификаций для каждого из вспомогательных алгоритмов и каждой под<A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>,<br />
<br />
При таком подходе доказательство правильности сложных алгоритмов и программ подразделяется на доказательство ряда лемм о правильности вспомогательных алгоритмов и подпрограмм и доказательство правильности программ в целом.<br />
<br />
В качестве иллюстрации рассмотрим две задачи, которые можно отнести к сложным проблемам обработки данных. Для каждой из этих задач приведем спецификации, алгоритмы и доказательства правильности.<br />
<br />
Первая задача: упорядочение массивов данных. Пример, для чисел 3, 7, 9, 1, 4 упорядоченная последовательность имеет вид: 1, 3, 4, 7, 9.                                                  <br />
<br />
Существует несколько способов и методов упорядочения массивов и последовательностей. Простейший из них называется методом «пузырька».<br />
<br />
Метод «пузырька» состоит в нахождении в массиве наименьшего числа и перестановке его на первое место. Это как бы «пузырек», поднимающийся к началу массива. Затем в остатке массива находится наименьшее число, которое перемещается на второе место, и так далее - до исчерпания всего массива. <br />
<br />
Для рассматриваемых чисел метод «пузырька» дает следующие перестановки:<br />
<br />
исходные числа:   		3, 7,   9, 1, 4.<br />
<br />
перестановка1:     		1, 7,   9,  3, 4.<br />
<br />
перестановка2:     		1, 3,   9,  7, 4.<br />
<br />
перестановка3:     		1, 3,   4,  7, 9.      упорядочено.<br /><br />
Приведем точную математическую постановку задачи. <br />
<br />
Постановка задачи<br />
<br />
Упорядочение последовательности чисел. <br />
<br />
Дано: x1, х2, ..., хN - исходные числа. <br />
<br />
Треб.: x1', x2', ..., хN' - упорядоченные числа. <br />
<br />
Где:   х1' &#163; х2' &#163; ... &#163; хN'. <br />
<br />
При:   N > 0.<br />
<br />
Упорядочение чисел по методу «пузырька» в общей форме имеет вид:<br />
<br />
Способ «упорядочение чисел»<br />
<br />
нач <br />
<br />
от k=1 до N-1 цикл <br />
<br />
хтп := xk <br />
<br />
imn := k<br />
<br />
от i=k+1 до N цикл <br />
<br />
если xi < хтп то <br />
<br />
хтп := xi <br />
<br />
imn : = i <br />
<br />
кесли<br />
<br />
кцикл                     			<br />
<br />
	xmn = Min (хk, ..., хN) <br />
<br />
xk' = хтп <br />
<br />
ximn ' = xk<br />
<br />
кцикл                            			хk&#162; = Min (хk, ..., хN) <br />
<br />
кон                                			x1 < х2 < ... < хk&#162;<br /><br />
Приведенный алгоритм можно рассматривать как алгоритм, сложенный из нескольких фрагментов - вспомогательных алгоритмов, решающих определенные подзадачи.<br />
<br />
Первый фрагмент (внутренний цикл) решает подзадачу нахождения минимального значения в подмассиве x[k:N]. Второй фрагмент решает подзадачу перемещения k-го минимального значения на k-e место в массиве.<br />
<br />
Лемма 1. Для вспомогательного алгоритма<br />
<br />
алг «поиск минимума» <br />
<br />
нач <br />
<br />
хтп := xk <br />
<br />
imn := k <br />
<br />
от i = k + 1 до N цикл <br />
<br />
если xi < хтп то <br />
<br />
хтп := xi <br />
<br />
imn := i <br />
<br />
кесли<br />
<br />
кцикл                      			{ xmn = Min (хk, ..., х1) } <br />
<br />
кон<br />
<br />
конечным результатом вычислений будет значение <br />
<br />
xmn = Min (хk, ..., хN).<br />
<br />
Доказательство. Применим индуктивную схему рассуждений. Первое присваивание дает<br />
<br />
xmnk = xk.<br />
<br />
Далее на первом шаге цикла при i = k + 1 будет получен минимум первых двух чисел:<br />
<br />
   	      xk+1 при xk+1 < xmnk,<br />
<br />
xmnk+l = <br />
<br />
      xmnk при xk+1 &#179; xmnk. <br />
<br />
На втором шаге цикла будет получен минимум первых трех чисел:<br />
<br />
xmnk+2 = min (xk+2, min (хk+1, хk)) = Min (хk+2, хk+1, хk).<br />
<br />
Теперь можно утверждать, что на третьем и последующих шагах цикла результатом будет минимальное значение среди чисел xk , ..., xi<br />
<br />
хmni = Min (хk, ..., хi).<br />
<br />
Данное утверждение доказывается с помощью математической индукции. На первых двух шагах при i = k + 1, k + 2 оно уже установлено. Покажем, что оно будет выполняться на (i + 1)-м шаге. Действительно, на следующем шаге цикла результатом будет:<br />
<br />
      xi+1 при хi+1 < xmni = min(xi+1, хmni) <br />
<br />
хmni+1 =<br />
<br />
 	      хmni при хi+1 &#179; хmni = min(xi+1, xmni) <br />
<br />
= min (xi+1, Min (хk , ..., хi)) =  Min (хk, ..., хi, xi+1).<br />
<br />
Что и требовалось показать. Следовательно, в силу принципа математической индукции конечным результатом выполнения рассматриваемого цикла будет значение:<br />
<br />
xmnN = Min (xk, ..., хN) <br />
<br />
Что и требовалось доказать.<br />
<br />
Лемма 2. Для вспомогательного алгоритма<br />
<br />
алг «перестановки»<br />
<br />
нач                   			{ xmn = Min (хk, ..., хN) }<br />
<br />
xi&#162;mn= xk <br />
<br />
кон<br />
<br />
конечным результатом будет значение хk' = Min (хk, ..., хN).<br />
<br />
Доказательство. В силу леммы 1 xmn = Min (xk, ..., хN). А так как в этом алгоритме хk' = xmn, то в итоге получим<br />
<br />
хk' = xmn = Min (хk, ..., хN). <br />
<br />
Что и требовалось.<br />
<br />
Утверждение. Конечным результатом выполнения алгоритма будет упорядоченная последовательность чисел х1', ..., хN', удовлетворяющая условию х1' &#163; х2' &#163; ... &#163; хN'.<br />
<br />
Доказательство проводится по индуктивной схеме рассуждений. Рассмотрим результаты выполнения основного цикла основного алгоритма:<br />
<br />
алг «упорядочение чисел» <br />
<br />
нач<br />
<br />
от k = 1 до N - 1 цикл <br />
<br />
xmn := хk <br />
<br />
...............                     			{ xmn = Min (хk, ..., хi) }<br />
<br />
х&#162;k = xmnN <br />
<br />
хmп&#162; = хk  <br />
<br />
кцикл                         			{ хk' = Min (хk, ..., хN) }<br />
<br />
кон                                    			{ х1' &#163; х2' &#163; ... &#163; хk' }<br />
<br />
На первом шаге при k = 1 первый элемент последовательности<br />
<br />
х1' = Min (x1, х2, ..., хN),<br />
<br />
На втором шаге второй элемент последовательности<br />
<br />
x2' = Min (х2, ..., хN). <br />
<br />
В силу свойств минимума последовательности чисел будем иметь <br />
<br />
х1' = Min(x1, x2, ..., хN) = min (x1, Min (х2, ..., хN) &#163; (Min (х2, ..., хN) = x2'.<br />
<br />
Таким образом, при k = 2 результатом станут значения х1' и x2', такие что<br />
<br />
х1' &#163; x2'<br />
<br />
На третьем шаге выполнения основного цикла результатом станет <br />
<br />
х3 = Мin(х3, ..., хN). <br />
<br />
Опять же в силу свойств минимума последовательности имеем<br />
<br />
х2' = Min (х2, х3, ..., хN) = min (x2, Min (x3, ..., хN)) &#163; Min (x3, ..., хN) = x2'.<br />[/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n]
[/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n]<br />
Таким образом, после третьего шага при k = 3 первые три значения последовательности х1', x2', x3' будут удовлетворять условию<br />
<br />
х1'&#163; x2'&#163; x3'<br />
<br />
Из приведенных выкладок можно сделать индуктивное предположение, что на каждом очередном k-м шаге выполнения основного цикла первые k членов последовательности х1', x2', .... хk' будут удовлетворять условию<br />
<br />
х1'&#163; x2'&#163;  … &#163; xk'.<br />
<br />
Данное предположение доказывается с помощью математической индукции. На начальных шагах при k == 2 и k = 3 оно уже показано. Покажем, что оно будет выполнено на (k + 1)-м шаге, если это условие выполнено на k-м. шаге.<br />
<br />
В силу Леммы 2 на k-м и (k + 1)-м шагах выполнения основного цикла промежуточными результатами будут<br />
<br />
хk'   = Min(xk, xk+1, ..., хN), <br />
<br />
хk+1' = Min (xk+1, ..., хN).<br />
<br />
В силу свойств минимума последовательности чисел имеем <br />
<br />
хk' = Min(xk, xk+1, ..., хN) = min (хk, Min (хk+1, ...,хN)) &#163; Min (xk+1, ..., хN) = хk+1'.<br />
<br />
Таким образом, хk &#163; xk+1 и в силу индуктивного предположения получаем, что<br />
<br />
x1' &#163; х2' &#163; ... &#163; хk' &#163; xk+'1.<br />
<br />
Что и требовалось доказать.<br />
<br />
Осталось уточнить результаты выполнения последнего шага цикла при k = N - 1. В силу Леммы 2 результатом будет значение<br />
<br />
xN-'1 = Min (xN-1, xN) &#163; хN'.<br />
<br />
Таким образом, после N - 1 шагов выполнения основного цикла для последовательности в целом будут выполнены соотношения упорядоченности<br />
<br />
x1' &#163; x2' &#163; ... &#163; хN' .<br />
<br />
Что и требовалось доказать. Следовательно, рассмотренный алгоритм упорядочения чисел правильный в целом.<br />
<br />
Применим теперь данный способ упорядочения для решения задачи сортировки. Рассмотрим следующую задачу. Пусть дана некоторая партия товаров с заданной отпускной ценой, указана цена товаров и известны остатки от их продажи. Требуется подсчитать выручку от продажи и отсортировать товары по их остатку.<br />
<br />
Данные о товарах представлены двумя таблицами:<br /><br />
товар    	стоим 	         кол-во       <br />
<br />
яблоки	500	200<br />
<br />
огурцы	400	250<br />
<br />
арбузы	200	600<br /><br />
товар    	цена 	       остаток<br />
<br />
яблоки	2500	100<br />
<br />
огурцы	2000	150<br />
<br />
арбузы	1200	200<br /><br />
Приведем точную постановку задачи и сценарий диалога с компьютером для решения поставленной задачи.<br />
<br />
Постановка задачи							Сценарий<br />
<br />
Сортировка товаров по остатку.	<br />
<br />
Дано:									товары:<br />
<br />
D = (d1, d2, .... dN) - данные товара,				  < m 1>  *<br />
<br />
d = (товар, s, m),	      						...... ... ...      <br />
<br />
s - стоимость, m - кол-во,						остатки:<br />
<br />
R = (r1, r2, ..., rN) - данные об остатках,			  < р1>   *<br />
<br />
г = (товар, с, р),	    						...... ... ...      <br />
<br />
с - цена, р - остаток.<br />
<br />
Треб.: S - сумма выручки,						выручка = <br />
<br />
R' = (r1', ..., rN') - упорядоченные данные,				сортировка:<br />
<br />
Где:								  0 то<br />
<br />
? fs$, ns, vs				'     вывод (fs$, ns, vs)<br />
<br />
end if					' кесли<br />
<br />
end						' кон<br /><br />
data «Иванов», «Вова», 160, 85, «муж» <br />
<br />
data «Петрова», «Катя», 167, 67, «жен» <br />
<br />
data «Сидоров», «Миша», 180, 80, «муж» <br />
<br />
data «», «», 0, 0, «»<br />
<br />
Отметим, что при использовании языка Basic тексты программ и описания алгоритмов полностью идентичны друг другу и по форме и по содержанию. Можно сказать, что текст <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на Бейсике получается переводом русских слов и словосочетаний на язык Бейсик и наоборот.<br />
<br />
Задача 2. «Экономическая».<br />
<br />
Составить алгоритм и программу определения общей стоимости промышленных товаров по данным из таблицы:<br /><br />
товар	тип	цена	кол-во<br />
<br />
ананасы	прод	8000	40<br />
<br />
утюги	пром	60000	3<br />
<br />
сахар	прод	6000	20<br /><br />
Разработку алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> начнем с составления сценария диалога, учитывая возможность отсутствия в таблице требуемых исходных данных.<br /><br />
Сценарий<br /><br />
промышленные товары <br /><br />
отсутствуют <br /><br />
                  *<br />
<br />
		… … …<br /><br />
общая стоимость = <br /><br />
Программа                   			Алгоритм<br />
<br />
' стоимость промтоваров        		' алг «стоимость промтоваров» <br />
<br />
сls                           				' нач <br />
<br />
? «промтовары:»             		' вывод («промтовары:») <br />
<br />
n = 0: sum = 0              			' п = 0: sum = 0 <br />
<br />
do                         				' цикл<br />
<br />
read tv$, tp$, сn, kl          		'     ввод tv$, tp$, сn, kl <br />
<br />
if tv$ = «» then exit do           		' если tv$ = «» то выход <br />
<br />
if tp$ = «пром» then  			'     если tp$ = «пром» то <br />
<br />
n = n + 1                   			'        n =n + 1 <br />
<br />
st = cn*kl                   			'        st = cn *kl <br />
<br />
? tv$, en; kl; st              		'        вывод (tv$, en, kl, st) <br />
<br />
sum = sum + st             			'        sum = sum + st <br />
<br />
end if                         			'     кесли <br />
<br />
loop                            				' кцикл <br />
<br />
if n = 0 then                  			' если n = 0 то<br />
<br />
? «отсутствуют»           		'     вывод («отсутствуют») <br />
<br />
else                          				' иначе<br />
<br />
? «общая cтoимocть=»,sum 		'     вывод(«общая стоимость=», sum) <br />
<br />
end if                      			' кесли <br />
<br />
end                          				' кон<br /><br />
data «сахар», «прод», 6000, 20 <br />
<br />
data «утюги», «пром», 60000, 3 <br />
<br />
data «<A href="http://www.sunhome.ru/books"><font class="normal">книги</font></A>», «пром», 4000, 30 <br />
<br />
data «», «», 0, 0<br /><br />
Рассмотрим в качестве иллюстрации примеры решения экзаменационных задач в МЭСИ - Московском государственном университете экономики, статистики и информатики. Этот университет одним из первых в 1991 году ввел вступительные экзамены по информатике и стал лидером в дистанционном образовании среди государственных вузов Российской Федерации.<br />
[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]<br />
Задание на экзаменах в МЭСИ состоит из пяти задач. Первая задача по системам счисления. Вторая задача - на алгебру логики. Третья задача - тест или анализ блок-схемы. Четвертая и пятая задача - задача на составление алгоритмов и программ.<br />
<br />
Первые три задачи в экзаменационных билетах МЭСИ по сложности оцениваются на два балла, а четвертая и пятая задача - на четыре и пять баллов. Положительную оценку на экзамене получает та работа, в которой набрано не менее 8 баллов.<br />
<br />
Таким образом подсчет баллов показывает, что в МЭСИ для получения положительной оценки на экзаменах по информатике необходимо решить хотя бы одну задачу на составление программ, а решение задач на составление двух программ - гарантирует на экзамене положительную оценку.<br />
<br />
В виду указанной особенности вступительных экзаменов по информатике в МЭСИ разберем примеры решения задач на составление программ, используя для описания алгоритмов псевдокод, а не блок-схемы, как это делается в учебниках МЭСИ.<br />
<br />
Задача 1. Написать программу на любом языке программирования согласно следующему условию.<br />
<br />
Дана целочисленная матрица А размера M&#180;N, где M,N - заданные натуральные числа. Найти количество столбцов матрицы, содержащих одни нулевые элементы.<br />
<br />
Пример матрицы:<br /><br />
Для представления матрицы в программе на языке Бейсик можно использовать операторы data, в первой строке которых указывается размерность матрицы:<br /><br />
data 5<br />
<br />
data 1, 0, 1, 0, 0 <br />
<br />
data 0, 1, 0, 0, 0 <br />
<br />
data 0, 0, 1, 0, 0 <br />
<br />
data 0, 1, 0, 0, 0 <br />
<br />
data 0, 0, 0, 0, 0<br /><br />
Для вывода исходных данных и результатов их обработки можно воспользоваться следующим сценарием:<br /><br />
Матрица А:<br />
<br />
 ... <br />
<br />
   … … …<br />
<br />
 …  <br />
<br />
Число нулей в столбцах:<br />
<br />
 ... <br /><br />
Решением поставленной задачи на ЭВМ можно получить с помощью следующего алгоритма и программа на языке Бейсик. Обратите внимание в программе используются массивы переменной длины, которая определяется при вводе размеров матрицы А:<br /><br />
' подсчет нулевых столбцов     		'  алг «подсчет нулевых столбцов» <br />
<br />
' в квадратной матрице Ann      		' нач<br />
<br />
read n                          			' чтение(п) <br />
<br />
dim A(n,n), D(n)                 			' массивы А(1:п,1:п), D(1:n) <br />
<br />
print «Матрица A»;n;n;«:»        		' вывод («Матрица А»;п;п; «:») <br />
<br />
for k = 1 to n                   			' от k = 1 до п цикл <br />
<br />
for 1 =1 to n                   			'    от l =1 до п цикл <br />
<br />
read A(k,l)                   			'       чтение A(k,l) <br />
<br />
print A(k,l) 				'       вывод A(k,l) <br />
<br />
next 1                         			'    кцикл <br />
<br />
 next k 					' кцикл <br />
<br />
for k = 1 to n                   			' om k= 1 до п цикл <br />
<br />
D(k) = 0                      			'    D(k) = 0 <br />
<br />
for 1 = 1 to n                  			'    от l=1 до п цикл <br />
<br />
if A(k, l) = 0 then            		'       если A(k, l) = 0 то<br />
<br />
D(k) = D(k) + 1            		'          D(k) = D(k) + 1 <br />
<br />
end if                       			'       кесли <br />
<br />
next 1                         			'    кцикл <br />
<br />
print D(k); 				'    вывод D(k);<br />
<br />
next k                          			' кцикл <br />
<br />
end                            				' кон<br /><br />
Задача 2. Дана строка символов. Распечатать все слова нечетной длины, отличные от второго слова.<br />
<br />
(В этой задаче «словом» называется группа символов, разделенная с одной или обеих сторон одним или несколькими пробелами и не содержащую внутри себя пробелов.)<br /><br />
Пример строки<br />
<br />
Я волком бы выгрыз бюрократизм. <br />
<br />
К мандатам почтения нет.<br /><br />
Результат обработки<br />
<br />
бы<br />
<br />
выгрыз<br />
<br />
бюрократизм.<br />
<br />
почтения<br />
<br />
нет.<br />
<br />
Для представления строк в программе на Бейсик можно воспользоваться операторами data:<br /><br />
data «Я волком бы выгрыз бюрократизм.» <br />
<br />
data «К мандатам почтения нет.» <br />
<br />
data «»<br /><br />
Здесь пустое слово «» означает конец исходного текста.<br />
<br />
Для вывода исходных данных и результатов их обработки можно принять следующий сценарий:<br /><br />
исходный текст:<br />
<br />
      <br />
<br />
	… …<br />
<br />
      <br />
<br />
        слова нечетной длины:<br />
<br />
     <br />
<br />
	… …<br />
<br />
     <br /><br />
Решение поставленной задачи на ЭВМ можно получить с помощью следующих алгоритма и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на Бейсике, в которых в виде вспомогательного алгоритма и под<A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> выделена обработка каждой отдельной строки текста:<br /><br />
' выделение слов нечетной длины 		' алг «слова нечетной длины»<br />[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]
<br />
print «исходный текст:»				' вывод «исходный текст;»<br />
<br />
n = 0: s2$ = «»					' n = 0: s2$ = «»<br />
<br />
print «исходный текст:»				' вывод «исходный текст:»<br />
<br />
do							'цикл<br />
<br />
read str$						'    чтение_строки<br />
<br />
if str$ = «» then exit do				' при str$ = «» выход<br />
<br />
print str$						'    вывод_строки<br />
<br />
gosub stroka					'    обработка_строки<br />
<br />
loop							' кцикл<br />
<br />
end							' кон<br /><br />
stroka: ' обработка строки				' алг «обработка строки»<br />
<br />
dl = len(sfr$)					'    dl = длuнa(str$)<br />
<br />
 print «слова нечетной длины:» 			' вывод «слова нечетной длины:»<br />
<br />
sl = 0							' sl=0<br />
<br />
for k=l to dl						' от k = 1 до dl цикл<br />
<br />
if str$(k) 0 «» then				'    если str$(k) &#185; «» то<br />
<br />
sl = sl + 1						'       sl = sl + 1<br />
<br />
elseif sl > 0 then					'    инеc sl > 0 то<br />
<br />
p = k - sl + 1					'       p = k - sl + 1<br />
<br />
slv$ = mid$(str$,p,sl)				'      slv$ = cpeдн.(str$,p,sl)<br />
<br />
n = n + 1						'      n = n + 1<br />
<br />
if n = 2 then					'      если n = 2 то<br />
<br />
sl2$ = slv$					'         sl2$ = slv$<br />
<br />
elseif slv$ 0 sl2$ then				'    инеc slv$ ^ sl2$ то<br />
<br />
if (sl/2)*2= si then				'       если (sl/2) *2 = sl то<br />
<br />
print slv$					'         вывод slv$<br />
<br />
end if						'       кесли<br />
<br />
end if						'    кесли<br />
<br />
sl = 0						'    sl = 0<br />
<br />
end if						'  кесли<br />
<br />
next k							' кцикл<br />
<br />
return							' кон<br /><br />
Экзаменационные задачи МЭСИ (Московский государственный <br />
<br />
университет экономики, статистики и информатики)<br /><br />
1. Дана действительная квадратная матрица А порядка N, где N - заданное натуральное число, все элементы которой различны. Сколько элементов матрицы равны (МАХ + MIN)/2, где МАХ, MIN - соответственно, максимальное и минимальное значения среди элементов матрицы.<br />
<br />
2. Дана целочисленная матрица А размера M&#180;N, где М, N - заданные натуральные числа. Сформировать одномерный массив В, где B(i) равно сумме элементов, кратных пяти и расположенных в i строке матрицы i = 1,2, .... М.<br />
<br />
3. Дана целочисленная матрица А размера MxN, где М, N - заданные натуральные числа. Найти количество столбцов матрицы, содержащих одни нулевые элементы<br />
<br />
4. Дана квадратная целочисленная матрица А порядка N, где N - заданное натуральное число, все элементы которой различны. Поменять местами строку, в которой находится наименьший элемент матрицы, со строкой, где находится наибольший элемент матрицы.<br />
<br />
5. Дана целочисленная матрица А размера М х N, где М, N - заданные натуральные числа, причем М > 5. Найти количество столбцов матрицы, в каждом из которых содержится не менее 5 нулевых столбцов.<br />
<br />
6. Дана квадратная целочисленная матрица А порядка N, где N - заданное натуральное число. Является ли заданная матрица магическим квадратом, т. е. такой матрицей, в которой суммы элементов во всех строках и столбцах одинаковы<br />
<br />
7. Дана действительная матрица А размера M&#180;N, где М, N - заданные натуральные числа, все элементы которой различны. Сформировать одномерный целочисленный массив В, где B(j) равно среднему арифметическому значению индексов наибольшего и наименьшего элементов в j -ом столбце j =1,2, .... N.<br />
<br />
8. Дана строка символов. Распечатать все слова с количеством символов больше 4 и меньше 10.<br />
<br />
9. Дана строка символов. Распечатать самое длинное слово, начинающееся на букву «К».<br />
<br />
10. Дана строка символов. Распечатать самое длинное слово, первые две буквы которого «КО».<br />
<br />
11. Дана строка символов. Составить одномерный массив из слов, которые отличны от слова INFORMATION.<br />
<br />
12. Дана строка символов. Распечатать самое длинное симметричное слово, первые две буквы которого «КО».<br />
<br />
13. Дана строка символов. Выяснить, какое слово встречается раньше в строке с наименьшим или наибольшим количеством символов.<br />
<br />
14. Дана строка символов. Определить среднее количество символов в словах четной длины.<br />
<br />
15. Дана строка символов. Распечатать все слова нечетной длины, начинающиеся и оканчивающиеся на букву «Т».<br /><br />
6.3. Проверка программ на ЭВМ<br /><br />
В экзаменационных задачах и заданиях проверка правильности составленных программ проводится на ЭВМ путем их испытания на специально подбираемых тестах. Эта работа проводится преподавателями или экзаменаторами по завершении отладки программ на ЭВМ.<br />
[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]<br />
Напомним два основных определения, на которых базируется оценка правильности программ по результатам их тестирования:<br />
<br />
1) программа объявляется содержащей ошибки, если можно указать тесты, при которых выполнение <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ приводит к отказу, сбою или получению неправильных результатов;<br />
<br />
2) программа является правильной, если при любых допустимых исходных данных она дает правильные результаты.<br />
<br />
Напомним два дополнительных, но весьма существенных определения допустимости исходных данных:<br />
<br />
1) исходные данные считаются допустимыми, если для этих данных существует решение поставленных задач;<br />
<br />
2) исходные данные недопустимы, если для этих данных поставленная задача не имеет решений.<br />
<br />
Наконец правильность результатов решения регламентируется следующими двумя определениями:<br />
<br />
1) результаты решения правильные, если они соответствуют требованиям поставленной задачи;<br />
<br />
2) результаты решения неправильные, если они противоречат требованиям поставленной задачи.<br />
<br />
Подбор тестов для проверки программ опирается на некоторые общие принципы, среди которых можно выделить следующие:<br />
<br />
1) проверка частных случаев задачи;<br />
<br />
2) проверка основных случаев задачи;<br />
<br />
3) проверка граничных случаев.<br />
<br />
Частные случаи - те, которые допускают простейшие способы решения и проверки правильности результатов. Граничными случаями объявляются данные, которые лежат на границе между допустимыми и недопустимыми данными.<br />
<br />
Разбор этих понятий проведем на примере типичной экзаменационной задачи по информатике.<br />
<br />
Задача. «Средняя зарплата».<br />
<br />
Среди N сотрудников отдела выделить тех, кто получает зарплату выше средней по данным из следующей таблицы:<br /><br />
Иванов	начальник	2500<br />
<br />
Петров	сотрудник	1800<br />
<br />
Сидоров	секретарь	900<br /><br />
Типичность этой задачи заключается в том, что она является одной из задач обработки данных, представленных в нашем случае таблицей. Частным случаем в этой задаче является таблица, состоящая из одной строки (случай N = 1). Граничным случаем - ситуация, когда все сотрудники получают одинаковую зарплату и никто из них не получает зарплату выше средней.<br />
<br />
Типичными ошибками в программах решения этой задачи может быть отсутствие обработки частного случая, когда N = 1, либо отсутствие ответа на граничную ситуацию, когда все получают одинаковую зарплату.<br />
<br />
Приведем примеры тестов, применявшихся при проверке на ЭВМ правильности программ решения этой задачи:<br />
<br />
1) тест1 (проверка основного случая):<br /><br />
Иванов	начальник	2500<br />
<br />
Сидоров	секретарь	900<br /><br />
2) тест2 (проверка частного случая):<br /><br />
Иванов	начальник	2500<br /><br />
3) тест3 (проверка граничных ситуаций):<br /><br />
Иванов	начальник	2000<br />
<br />
Петров	сотрудник	2000<br /><br />
Независимо от языка программирования и способа ввода-вывода данных отсутствие каких бы то ни было ответов - есть «отказ», вывод избыточных данных или неполные данные - есть «сбой», неправильный список - есть неправильный результат решения.<br />
<br />
Правильными ответами с точностью до формулировок в этой задаче являются:<br />
<br />
ответ1 (основной случай):<br /><br />
Иванов	начальник	2500<br /><br />
ответ2 (частный случай):<br /><br />
«никто не получает зарплату выше средней» <br /><br />
ответ3 (граничный случай):<br /><br />
«никто не получает зарплату выше средней»<br /><br />
Приведем правильное решение поставленной задачи в форме <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на языке Basic, в которой исходные данные записываются в списке операторов data. Разработку приводимой ниже <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> проведем, начиная с составления сценария, в котором учитываются все ситуации и частные случаи постановки задачи.<br />[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]
<br />
Сценарий<br /><br />
список сотрудников:<br /><br />
         *<br />
<br />
		… … …<br /><br />
средняя з/плата =  <br />
<br />
з/плата выше средней:<br /><br />
      	           * <br />
<br />
				… … …<br /><br />
не получает никто<br /><br />
Программа				Алгоритм<br />
<br />
' выше средней з/платы		алг «выше средней з/платы<br />
<br />
сls					нач<br />
<br />
? «сотрудники:»			   вывод «сотрудники:»<br />
<br />
do					   цикл<br />
<br />
read Hn$, dl$, zp		       чтение fm$, dl$, zp<br />
<br />
if fm$=«» then exit do		   если fm$=«» то выход<br />
<br />
? fm$, dl$, zp			       вывод fm$, dl$, zp<br />
<br />
sum = sum + zp		       sum = sum + zp<br />
<br />
n = n + 1			       n = n + 1<br />
<br />
loop					кцикл<br />
<br />
sr = sum/n				sr = sum/n<br />
<br />
?  «средняя з/плата=»; sr		вывод («средняя 3/nлama=»;sr)<br />
<br />
? «з/плата выше средней:»	вывод(«з/плата выше средней:»)<br />
<br />
restore zplts				перезагрузка данных<br />
<br />
ns = 0					ns = 0<br />
<br />
for k = 1 to n				от k = 1 до п<br />
<br />
read fm$, dl$, zp			    чтение fm$, dl$, zp<br />
<br />
if zp > sr then			    если zp > sr то<br />
<br />
? fni$, zp			       вывод (fm$, zp)<br />
<br />
ns = ns + 1			       ns = ns + 1<br />
<br />
end if				       кесли<br />
<br />
next k					кцикл<br />
<br />
if ns = 0 then				если ns = 0 то<br />
<br />
? «нe получает никто»		   вывод («не получает никто»)<br />
<br />
end if					кесли<br />
<br />
end					кон<br /><br />
zplts: 'данные о зарплате:<br />
<br />
data «Иванов», «начальник», 250000 <br />
<br />
data «Сидоров», «секретарь», 90000 <br />
<br />
data «», «», 0<br /><br />
Проверку правильности этой <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> следует провести на указанных выше трех тестах. Достоинства приведенной <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>:<br />
<br />
1) хорошо организованный вывод результатов, совмещенный с выводом исходных данных	(свойства, заложенные в сценарий);<br />
<br />
2) удобная организация структуры <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, позволяющая локализовать возможные ошибки (свойства структурированных алгоритмов);<br />
<br />
3) удобная организация исходных данных в тексте <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A>, позволяющая упростить процедуру тестирования и отладки <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на ЭВМ. <br /><br />
Экзаменационные задачи ГУУ <br />
<br />
(Государственный университет управления)<br /><br />
Задача 1<br />
<br />
Каждое из N фермерских хозяйств представило свой перечень из М машин разных наименований (марок) на их приобретение в единственном экземпляре (N и М заданы). Составить общий перечень необходимых марок машин с указанием их количества, расположив марки в порядке убывания потребности в них.<br /><br />
Задача 2<br />
<br />
N сотрудников (известны фамилии) работают в 2 смены по индивидуальному графику (1-й день - «утро», 2-й день - «вечер»,  3-й день - «выходной»). Все они в свое нерабочее время должны пройти диспансеризацию в медпункте, который работает ежедневно в 2 смены. В день начала диспансеризации о каждом сотруднике известно в какую смену он работает или то, что он выходной. Составить ежедневные списки посещения сотрудниками медпункта с указанием времени посещения («утро» и «вечер»), учитывая, что в каждой смене медпункта могут быть приняты не более М человек должен посетить медпункт один раз. Числа N и М заданы.<br /><br />
Задача 3<br />
<br />
На кинофестивале 35 стран представили свои фильмы. Общее число фильмов не превышает 100. Известны названия стран - участниц и фильмов, а также баллы, полученные каждым из фильмов. Определить фильм, завоевавший первый приз (максимальный балл) и страну, получившую наибольший средний балл за представленные фильмы. Считать, что фильмы в общем списке по странам не упорядочены, а фильм и страна, его представляющая, является единственными победителями.<br /><br />
Задача 4<br />
<br />
Известны очки, полученные каждым из М спортсменов-многоборцев в каждом из N видов соревнований (N и М заданы). Для каждого из спортсменов определить, в каких видах соревнований он получил результат не хуже других спортсменов и какой конкретно. Фамилия спортсменов и названия видов соревнований известны.<br /><br />
Задача 5<br />
<br />
Даны сведения о соревновании N фигуристов ( N - заданное число): фамилия, наименование спортивного общества, 10 оценок за выступление. Требуется по каждому спортивному обществу определить фигуриста, показавшего наивысший результат, считая его единственным. Баллы, полученные фигуристом, подсчитываются следующим образом: максимальная и минимальная оценки отбрасываются, а из остальных формируется средняя.<br /><br />
6.4. Олимпиадные задачи по информатике<br /><br />
Особый интерес у студентов и школьников, увлекающихся информатикой, вызывают олимпиадные задачи - наиболее сложные задачи из курса информатики, с помощью которых в форме соревнования выявляются наиболее талантливые и способные учащиеся.<br />
<br />
Согласно приказу министра образования Российской Федерации № 500 победители и призеры международных олимпиад могут руководством российских вузов зачисляться без экзаменов на профильные специальности и факультеты.<br />
<br />
Победителям и призерам российских и региональных олимпиад ректора вузов победы в таких олимпиадах согласно указанному приказу могут засчитывать как успешную сдачу профильных вступительных экзаменов.<br />
<br />
Особенностью олимпиад по информатике является то, что решение олимпиадных задач и выполнение конкурсных заданий проводится исключительно на ЭВМ. Второй особенностью олимпиад по информатике в силу использования персональных компьютеров является форма проведения олимпиад.<br />
[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]<br />
В 1995 году по инициативе Международной академии информатизации была проведена первая сетевая олимпиада, в которой приняло участие более 200 учащихся Москвы и Московской области. Новацией этой олимпиады было то, что задачи и результаты их решения передавались с помощью электронной почты, а оценка составленных программ проводилась на ЭВМ с использованием заранее подготовленных тестов.<br />
<br />
Победителям и призерам этой олимпиады, решившим наибольшее число задач с наименьшим числом ошибок, было предложено поступление без экзаменов в Московский институт электроники и математики (МИЭИ) для обучения по специальностям в области информатики и вычислительной техники.<br />
<br />
Примеры олимпиадных задач по информатике в других университетах и вузах Российской Федерации, которые засчитывают результаты побед в региональных, российских и международных олимпиадах по информатике, можно найти в <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>е по запросу «олимпиада информатики» с помощью поисковых систем Апорт, Ремблер или Яндекс. В 1999 году таких вузов было более сорока.<br />
<br />
Ниже приводятся тексты задач первого тура первой сетевой олимпиады с указанием максимального числа баллов за решение этих задач, а также примеры программ их решения на языке Basic.<br />
<br />
Оценки за решение задач проставлялись по следующей методике:<br />
<br />
1) при правильных результатах на всех тестах 100% баллов; 2) при получении правильного решения хотя бы на одном тесте 40% баллов, а за результаты на остальных (n - 1 )-м тестах добавляется 60%/(n - 1) баллов; 3) при неправильных результатах на всех тестах или отсутствии <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> оценка не ставилась.<br />
<br />
На первом туре первой сетевой олимпиады были предложены четыре задачи информационно-логического и геометрического содержания со следующими оценками сложности, определенными экспертами: <br />
<br />
задача 1 («Экзамены») - 50 баллов;<br />
<br />
задача 2 («Слова») - 100 баллов;<br />
<br />
задача 3 («4 точки») -150 баллов;<br />
<br />
задача 4 («Ломаная») - 250 баллов.<br />
<br />
Более 120 участников из 200 представили решения задач. Из них более 20 представили решения трех задач, девять участников предложили решения четырех задач. Правильное решение четырех задач представил только один участник, но даже и у него в последней четвертой задаче программа не прошла все тесты.<br />
<br />
В целом задачи были подобраны по принципу от простого к сложному. С одной стороны это дало всем успевающим в информатике ученикам довести до успешных результатов хотя бы одну программу, а с другой стороны - сложность и дифференциация задач были таковы, чтобы можно было увидеть уровень подготовки и оценить способности участников.<br />
<br />
Рассмотрим формулировки задач, проверочные тесты и правильные решения в форме программ на языке Basic. Первая задача относится к классу информационно-логических.<br /><br />[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]
Задача 1. «Экзамены».<br />
<br />
Среди N абитуриентов, сдававших экзамены по информатике, математике и языку, выбрать всех отличников и всех учащихся, набравших в сумме не меньше проходного балла. Данные о проходном балле вводятся с клавиатуры, а данные о результатах сдачи экзаменов представлены таблицей:<br /><br />
фамилия	имя	информатика	математика	язык<br />
<br />
Иванов	Саша	4	4	3<br />
<br />
Петрова	Катя	5	5	5<br />
<br />
Сидоров	Алеша	5	3	3<br /><br />
Приведем проверочные тесты и правильные результаты:<br />
<br />
Тест 1:<br /><br />
Иванов	Саша	4	4	3<br />
<br />
Петрова	Катя	5	5	5<br />
<br />
Сидоров	Алеша	5	3	3<br /><br />
проходной балл =? 12 <br /><br />
Правильные результаты:<br /><br />
отличники:<br />
<br />
Петрова Катя<br />
<br />
не меньше проходного:<br />
<br />
Иванов Саша <br />
<br />
Петрова Катя<br /><br />
Тест 2:<br /><br />
Иванов	Саша	4	4	3<br />
<br />
Сидоров	Алеша	5	3	3<br /><br />
проходной балл =? 12 <br /><br />
Правильные результаты:<br /><br />
отличники:<br />
<br />
отсутствуют<br />
<br />
не меньше проходного:<br />
<br />
Иванов Саша 4  4  4<br />
<br />
Тест 3:<br /><br />
Сидоров	Алеша	5	3	3<br /><br />
проходной балл =? 14<br /><br />
Правильные результаты:<br />
<br />
отличники:<br />
<br />
отсутствуют                             <br />
<br />
 не меньше проходного:<br />
<br />
отсутствуют.<br />
<br />
В приведенных тестах анализируются различные логические ситуации с отсутствием «отличников» или «успешно» сдавших экзамены. При составлении <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> эти ситуации можно явно предусмотреть в сценарии диалога с ЭВМ:<br />
<br />
Сценарий<br /><br />
оценки учащихся:<br />
<br />
          *<br />
<br />
  ………………………………….<br />
<br />
проходной балл=?  <br />
<br />
отличники:<br />
<br />
          				                                *<br />
<br />
					……………<br />
<br />
отсутствуют <br />
<br />
не меньше проходного:<br />
<br />
       				                     *<br />
<br />
					……………..<br />
<br />
отсутствуют<br /><br />
Программа                       			Алгоритм<br />
<br />
' результаты экзаменов             		алг «результаты экзаменов»<br />
<br />
    cls                                    			      нач<br />
<br />
  ? «оценки учащихся:»              		    вывод («оценки учащихся:») <br />
<br />
     do                               			        цикл <br />
<br />
 read fm$, nm$, mt, in, zk            	            ввод fm$, nm$, mt, in, zk <br />
<br />
if fm$ = «» then exit do             		            если fm$ = «» то выход<br />
<br />
? fm$, nm$, mt, in, zk			вывод (fm$, nm$, mt, in, zk)<br />
<br />
loop						кцикл<br />
<br />
input «проходной балл=»,b1		запрос («проходной балл=»,b1)<br />
<br />
restore ocenki				перезагрузка_ oценки<br />
<br />
? «отличники:»				вывод («отличники:»)<br />
<br />
n = 0						п = 0<br />
<br />
do						       цикл<br />
<br />
read fm$, nm$, mt, in, zk			    ввод fm$, nm$, mt, in, zk<br />
<br />
if fm$ = «» then exit do			   если fm$ = «» то выход<br />
<br />
if mt=5 and in=5 and zk=5 then		   если mt=5 и in = 5 и zk=5 то<br />
<br />
? fin$, nm$				      вывод (fm$, nm$)<br />
<br />
n = n + 1					      n = n + 1<br />
<br />
end if					   кесли<br />
<br />
loop						  кцикл<br />
<br />
 if n=0 then ? «отсутствуют»		 если п=0 то вывод(«отсутствуют»)<br />
<br />
restore ocenki				перезагрузка-оценок<br />
<br />
? «не меньше проходного:»		   вывод («не меньше проходного:»)<br />
<br />
n = 0						п = 0<br />
<br />
do						      цикл<br />
<br />
   read fm$, nm$, mt, in, zk			   ввод fm$, nm$, mt, in, zk<br />
<br />
       if fm$ = «» then exit do			      если fm$ = «» то выход<br />
<br />
sum = mt + in + zk			         sum = mt + in + zk<br />
<br />
if sum >= hi then				  если sum >= bl то<br />
<br />
? fm$, nm$, sum				    вывод (fm$, nm$, sum)<br />
<br />
n = n + 1					    n = n + 1<br />
<br />
end if						  кесли<br />
<br />
loop						кцикл<br />
<br />
if n = 0 then ? «отсутствуют»		  если п = 0 то вывод («отсутствуют»)<br />
<br />
end						кон<br /><br />
ocenki: 'оценки учащихся <br />
<br />
data «Иванов», «Саша», 4, 4, 3 <br />
<br />
data «Петрова», «Катя», 5, 5, 5 <br />
<br />
data «Сидоров», «Алеша», 5, 3, 3 <br />
<br />
data «», «», 0, 0, 0<br />
<br />
Рассмотренная задача имеет чисто квалификационный характер проверки знаний информатики	по школьной программе и умения самостоятельно составлять алгоритмы и <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> решения на ЭВМ простейших информационных	задач. С этой задачей справилось большинство участников олимпиады. Однако далеко не все предусмотрели исключительные ситуации и в результате многие из них потеряли определенную часть баллов на указанных тестах.<br />
<br />
Вторая олимпиадная задача также относится к классу информационно-логических задач. Ее содержание заключается в переработке символьных данных.<br /><br />
Задача 2. «Слова».<br />
<br />
Для фразы на русском языке, в которой нет знаков препинания, а слова отделяются одним единственным пробелом, организовать циклическую перестановку слов.<br />
<br />
Исходная фраза:<br /><br />
ВЕЧЕРАМИ МЫ СМОТРИМ ТЕЛЕВИЗОР<br /><br />
Циклическая перестановка слов:<br /><br />
МЫ СМОТРИМ ТЕЛЕВИЗОР ВЕЧЕРАМИ <br />
<br />
СМОТРИМ ТЕЛЕВИЗОР ВЕЧЕРАМИ МЫ <br />
<br />
ТЕЛЕВИЗОР ВЕЧЕРАМИ МЫ СМОТРИМ <br />
<br />
ВЕЧЕРАМИ МЫ СМОТРИМ ТЕЛЕВИЗОР<br /><br />
Сценарий<br /><br />
Исходная фраза:<br />
<br />
 <br />
<br />
Перестановка слов:<br />
<br />
      					 d2 and d4 > d2 then<br />
<br />
' нет пересечения <br />
<br />
Iseif d3 < 0 and d4 < 0 then<br />
<br />
' нет пересечения <br />
<br />
else ' отрезки пересекаются:<br />
<br />
gosub otrеz ' общий отрезок <br />
<br />
end if <br />
<br />
return<br />
<br />
otrez: 'расчет общего отрезка <br />
<br />
np = np + 1<br />
<br />
? «отрезок пересечения:» <br />
<br />
if d3 < 0 or d4 < 0 then<br />
<br />
? х1; у1; «-» <br />
<br />
elseif d3 < d4 then<br />
<br />
? х3; у3; «-» <br />
<br />
else                                     <br />
<br />
? х4; у4; «-» <br />
<br />
end if <br />
<br />
if d2 < d3 or d2 < d4 then<br />
<br />
? х2; у2 <br />
<br />
elseif d3 < d4 then<br />
<br />
? x3; y3 <br />
<br />
else<br />
<br />
? х4; у4 <br />
<br />
end if <br />
<br />
return<br /><br />
vvod: ' ввод данных <br />
<br />
restore test1 <br />
<br />
read n<br />
<br />
? «точек:»;nt<br />
<br />
for k = 1 to nt<br />
<br />
read x(k), y(k)<br />
<br />
? x(k); y(k) <br />
<br />
next kn <br />
<br />
t = nt + 1 <br />
<br />
x(nt) = x(l) <br />
<br />
y(nt) = y(l) <br />
<br />
return<br /><br />
test1: 'точки ломаной:<br />
<br />
data 4 <br />
<br />
data 0, 0 <br />
<br />
data 1, 0 <br />
<br />
data 0, 1 <br />
<br />
data 1, 1<br />
<br />
test2: 'точки ломаной:<br />
<br />
data 4 <br />
<br />
data 0, 0 <br />
<br />
data 1, 0 <br />
<br />
data 0, 1 <br />
<br />
data 1, 1<br /><br />
В тексте данной <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> записаны два варианта тестовых данных, смена которых может быть проведена изменением имени метки test1 или test2 в операторе перезагрузки restore в подпрограмме ввода данных.<br /><br />
6.5. Технология дистанционного обучения<br /><br />
Дистанционное образование - это новая технология обучения, основанная на использовании персональных компьютеров, электронных учебников и сетей телекоммуникации. Эта новая технология и форма обучения самым тесным образом связана с развитием сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> [7, 8, 9].<br />
<br />
В Российской Федерации подготовлен законопроект, по которому дистанционное образование приравнивается к традиционным формам очного, заочного и вечернего обучения. В настоящее время пять ведущих вузов России ведут эксперименты по отработке технологий дистанционого обучения студентов.<br />
<br />
В Республике Казахстан дистанционные формы обучения получили официальное признание после принятия нового закона об образовании летом 1999 года. В Законе об образовании Казахстана дистанционное обучение определено как «одна из форм обучения лиц, находящихся в отдалении от организаций образования, с помощью электронных и телекоммуникационных средств».<br />
<br />
Началом распространения новых компьютерных технологий обучения послужило введение в середине 80-х годов курса информатики во всех средних школах нашей страны [16]. Основной целью школьного курса информатики с конца 80-х годов было обучение всех учащихся компьютерной грамотности - умениям читать, писать и получать информацию с помощью персональных ЭВМ [17].<br />
<br />
Эксперименты с дистанционным образованием в вузах России начались с середины 90-х годов. Технологической базой для дистанционного обучения являются персональные компьютеры, электронные учебники и вычислительные сети. Развитие сети телекоммуникаций и появление образовательных серверов в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> сделало реальностью распространение новых технологий дистанционного обучения [7, 8. 9].<br />
<br />
За рубежом развитие сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> в 90-х годах привело к появлению первых электронных университетов как новых компьютерных форм получения образования. Насыщение персональными компьютерами университетов, колледжей и средних школ создает предпосылки для создания новых дистанционных форм обучения студентов и старшеклассников у нас в стране и зарубежом.<br />
<br />
В США, Великобритании, Австралии, Канаде, Германии развитие сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> создало условия для организации сетей дистанционного обучения, переживающих настоящий бум. При этом наиболее продвинутые проекты дистанционного образования развиваются на базе или при поддержке крупнейших компьютерных фирм - IBM, Apple, DEC, Sun, Novel, Microsoft и т. д.<br />
<br />
Одним из наиболее известных зарубежных проектов дистанционного обучения является создание Открытого университета Великобритании. В этом университете обучение в форме компьютерных телеконференций началось в конце 80-х годов.<br />
<br />
Основной технологической идеей этого проекта была передача заданий и результатов их выполнения с помощью электронной почты и обсуждение работ посредством телеконференций. К середине 90-х годов эти курсы пользовались успехом более чем у 5000 студентов, имевших домашние компьютеры.<br />
<br />
Однако главным достижением проекта стали комплекты бумажных учебников, изданные университетом для дистанционного обучения и подготовки менеджеров в области информационных технологий. Это позволило Открытому университету перейти к дистанционному обучению студентов на международном уровне.<br />
<br />
Одна из ветвей этого международного проекта получила развитие в России на базе образовательной корпорации LINK, использующей эти учебники. В настоящее время в Открытом Университете в дистанционной форме обучается несколько тысяч студентов.<br />
<br />
Вторым по развитию у нас в стране является проект Института дистанционного образования Московского государственного университета экономики, статистики и информатики (МЭСИ). В российском проекте дистанционного образования в настоящее время обучается более 25 тысяч студентов по различным экономическим специальностям, для которых созданы соответствующие комплекты бумажных и электронных учебников [6, 7].<br />
<br />
Еще один проект дистанционного образования был развернут в середине 90-х годов Российским Государственным технологическим университетом (МАТИ) на базе более 120 школ Москвы, Подмосковья, Челябинска и Приднестровья. Целью этого проекта была дистанционной подготовка учащихся средних школ к вступительным экзаменам в вузы Российской Федерации.<br />[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]
<br />
Для данного проекта были созданы учебные пособия для поступающих в вузы по информатике, математике и английскому языку с использованием тестов, электронных учебников и электронных задачников. В рамках данного проекта был разработан и апробирован электронный учебник по информатике, используемый в настоящем учебном пособии [20].<br />
[/i][/k][/n][/l][/l][/n][/n][/n][/k][/k][/n][/n][/n][/k][/k][/l][/k][/k][/k][/k][/n][/n][/n][/k][/l][/k][/l][/k][/l][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][/k][k][k][k][k][k][k][k][k][k][k][k][k][k][l][k][l][k][l][k][n][n][n][k][k][k][k][l][k][k][n][n][n][k][k][n][n][n][l][l][n][k][i]<br />
Особую роль в развитии дистанционного образования, на наш взгляд, может и должен сыграть вузовский курс информатики, который позволит отработать технологию компьютерного обучения с использованием сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> и электронных учебников и организацией компьютерной технологии приема и сдачи экзаменов.<br />
<br />
Новыми в дистанционном обучении для отечественной системы образования являются электронные учебники с использованием компьютерных методов тестирования знаний. Отличительной особенностью электронных учебников является то, что работа с ними имеет форму диалога, в ходе которого учащиеся усваивают знания в виде фактов, вопросов, суждений, утверждений и т. п.<br />
<br />
Кроме того, в электронных учебниках система контрольных тестов позволяет учащимся самостоятельно проверять усваиваемые знания. Большую помощь при этом могут оказать бумажные учебники, поскольку в них могут быть найдены ответы на вопросы, которые заложены в электронный учебник.<br />
<br />
В этом назначении электронные учебники для систем дистанционного обучения могут выполнять функции репетиторов, оказывающих учащимся помощь в изучении различных учебных дисциплин. Консультации преподавателей при этом переносятся на обсуждение индивидуальных заданий с учетом интересов учащихся.<br />
<br />
Настоящий бумажный учебник по информатике вместе со своими электронными версиями - пример новой технологии обучения, которая может использоваться в вузах и школах для изучения курса информатики, в домашних условиях и учебных центрах - для самообразования и дистанционного обучения.<br />
<br />
Необходимым условием для этого является возможность доступа к персональным компьютерам и электронной версии настоящего учебника. Для работы в системе дистанционного обучения необходим доступ к сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, а также электронный почтовый ящик, по которому можно получать электронную корреспонденцию из центра дистанционного обучения.<br />
<br />
Сетевые электронные версии настоящего учебника по информатике можно найти в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> с помощью информационно-поисковых систем Яндекс или Апорт по запросу «Каймин учебник информатика». Отличием этих электронных учебников является то, что в них можно не только листать и читать текст учебника, но и найти тесты, с помощью которых можно перепроверить свои знания по информатике.<br />
<br />
Данные тесты по информатике с 1997 года используются в системе дистанционного контроля знаний учащихся средних школ, созданных на психологическом факультете Московского Государственного Университета и получившей название Телетестинг. Использование психологами этих тестов в течение последних трех лет показало удивительные результаты.<br />
<br />
Все школьники, прошедшие телетестинг (дистанционный контроль знаний), показали самый высокий уровень компьютерной грамотности. Однако на вопросы об алгоритмизации и о программировании выпускники школ в основном продемонстрировали удовлетворительные либо даже неудовлетворительные знания.<br />
<br />
Объяснением этим фактам может служить следующее. Участвовать в телетестинге могут только те школьники, которые умеют работать на ЭВМ, а для этого необходимо получить соответствующие знания. Самые первые учебники ориентировались на изучение основ алгоритмизации без работы и отладки программ на ЭВМ [16].<br />
<br />
В новейших учебниках по информатике изучение элементов программирования либо вовсе отсутствует, либо проходит в отрыве от изучения основ алгоритмизации [18, 19, 21]. По этой причине знания учащихся либо фрагментарны, либо неверны.<br />
<br />
Освоению компьютерной грамотности с последующим изучением алгоритмизации и отладки программ на ЭВМ был посвящен базовый школьный учебник [17], признанный лучшим в 1997 году. Однако он не переиздавался и стал недоступен.<br />
<br />
Настоящий учебник, созданный в соответствии с требованиями государственных стандартов образования, ориентирован на изучение студентами современного уровня развития информатики как информационной индустрии и освоение техники решения профессиональных задач на ЭВМ.<br />
<br />
В этом смысле он является развитием и продолжением нашего школьного учебника по информатике и построен так, чтобы его можно было использовать как в условиях очного, так и дистанционного обучения. При этом в учебник введена линия на опережающее изучение <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A>, для того чтобы студенты как можно скорее могли получить доступ к его информационным ресурсам, электронным книгам, журналам и центрам дистанционного образований.<br />
<br />
Самую большую библиотеку электронных книг и учебников по экономике можно найти на серверах Института дистанционного образования МЭСИ. В этой библиотеке можно найти электронную версию настоящего учебника по информатике для студентов.<br />
<br />
В настоящее время практически все ведущие вузы Российской Федерации, имеющие отделения или факультеты информатики или информационных технологий, включились в развитие технологий дистанционного обучения и ввели в той или иной форме вступительные экзамены или испытания по информатике.<br />
<br />
Подробную информацию о всех Российских вузах и новостях дистанционного образования можно найти в сети <A href="http://www.sunhome.ru/journal/34"><font class="normal">Интернет</font></A> на сервере Информатика Министерства образования Российской Федерации. <br /><br />
Приложение<br />
<br />
ИНТЕРПРЕТАТОР ЯЗЫКА ПРОЛОГ<br /><br />
1. Назначение интерпретатора Пролога<br /><br />
Интерпретатор языка Пролог предназначен для проведения практикума на персональных компьютерах с базами знаний, экспертными системами и изучением принципов логического вывода в системах искусственного интеллекта.<br />
<br />
Данный интерпретатор может использоваться на персональных компьютерах IBM PC с операционной системой MS DOS или Windows. Для работы интерпретатора достаточно иметь оперативную память не менее 250 Кбайт и накопитель на гибком или жестком диске.<br /><br />
2. Запуск интерпретатора Пролога<br /><br />
Интерпретатор Пролога находится на жестком диске или дискете в каталоге с именем PROLOG. Запуск интерпретатора проводится с помощью команды<br />
<br />
> prolog<br />
<br />
из каталога, в котором он находится.<br />
<br />
Интерпретатор может быть запущен одновременной с загрузкой некоторой базы знаний или <A href="http://www.sunhome.ru/download"><font class="normal">программы</font></A> на Прологе следующей командой:<br />
<br />
> prolog <br />
<br />
где  - это имя некоторого файла данных. Если запуск прошел успешно, то на экране появится изображение такого вида:<br /><br />
(С) Файл Диалог Окна                   		Свободно: 303Кб. <br />
<br />
18:40:54                                         <br />
<br />
- [_ ] ---------------   D:\PROLOG\FAMILY.PRL ——————1-[208]-<br />
<br />
мама (зина, вова);<br />
<br />
папа (вова, лена);<br />
<br />
бабушка (х, z) 
        </div>
			
			<div class="info" style="text-align:left">
				<span style="text-transform: capitalize">эта</span> книга опубликована: 
				<a href="/people/%DE%F1%F2%E0%F1" title="Юстас">Юстас</a>
				более года назад в разделе 
				<a href="books" title="Книги">Книги</a> 
				на сайте <a href="/" title="Дом Солнца">Дом Солнца</a>.
			</div>
			
			<div class="bottomnav" style="text-align:left"> [
		        <a title="Дом Солнца" href="/">На главную</a> | 
		        <a title="В раздел Книги" href="/books">В раздел Книги</a> | 
		        <a title="Наука" href="/books/nauka">В Наука</a> | 
                <a title="Наука" href="/books/informatika">Информатика</a> | 
                <a title="Виталий Каймин" href="/books/n.vitaliy_kaymin">Виталий Каймин</a> | 
                <a title="К основной странице" href="/books/b.informatika">К основной странице</a>
                ]
 </div>
			
		</div>
		
		<div id="footer">
			<table id="bottom">
				<tr>	
					<td class="text">
						<ul>
							<li>
								<a href="/reklama" title="Размещение рекламы">

									Размещение рекламы
								</a>
							</li>
							
							<li>
								&copy; 2002-2017 
								<a href="/" title="Дом Солнца">Дом Солнца</a>&trade;
							</li>
						</ul>
					</td>

				</tr>
				<tr>
					<td>
                         <script>
window.sunhome_counter_id = '5553';
var script = '//www.sunhome.ru/counter.php';
var q = '?id=5553&amp;c=1' 
+ '&amp;rand=' + Math.random();
document.write('<a href="//www.sunhome.ru/" title="SunHome.ru - Дом Солнца">' 
    + '<img src="' + script + q + '" width="88" height="31" alt="SunHome.ru - Дом Солнца">'
    + '</a>');
</script> 
                        

	
	
		<script type="text/javascript">new Image().src = "//counter.yadro.ru/hit?r" + escape(document.referrer) + ((typeof(screen)=="undefined")?"" : ";s"+screen.width+"*"+screen.height+"*" + (screen.colorDepth?screen.colorDepth:screen.pixelDepth)) + ";u"+escape(document.URL) + ";h"+escape(document.title.substring(0,80)) + ";" +Math.random();</script><!--/LiveInternet-->	
	

					</td>
				</tr>
			</table>
		</div>
	</div>
</body>
<!-- new -->
